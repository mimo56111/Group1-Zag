
driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001fd4  00002068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800090  00800090  00002098  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000089b  00000000  00000000  00004a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000300  00000000  00000000  000052c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c0f  00000000  00000000  000055c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db0  00000000  00000000  000081d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e5  00000000  00000000  00008f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000084c  00000000  00000000  0000a16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000958  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002805  00000000  00000000  0000b310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000db15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_10>
      2c:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
      8a:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
#include "stdmacros.h"
#include "Register.h"
#include "Data_type.h"
void ADC_vInit(){
	/* Configure Vref (Vcc on AVCC with external capacitor at Vref pin)*/
	SET_BIT(myADMUX,myREFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(myADMUX,myREFS1);
      94:	3f 9a       	sbi	0x07, 7	; 7
	/* Enable ADC */
	SET_BIT(myADCSRA,myADEN);
      96:	37 9a       	sbi	0x06, 7	; 6
	/* Adjust ADC Clock make the division factor 64 because we use freq. 8M so 8M/64=125KHz */
	SET_BIT(myADCSRA,myADPS2);
      98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(myADCSRA,myADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
	CLR_BIT(myADCSRA,myADPS0);
      9c:	30 98       	cbi	0x06, 0	; 6
}
      9e:	08 95       	ret

000000a0 <ADC_u16Read_Single_Endded>:
u16 ADC_u16Read_Single_Endded(u8 channel_number){
	u16 read_value ;
	/* Must be from 0>>7 to select one of these pin ADC0,1,2 */
	channel_number &=0x07;   
	/* Clear from MUX4 to MUX0 before set the required bit */
	myADMUX &=0xE0;    
      a0:	97 b1       	in	r25, 0x07	; 7
      a2:	90 7e       	andi	r25, 0xE0	; 224
      a4:	97 b9       	out	0x07, r25	; 7
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	myADMUX = myADMUX | channel_number; 
      a6:	97 b1       	in	r25, 0x07	; 7
}

u16 ADC_u16Read_Single_Endded(u8 channel_number){
	u16 read_value ;
	/* Must be from 0>>7 to select one of these pin ADC0,1,2 */
	channel_number &=0x07;   
      a8:	87 70       	andi	r24, 0x07	; 7
	/* Clear from MUX4 to MUX0 before set the required bit */
	myADMUX &=0xE0;    
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	myADMUX = myADMUX | channel_number; 
      aa:	98 2b       	or	r25, r24
      ac:	97 b9       	out	0x07, r25	; 7
	/* Start the conversion by set Bit (ADSC) */
	SET_BIT(myADCSRA,myADSC);
      ae:	36 9a       	sbi	0x06, 6	; 6
	/*Wait for the conversion to complete and ADIF(Bit 4) become 1 */
	while(IS_BIT_CLR(myADCSRA,myADIF)); 
      b0:	34 9b       	sbis	0x06, 4	; 6
      b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_u16Read_Single_Endded+0x10>
	/* Clear ADIF by write'1' to it */
	SET_BIT(myADCSRA,myADIF);
      b4:	34 9a       	sbi	0x06, 4	; 6
	/* Combine ADCL +ADCH */
	read_value = myADCL; 
      b6:	84 b1       	in	r24, 0x04	; 4
      b8:	90 e0       	ldi	r25, 0x00	; 0
	read_value |= (myADCH<<8);   
      ba:	45 b1       	in	r20, 0x05	; 5
      bc:	34 2f       	mov	r19, r20
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	82 2b       	or	r24, r18
      c2:	93 2b       	or	r25, r19
	      
	
	/* Return value*/                             
	return read_value;
      c4:	08 95       	ret

000000c6 <button_vInit>:
#include "GPIO_MCAL.h"
#define F_CPU 8000000UL
#include "util/delay.h"

void button_vInit( u8 port,u8 pin ){
	GPIO_vsetPIN_DIR(port, pin,0);
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
	
}
      cc:	08 95       	ret

000000ce <button_u8read>:

u8 button_u8read( u8 port,u8 pin ){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
      ce:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <GPIO_u8read_PIN>
	
	return x;
}
      d2:	08 95       	ret

000000d4 <inc>:
			
	}		
}

void inc (void){
	counter1++;
      d4:	80 91 9b 00 	lds	r24, 0x009B
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 9b 00 	sts	0x009B, r24
	counter2++;
      de:	80 91 9f 00 	lds	r24, 0x009F
      e2:	8f 5f       	subi	r24, 0xFF	; 255
      e4:	80 93 9f 00 	sts	0x009F, r24
	counter3++;
      e8:	80 91 94 00 	lds	r24, 0x0094
      ec:	90 91 95 00 	lds	r25, 0x0095
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	90 93 95 00 	sts	0x0095, r25
      f6:	80 93 94 00 	sts	0x0094, r24
      fa:	08 95       	ret

000000fc <main>:
void inc (void);
volatile u8 counter1;
volatile u8 counter2;
volatile u16 counter3;
int main(void){
	TMR0_Get_Configuration(CTC_Mode,TOIE0_disable,OCIE0_enable,PRESCALING_CLK1024);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	25 e0       	ldi	r18, 0x05	; 5
     104:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TMR0_Get_Configuration>
	TMR0_Set_Compare_Value(80); 
     108:	80 e5       	ldi	r24, 0x50	; 80
     10a:	0e 94 3f 0a 	call	0x147e	; 0x147e <TMR0_Set_Compare_Value>
	TMR0_vInit();  
     10e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <TMR0_vInit>
	
	sei();
     112:	78 94       	sei
	LED_vintialize('A',0);
     114:	81 e4       	ldi	r24, 0x41	; 65
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	0e 94 02 09 	call	0x1204	; 0x1204 <LED_vintialize>
	LED_vintialize('A',1);
     11c:	81 e4       	ldi	r24, 0x41	; 65
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	0e 94 02 09 	call	0x1204	; 0x1204 <LED_vintialize>
	LED_vintialize('A',2);
     124:	81 e4       	ldi	r24, 0x41	; 65
     126:	62 e0       	ldi	r22, 0x02	; 2
     128:	0e 94 02 09 	call	0x1204	; 0x1204 <LED_vintialize>
	callback_OCR0_Compare_Match_Interrupt(&inc);
     12c:	8a e6       	ldi	r24, 0x6A	; 106
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 80 0a 	call	0x1500	; 0x1500 <callback_OCR0_Compare_Match_Interrupt>
	
	while(1){
		if (counter1 >=100){
     134:	80 91 9b 00 	lds	r24, 0x009B
     138:	84 36       	cpi	r24, 0x64	; 100
     13a:	30 f0       	brcs	.+12     	; 0x148 <main+0x4c>
			LED_vtoggle('A',0);
     13c:	81 e4       	ldi	r24, 0x41	; 65
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	0e 94 0e 09 	call	0x121c	; 0x121c <LED_vtoggle>
			counter1 = 0;
     144:	10 92 9b 00 	sts	0x009B, r1
		}
		if (counter2 >=200){
     148:	80 91 9f 00 	lds	r24, 0x009F
     14c:	88 3c       	cpi	r24, 0xC8	; 200
     14e:	30 f0       	brcs	.+12     	; 0x15c <main+0x60>
			LED_vtoggle('A',1);
     150:	81 e4       	ldi	r24, 0x41	; 65
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	0e 94 0e 09 	call	0x121c	; 0x121c <LED_vtoggle>
			counter2 = 0;
     158:	10 92 9f 00 	sts	0x009F, r1
		}
		if (counter3 >= 300){
     15c:	80 91 94 00 	lds	r24, 0x0094
     160:	90 91 95 00 	lds	r25, 0x0095
     164:	21 e0       	ldi	r18, 0x01	; 1
     166:	8c 32       	cpi	r24, 0x2C	; 44
     168:	92 07       	cpc	r25, r18
     16a:	20 f3       	brcs	.-56     	; 0x134 <main+0x38>
			LED_vtoggle('A',2);
     16c:	81 e4       	ldi	r24, 0x41	; 65
     16e:	62 e0       	ldi	r22, 0x02	; 2
     170:	0e 94 0e 09 	call	0x121c	; 0x121c <LED_vtoggle>
			counter3 = 0;
     174:	10 92 95 00 	sts	0x0095, r1
     178:	10 92 94 00 	sts	0x0094, r1
     17c:	db cf       	rjmp	.-74     	; 0x134 <main+0x38>

0000017e <EEPROM_Write>:
 */ 
#include "Register.h"
#include "stdmacros.h"
#include "Data_type.h"
void EEPROM_Write(u16 address , u8 value){
	myEEARL = (u8)address;      
     17e:	8e bb       	out	0x1e, r24	; 30
	myEEARH= (u8)(address>>8);
     180:	9f bb       	out	0x1f, r25	; 31
	myEEDR = value;
     182:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(myEECR , myEEMWE);
     184:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(myEECR , myEEWE);
     186:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(myEECR , myEEWE)==1);
     188:	e1 99       	sbic	0x1c, 1	; 28
     18a:	fe cf       	rjmp	.-4      	; 0x188 <EEPROM_Write+0xa>
}
     18c:	08 95       	ret

0000018e <EEPROM_Read>:



u8 EEPROM_Read(const u16 address){
	myEEARL = (u8)address;
     18e:	8e bb       	out	0x1e, r24	; 30
	myEEARH = (u8)(address>>8);
     190:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(myEECR , myEERE);
     192:	e0 9a       	sbi	0x1c, 0	; 28
	return myEEDR;
     194:	8d b3       	in	r24, 0x1d	; 29
     196:	08 95       	ret

00000198 <GPIO_voidInit>:
#include "GPIO_MCAL.h"

//================================Initialization=======================================
 void GPIO_voidInit(void){
	 /*Comment!: DDR initialization  */
	myDDRA = Init_direction_default;
     198:	1a ba       	out	0x1a, r1	; 26
	myDDRB = Init_direction_default;
     19a:	17 ba       	out	0x17, r1	; 23
	myDDRC = Init_direction_default;
     19c:	14 ba       	out	0x14, r1	; 20
	myDDRD = Init_direction_default;
     19e:	11 ba       	out	0x11, r1	; 17
 }
     1a0:	08 95       	ret

000001a2 <GPIO_vsetPIN_DIR>:
//=====================================================================================

//===================================PIN===============================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir ){
	switch (portnum){
     1a2:	84 34       	cpi	r24, 0x44	; 68
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <GPIO_vsetPIN_DIR+0x6>
     1a6:	71 c0       	rjmp	.+226    	; 0x28a <GPIO_vsetPIN_DIR+0xe8>
     1a8:	85 34       	cpi	r24, 0x45	; 69
     1aa:	48 f4       	brcc	.+18     	; 0x1be <GPIO_vsetPIN_DIR+0x1c>
     1ac:	82 34       	cpi	r24, 0x42	; 66
     1ae:	99 f1       	breq	.+102    	; 0x216 <GPIO_vsetPIN_DIR+0x74>
     1b0:	83 34       	cpi	r24, 0x43	; 67
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <GPIO_vsetPIN_DIR+0x14>
     1b4:	4d c0       	rjmp	.+154    	; 0x250 <GPIO_vsetPIN_DIR+0xae>
     1b6:	81 34       	cpi	r24, 0x41	; 65
     1b8:	09 f0       	breq	.+2      	; 0x1bc <GPIO_vsetPIN_DIR+0x1a>
     1ba:	83 c0       	rjmp	.+262    	; 0x2c2 <GPIO_vsetPIN_DIR+0x120>
     1bc:	0f c0       	rjmp	.+30     	; 0x1dc <GPIO_vsetPIN_DIR+0x3a>
     1be:	82 36       	cpi	r24, 0x62	; 98
     1c0:	51 f1       	breq	.+84     	; 0x216 <GPIO_vsetPIN_DIR+0x74>
     1c2:	83 36       	cpi	r24, 0x63	; 99
     1c4:	20 f4       	brcc	.+8      	; 0x1ce <GPIO_vsetPIN_DIR+0x2c>
     1c6:	81 36       	cpi	r24, 0x61	; 97
     1c8:	09 f0       	breq	.+2      	; 0x1cc <GPIO_vsetPIN_DIR+0x2a>
     1ca:	7b c0       	rjmp	.+246    	; 0x2c2 <GPIO_vsetPIN_DIR+0x120>
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <GPIO_vsetPIN_DIR+0x3a>
     1ce:	83 36       	cpi	r24, 0x63	; 99
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <GPIO_vsetPIN_DIR+0x32>
     1d2:	3e c0       	rjmp	.+124    	; 0x250 <GPIO_vsetPIN_DIR+0xae>
     1d4:	84 36       	cpi	r24, 0x64	; 100
     1d6:	09 f0       	breq	.+2      	; 0x1da <GPIO_vsetPIN_DIR+0x38>
     1d8:	74 c0       	rjmp	.+232    	; 0x2c2 <GPIO_vsetPIN_DIR+0x120>
     1da:	57 c0       	rjmp	.+174    	; 0x28a <GPIO_vsetPIN_DIR+0xe8>
		case 'A' :
		case 'a' :
			if(dir == 1){
     1dc:	41 30       	cpi	r20, 0x01	; 1
     1de:	69 f4       	brne	.+26     	; 0x1fa <GPIO_vsetPIN_DIR+0x58>
				SET_BIT(myDDRA , pinnum);
     1e0:	2a b3       	in	r18, 0x1a	; 26
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	ac 01       	movw	r20, r24
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <GPIO_vsetPIN_DIR+0x4c>
     1ea:	44 0f       	add	r20, r20
     1ec:	55 1f       	adc	r21, r21
     1ee:	6a 95       	dec	r22
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <GPIO_vsetPIN_DIR+0x48>
     1f2:	ba 01       	movw	r22, r20
     1f4:	62 2b       	or	r22, r18
     1f6:	6a bb       	out	0x1a, r22	; 26
     1f8:	08 95       	ret
			}else{
				CLR_BIT(myDDRA , pinnum);
     1fa:	2a b3       	in	r18, 0x1a	; 26
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	ac 01       	movw	r20, r24
     202:	02 c0       	rjmp	.+4      	; 0x208 <GPIO_vsetPIN_DIR+0x66>
     204:	44 0f       	add	r20, r20
     206:	55 1f       	adc	r21, r21
     208:	6a 95       	dec	r22
     20a:	e2 f7       	brpl	.-8      	; 0x204 <GPIO_vsetPIN_DIR+0x62>
     20c:	ba 01       	movw	r22, r20
     20e:	60 95       	com	r22
     210:	62 23       	and	r22, r18
     212:	6a bb       	out	0x1a, r22	; 26
     214:	08 95       	ret
			}
			break;
		case 'b' :
		case 'B' :
			if(dir == 1){
     216:	41 30       	cpi	r20, 0x01	; 1
     218:	69 f4       	brne	.+26     	; 0x234 <GPIO_vsetPIN_DIR+0x92>
				SET_BIT(myDDRB , pinnum);
     21a:	27 b3       	in	r18, 0x17	; 23
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	ac 01       	movw	r20, r24
     222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_vsetPIN_DIR+0x86>
     224:	44 0f       	add	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	6a 95       	dec	r22
     22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_vsetPIN_DIR+0x82>
     22c:	ba 01       	movw	r22, r20
     22e:	62 2b       	or	r22, r18
     230:	67 bb       	out	0x17, r22	; 23
     232:	08 95       	ret
			}else{
				CLR_BIT(myDDRB , pinnum);
     234:	27 b3       	in	r18, 0x17	; 23
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	ac 01       	movw	r20, r24
     23c:	02 c0       	rjmp	.+4      	; 0x242 <GPIO_vsetPIN_DIR+0xa0>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	6a 95       	dec	r22
     244:	e2 f7       	brpl	.-8      	; 0x23e <GPIO_vsetPIN_DIR+0x9c>
     246:	ba 01       	movw	r22, r20
     248:	60 95       	com	r22
     24a:	62 23       	and	r22, r18
     24c:	67 bb       	out	0x17, r22	; 23
     24e:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
     250:	41 30       	cpi	r20, 0x01	; 1
     252:	69 f4       	brne	.+26     	; 0x26e <GPIO_vsetPIN_DIR+0xcc>
				SET_BIT(myDDRC , pinnum);
     254:	24 b3       	in	r18, 0x14	; 20
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	ac 01       	movw	r20, r24
     25c:	02 c0       	rjmp	.+4      	; 0x262 <GPIO_vsetPIN_DIR+0xc0>
     25e:	44 0f       	add	r20, r20
     260:	55 1f       	adc	r21, r21
     262:	6a 95       	dec	r22
     264:	e2 f7       	brpl	.-8      	; 0x25e <GPIO_vsetPIN_DIR+0xbc>
     266:	ba 01       	movw	r22, r20
     268:	62 2b       	or	r22, r18
     26a:	64 bb       	out	0x14, r22	; 20
     26c:	08 95       	ret
			}else{
				CLR_BIT(myDDRC , pinnum);
     26e:	24 b3       	in	r18, 0x14	; 20
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	ac 01       	movw	r20, r24
     276:	02 c0       	rjmp	.+4      	; 0x27c <GPIO_vsetPIN_DIR+0xda>
     278:	44 0f       	add	r20, r20
     27a:	55 1f       	adc	r21, r21
     27c:	6a 95       	dec	r22
     27e:	e2 f7       	brpl	.-8      	; 0x278 <GPIO_vsetPIN_DIR+0xd6>
     280:	ba 01       	movw	r22, r20
     282:	60 95       	com	r22
     284:	62 23       	and	r22, r18
     286:	64 bb       	out	0x14, r22	; 20
     288:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
     28a:	41 30       	cpi	r20, 0x01	; 1
     28c:	69 f4       	brne	.+26     	; 0x2a8 <GPIO_vsetPIN_DIR+0x106>
				SET_BIT(myDDRD , pinnum);
     28e:	21 b3       	in	r18, 0x11	; 17
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	ac 01       	movw	r20, r24
     296:	02 c0       	rjmp	.+4      	; 0x29c <GPIO_vsetPIN_DIR+0xfa>
     298:	44 0f       	add	r20, r20
     29a:	55 1f       	adc	r21, r21
     29c:	6a 95       	dec	r22
     29e:	e2 f7       	brpl	.-8      	; 0x298 <GPIO_vsetPIN_DIR+0xf6>
     2a0:	ba 01       	movw	r22, r20
     2a2:	62 2b       	or	r22, r18
     2a4:	61 bb       	out	0x11, r22	; 17
     2a6:	08 95       	ret
			}else{
				CLR_BIT(myDDRD , pinnum);
     2a8:	21 b3       	in	r18, 0x11	; 17
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	ac 01       	movw	r20, r24
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <GPIO_vsetPIN_DIR+0x114>
     2b2:	44 0f       	add	r20, r20
     2b4:	55 1f       	adc	r21, r21
     2b6:	6a 95       	dec	r22
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <GPIO_vsetPIN_DIR+0x110>
     2ba:	ba 01       	movw	r22, r20
     2bc:	60 95       	com	r22
     2be:	62 23       	and	r22, r18
     2c0:	61 bb       	out	0x11, r22	; 17
     2c2:	08 95       	ret

000002c4 <GPIO_vwrite_PIN>:
	}
	
}

void GPIO_vwrite_PIN(u8 portnum , u8 pinnum , u8 value ){
	switch(portnum){
     2c4:	84 34       	cpi	r24, 0x44	; 68
     2c6:	09 f4       	brne	.+2      	; 0x2ca <GPIO_vwrite_PIN+0x6>
     2c8:	71 c0       	rjmp	.+226    	; 0x3ac <GPIO_vwrite_PIN+0xe8>
     2ca:	85 34       	cpi	r24, 0x45	; 69
     2cc:	48 f4       	brcc	.+18     	; 0x2e0 <GPIO_vwrite_PIN+0x1c>
     2ce:	82 34       	cpi	r24, 0x42	; 66
     2d0:	99 f1       	breq	.+102    	; 0x338 <GPIO_vwrite_PIN+0x74>
     2d2:	83 34       	cpi	r24, 0x43	; 67
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <GPIO_vwrite_PIN+0x14>
     2d6:	4d c0       	rjmp	.+154    	; 0x372 <GPIO_vwrite_PIN+0xae>
     2d8:	81 34       	cpi	r24, 0x41	; 65
     2da:	09 f0       	breq	.+2      	; 0x2de <GPIO_vwrite_PIN+0x1a>
     2dc:	83 c0       	rjmp	.+262    	; 0x3e4 <GPIO_vwrite_PIN+0x120>
     2de:	0f c0       	rjmp	.+30     	; 0x2fe <GPIO_vwrite_PIN+0x3a>
     2e0:	82 36       	cpi	r24, 0x62	; 98
     2e2:	51 f1       	breq	.+84     	; 0x338 <GPIO_vwrite_PIN+0x74>
     2e4:	83 36       	cpi	r24, 0x63	; 99
     2e6:	20 f4       	brcc	.+8      	; 0x2f0 <GPIO_vwrite_PIN+0x2c>
     2e8:	81 36       	cpi	r24, 0x61	; 97
     2ea:	09 f0       	breq	.+2      	; 0x2ee <GPIO_vwrite_PIN+0x2a>
     2ec:	7b c0       	rjmp	.+246    	; 0x3e4 <GPIO_vwrite_PIN+0x120>
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <GPIO_vwrite_PIN+0x3a>
     2f0:	83 36       	cpi	r24, 0x63	; 99
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <GPIO_vwrite_PIN+0x32>
     2f4:	3e c0       	rjmp	.+124    	; 0x372 <GPIO_vwrite_PIN+0xae>
     2f6:	84 36       	cpi	r24, 0x64	; 100
     2f8:	09 f0       	breq	.+2      	; 0x2fc <GPIO_vwrite_PIN+0x38>
     2fa:	74 c0       	rjmp	.+232    	; 0x3e4 <GPIO_vwrite_PIN+0x120>
     2fc:	57 c0       	rjmp	.+174    	; 0x3ac <GPIO_vwrite_PIN+0xe8>
		case 'A':
		case 'a':
			if (value ==1){
     2fe:	41 30       	cpi	r20, 0x01	; 1
     300:	69 f4       	brne	.+26     	; 0x31c <GPIO_vwrite_PIN+0x58>
				SET_BIT(myPORTA , pinnum);
     302:	2b b3       	in	r18, 0x1b	; 27
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	ac 01       	movw	r20, r24
     30a:	02 c0       	rjmp	.+4      	; 0x310 <GPIO_vwrite_PIN+0x4c>
     30c:	44 0f       	add	r20, r20
     30e:	55 1f       	adc	r21, r21
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <GPIO_vwrite_PIN+0x48>
     314:	ba 01       	movw	r22, r20
     316:	62 2b       	or	r22, r18
     318:	6b bb       	out	0x1b, r22	; 27
     31a:	08 95       	ret
			}else {
				CLR_BIT(myPORTA , pinnum);
     31c:	2b b3       	in	r18, 0x1b	; 27
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	ac 01       	movw	r20, r24
     324:	02 c0       	rjmp	.+4      	; 0x32a <GPIO_vwrite_PIN+0x66>
     326:	44 0f       	add	r20, r20
     328:	55 1f       	adc	r21, r21
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <GPIO_vwrite_PIN+0x62>
     32e:	ba 01       	movw	r22, r20
     330:	60 95       	com	r22
     332:	62 23       	and	r22, r18
     334:	6b bb       	out	0x1b, r22	; 27
     336:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if (value ==1){
     338:	41 30       	cpi	r20, 0x01	; 1
     33a:	69 f4       	brne	.+26     	; 0x356 <GPIO_vwrite_PIN+0x92>
				SET_BIT(myPORTB , pinnum);
     33c:	28 b3       	in	r18, 0x18	; 24
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <GPIO_vwrite_PIN+0x86>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <GPIO_vwrite_PIN+0x82>
     34e:	ba 01       	movw	r22, r20
     350:	62 2b       	or	r22, r18
     352:	68 bb       	out	0x18, r22	; 24
     354:	08 95       	ret
			}else {
				CLR_BIT(myPORTB , pinnum);
     356:	28 b3       	in	r18, 0x18	; 24
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ac 01       	movw	r20, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <GPIO_vwrite_PIN+0xa0>
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	6a 95       	dec	r22
     366:	e2 f7       	brpl	.-8      	; 0x360 <GPIO_vwrite_PIN+0x9c>
     368:	ba 01       	movw	r22, r20
     36a:	60 95       	com	r22
     36c:	62 23       	and	r22, r18
     36e:	68 bb       	out	0x18, r22	; 24
     370:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (value ==1){
     372:	41 30       	cpi	r20, 0x01	; 1
     374:	69 f4       	brne	.+26     	; 0x390 <GPIO_vwrite_PIN+0xcc>
				SET_BIT(myPORTC , pinnum);
     376:	25 b3       	in	r18, 0x15	; 21
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	ac 01       	movw	r20, r24
     37e:	02 c0       	rjmp	.+4      	; 0x384 <GPIO_vwrite_PIN+0xc0>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	6a 95       	dec	r22
     386:	e2 f7       	brpl	.-8      	; 0x380 <GPIO_vwrite_PIN+0xbc>
     388:	ba 01       	movw	r22, r20
     38a:	62 2b       	or	r22, r18
     38c:	65 bb       	out	0x15, r22	; 21
     38e:	08 95       	ret
			}else {
				CLR_BIT(myPORTC , pinnum);
     390:	25 b3       	in	r18, 0x15	; 21
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	ac 01       	movw	r20, r24
     398:	02 c0       	rjmp	.+4      	; 0x39e <GPIO_vwrite_PIN+0xda>
     39a:	44 0f       	add	r20, r20
     39c:	55 1f       	adc	r21, r21
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <GPIO_vwrite_PIN+0xd6>
     3a2:	ba 01       	movw	r22, r20
     3a4:	60 95       	com	r22
     3a6:	62 23       	and	r22, r18
     3a8:	65 bb       	out	0x15, r22	; 21
     3aa:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (value ==1){
     3ac:	41 30       	cpi	r20, 0x01	; 1
     3ae:	69 f4       	brne	.+26     	; 0x3ca <GPIO_vwrite_PIN+0x106>
				SET_BIT(myPORTD , pinnum);
     3b0:	22 b3       	in	r18, 0x12	; 18
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	ac 01       	movw	r20, r24
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <GPIO_vwrite_PIN+0xfa>
     3ba:	44 0f       	add	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	6a 95       	dec	r22
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <GPIO_vwrite_PIN+0xf6>
     3c2:	ba 01       	movw	r22, r20
     3c4:	62 2b       	or	r22, r18
     3c6:	62 bb       	out	0x12, r22	; 18
     3c8:	08 95       	ret
			}else {
				CLR_BIT(myPORTD , pinnum);
     3ca:	22 b3       	in	r18, 0x12	; 18
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	ac 01       	movw	r20, r24
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <GPIO_vwrite_PIN+0x114>
     3d4:	44 0f       	add	r20, r20
     3d6:	55 1f       	adc	r21, r21
     3d8:	6a 95       	dec	r22
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <GPIO_vwrite_PIN+0x110>
     3dc:	ba 01       	movw	r22, r20
     3de:	60 95       	com	r22
     3e0:	62 23       	and	r22, r18
     3e2:	62 bb       	out	0x12, r22	; 18
     3e4:	08 95       	ret

000003e6 <GPIO_u8read_PIN>:
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
     3e6:	84 34       	cpi	r24, 0x44	; 68
     3e8:	09 f4       	brne	.+2      	; 0x3ec <GPIO_u8read_PIN+0x6>
     3ea:	4e c0       	rjmp	.+156    	; 0x488 <GPIO_u8read_PIN+0xa2>
     3ec:	85 34       	cpi	r24, 0x45	; 69
     3ee:	40 f4       	brcc	.+16     	; 0x400 <GPIO_u8read_PIN+0x1a>
     3f0:	82 34       	cpi	r24, 0x42	; 66
     3f2:	31 f1       	breq	.+76     	; 0x440 <GPIO_u8read_PIN+0x5a>
     3f4:	83 34       	cpi	r24, 0x43	; 67
     3f6:	b0 f5       	brcc	.+108    	; 0x464 <GPIO_u8read_PIN+0x7e>
     3f8:	81 34       	cpi	r24, 0x41	; 65
     3fa:	09 f0       	breq	.+2      	; 0x3fe <GPIO_u8read_PIN+0x18>
     3fc:	57 c0       	rjmp	.+174    	; 0x4ac <GPIO_u8read_PIN+0xc6>
     3fe:	0e c0       	rjmp	.+28     	; 0x41c <GPIO_u8read_PIN+0x36>
     400:	82 36       	cpi	r24, 0x62	; 98
     402:	f1 f0       	breq	.+60     	; 0x440 <GPIO_u8read_PIN+0x5a>
     404:	83 36       	cpi	r24, 0x63	; 99
     406:	20 f4       	brcc	.+8      	; 0x410 <GPIO_u8read_PIN+0x2a>
     408:	81 36       	cpi	r24, 0x61	; 97
     40a:	09 f0       	breq	.+2      	; 0x40e <GPIO_u8read_PIN+0x28>
     40c:	4f c0       	rjmp	.+158    	; 0x4ac <GPIO_u8read_PIN+0xc6>
     40e:	06 c0       	rjmp	.+12     	; 0x41c <GPIO_u8read_PIN+0x36>
     410:	83 36       	cpi	r24, 0x63	; 99
     412:	41 f1       	breq	.+80     	; 0x464 <GPIO_u8read_PIN+0x7e>
     414:	84 36       	cpi	r24, 0x64	; 100
     416:	09 f0       	breq	.+2      	; 0x41a <GPIO_u8read_PIN+0x34>
     418:	49 c0       	rjmp	.+146    	; 0x4ac <GPIO_u8read_PIN+0xc6>
     41a:	36 c0       	rjmp	.+108    	; 0x488 <GPIO_u8read_PIN+0xa2>
		case 'A':
		case 'a':
			x= READ_BIT(myPINA, pinnum);
     41c:	29 b3       	in	r18, 0x19	; 25
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	06 2e       	mov	r0, r22
     424:	02 c0       	rjmp	.+4      	; 0x42a <GPIO_u8read_PIN+0x44>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <GPIO_u8read_PIN+0x40>
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	82 23       	and	r24, r18
     432:	93 23       	and	r25, r19
     434:	02 c0       	rjmp	.+4      	; 0x43a <GPIO_u8read_PIN+0x54>
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
     43a:	6a 95       	dec	r22
     43c:	e2 f7       	brpl	.-8      	; 0x436 <GPIO_u8read_PIN+0x50>
			break;
     43e:	08 95       	ret
		case 'B':
		case 'b':
			x= READ_BIT(myPINB , pinnum);
     440:	26 b3       	in	r18, 0x16	; 22
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	06 2e       	mov	r0, r22
     448:	02 c0       	rjmp	.+4      	; 0x44e <GPIO_u8read_PIN+0x68>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	0a 94       	dec	r0
     450:	e2 f7       	brpl	.-8      	; 0x44a <GPIO_u8read_PIN+0x64>
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	82 23       	and	r24, r18
     456:	93 23       	and	r25, r19
     458:	02 c0       	rjmp	.+4      	; 0x45e <GPIO_u8read_PIN+0x78>
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	6a 95       	dec	r22
     460:	e2 f7       	brpl	.-8      	; 0x45a <GPIO_u8read_PIN+0x74>
			break;
     462:	08 95       	ret
		case 'C':
		case 'c':
			x= READ_BIT(myPINC , pinnum);
     464:	23 b3       	in	r18, 0x13	; 19
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	06 2e       	mov	r0, r22
     46c:	02 c0       	rjmp	.+4      	; 0x472 <GPIO_u8read_PIN+0x8c>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <GPIO_u8read_PIN+0x88>
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	82 23       	and	r24, r18
     47a:	93 23       	and	r25, r19
     47c:	02 c0       	rjmp	.+4      	; 0x482 <GPIO_u8read_PIN+0x9c>
     47e:	95 95       	asr	r25
     480:	87 95       	ror	r24
     482:	6a 95       	dec	r22
     484:	e2 f7       	brpl	.-8      	; 0x47e <GPIO_u8read_PIN+0x98>
			break;
     486:	08 95       	ret
		case 'D':
		case 'd':
			x= READ_BIT(myPIND, pinnum);
     488:	20 b3       	in	r18, 0x10	; 16
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	06 2e       	mov	r0, r22
     490:	02 c0       	rjmp	.+4      	; 0x496 <GPIO_u8read_PIN+0xb0>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <GPIO_u8read_PIN+0xac>
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	82 23       	and	r24, r18
     49e:	93 23       	and	r25, r19
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <GPIO_u8read_PIN+0xc0>
     4a2:	95 95       	asr	r25
     4a4:	87 95       	ror	r24
     4a6:	6a 95       	dec	r22
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <GPIO_u8read_PIN+0xbc>
			break;
     4aa:	08 95       	ret
		default: break;
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
			x= READ_BIT(myPIND, pinnum);
			break;
		default: break;
	}
	return x;
}
     4ae:	08 95       	ret

000004b0 <GPIO_vtoggle_PIN>:

void GPIO_vtoggle_PIN(u8 portnum, u8 pinnum){
	switch (portnum){
     4b0:	84 34       	cpi	r24, 0x44	; 68
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <GPIO_vtoggle_PIN+0x6>
     4b4:	3d c0       	rjmp	.+122    	; 0x530 <GPIO_vtoggle_PIN+0x80>
     4b6:	85 34       	cpi	r24, 0x45	; 69
     4b8:	40 f4       	brcc	.+16     	; 0x4ca <GPIO_vtoggle_PIN+0x1a>
     4ba:	82 34       	cpi	r24, 0x42	; 66
     4bc:	f9 f0       	breq	.+62     	; 0x4fc <GPIO_vtoggle_PIN+0x4c>
     4be:	83 34       	cpi	r24, 0x43	; 67
     4c0:	50 f5       	brcc	.+84     	; 0x516 <GPIO_vtoggle_PIN+0x66>
     4c2:	81 34       	cpi	r24, 0x41	; 65
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <GPIO_vtoggle_PIN+0x18>
     4c6:	40 c0       	rjmp	.+128    	; 0x548 <GPIO_vtoggle_PIN+0x98>
     4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <GPIO_vtoggle_PIN+0x32>
     4ca:	82 36       	cpi	r24, 0x62	; 98
     4cc:	b9 f0       	breq	.+46     	; 0x4fc <GPIO_vtoggle_PIN+0x4c>
     4ce:	83 36       	cpi	r24, 0x63	; 99
     4d0:	18 f4       	brcc	.+6      	; 0x4d8 <GPIO_vtoggle_PIN+0x28>
     4d2:	81 36       	cpi	r24, 0x61	; 97
     4d4:	c9 f5       	brne	.+114    	; 0x548 <GPIO_vtoggle_PIN+0x98>
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <GPIO_vtoggle_PIN+0x32>
     4d8:	83 36       	cpi	r24, 0x63	; 99
     4da:	e9 f0       	breq	.+58     	; 0x516 <GPIO_vtoggle_PIN+0x66>
     4dc:	84 36       	cpi	r24, 0x64	; 100
     4de:	a1 f5       	brne	.+104    	; 0x548 <GPIO_vtoggle_PIN+0x98>
     4e0:	27 c0       	rjmp	.+78     	; 0x530 <GPIO_vtoggle_PIN+0x80>
		case 'a' :
		case 'A' :
			TOGGLE_BIT(myPORTA, pinnum);
     4e2:	2b b3       	in	r18, 0x1b	; 27
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	ac 01       	movw	r20, r24
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_vtoggle_PIN+0x40>
     4ec:	44 0f       	add	r20, r20
     4ee:	55 1f       	adc	r21, r21
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_vtoggle_PIN+0x3c>
     4f4:	ba 01       	movw	r22, r20
     4f6:	62 27       	eor	r22, r18
     4f8:	6b bb       	out	0x1b, r22	; 27
			break;
     4fa:	08 95       	ret
		case 'b' :
		case 'B' :
			TOGGLE_BIT(myPORTB, pinnum);
     4fc:	28 b3       	in	r18, 0x18	; 24
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	ac 01       	movw	r20, r24
     504:	02 c0       	rjmp	.+4      	; 0x50a <GPIO_vtoggle_PIN+0x5a>
     506:	44 0f       	add	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	6a 95       	dec	r22
     50c:	e2 f7       	brpl	.-8      	; 0x506 <GPIO_vtoggle_PIN+0x56>
     50e:	ba 01       	movw	r22, r20
     510:	62 27       	eor	r22, r18
     512:	68 bb       	out	0x18, r22	; 24
			break;
     514:	08 95       	ret
		case 'c' :
		case 'C' :
			TOGGLE_BIT(myPORTC, pinnum);
     516:	25 b3       	in	r18, 0x15	; 21
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	ac 01       	movw	r20, r24
     51e:	02 c0       	rjmp	.+4      	; 0x524 <GPIO_vtoggle_PIN+0x74>
     520:	44 0f       	add	r20, r20
     522:	55 1f       	adc	r21, r21
     524:	6a 95       	dec	r22
     526:	e2 f7       	brpl	.-8      	; 0x520 <GPIO_vtoggle_PIN+0x70>
     528:	ba 01       	movw	r22, r20
     52a:	62 27       	eor	r22, r18
     52c:	65 bb       	out	0x15, r22	; 21
			break;
     52e:	08 95       	ret
		case 'd' :
		case 'D' :
			TOGGLE_BIT(myPORTD, pinnum);
     530:	22 b3       	in	r18, 0x12	; 18
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	ac 01       	movw	r20, r24
     538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_vtoggle_PIN+0x8e>
     53a:	44 0f       	add	r20, r20
     53c:	55 1f       	adc	r21, r21
     53e:	6a 95       	dec	r22
     540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_vtoggle_PIN+0x8a>
     542:	ba 01       	movw	r22, r20
     544:	62 27       	eor	r22, r18
     546:	62 bb       	out	0x12, r22	; 18
     548:	08 95       	ret

0000054a <GPIO_vconnectpullup>:
		default: break;
	}
}

void GPIO_vconnectpullup( u8 port, u8 pin , u8 connect_pullup ){
	switch (port){
     54a:	84 34       	cpi	r24, 0x44	; 68
     54c:	09 f4       	brne	.+2      	; 0x550 <GPIO_vconnectpullup+0x6>
     54e:	7a c0       	rjmp	.+244    	; 0x644 <GPIO_vconnectpullup+0xfa>
     550:	85 34       	cpi	r24, 0x45	; 69
     552:	48 f4       	brcc	.+18     	; 0x566 <GPIO_vconnectpullup+0x1c>
     554:	82 34       	cpi	r24, 0x42	; 66
     556:	b1 f1       	breq	.+108    	; 0x5c4 <GPIO_vconnectpullup+0x7a>
     558:	83 34       	cpi	r24, 0x43	; 67
     55a:	08 f0       	brcs	.+2      	; 0x55e <GPIO_vconnectpullup+0x14>
     55c:	53 c0       	rjmp	.+166    	; 0x604 <GPIO_vconnectpullup+0xba>
     55e:	81 34       	cpi	r24, 0x41	; 65
     560:	09 f0       	breq	.+2      	; 0x564 <GPIO_vconnectpullup+0x1a>
     562:	8f c0       	rjmp	.+286    	; 0x682 <GPIO_vconnectpullup+0x138>
     564:	0f c0       	rjmp	.+30     	; 0x584 <GPIO_vconnectpullup+0x3a>
     566:	82 36       	cpi	r24, 0x62	; 98
     568:	69 f1       	breq	.+90     	; 0x5c4 <GPIO_vconnectpullup+0x7a>
     56a:	83 36       	cpi	r24, 0x63	; 99
     56c:	20 f4       	brcc	.+8      	; 0x576 <GPIO_vconnectpullup+0x2c>
     56e:	81 36       	cpi	r24, 0x61	; 97
     570:	09 f0       	breq	.+2      	; 0x574 <GPIO_vconnectpullup+0x2a>
     572:	87 c0       	rjmp	.+270    	; 0x682 <GPIO_vconnectpullup+0x138>
     574:	07 c0       	rjmp	.+14     	; 0x584 <GPIO_vconnectpullup+0x3a>
     576:	83 36       	cpi	r24, 0x63	; 99
     578:	09 f4       	brne	.+2      	; 0x57c <GPIO_vconnectpullup+0x32>
     57a:	44 c0       	rjmp	.+136    	; 0x604 <GPIO_vconnectpullup+0xba>
     57c:	84 36       	cpi	r24, 0x64	; 100
     57e:	09 f0       	breq	.+2      	; 0x582 <GPIO_vconnectpullup+0x38>
     580:	80 c0       	rjmp	.+256    	; 0x682 <GPIO_vconnectpullup+0x138>
     582:	60 c0       	rjmp	.+192    	; 0x644 <GPIO_vconnectpullup+0xfa>
		case 'A' :
		case 'a' :
			if (Connect==connect_pullup){
     584:	41 30       	cpi	r20, 0x01	; 1
     586:	81 f4       	brne	.+32     	; 0x5a8 <GPIO_vconnectpullup+0x5e>
				SET_BIT(myPORTA,pin);
     588:	2b b3       	in	r18, 0x1b	; 27
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	ac 01       	movw	r20, r24
     590:	02 c0       	rjmp	.+4      	; 0x596 <GPIO_vconnectpullup+0x4c>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	6a 95       	dec	r22
     598:	e2 f7       	brpl	.-8      	; 0x592 <GPIO_vconnectpullup+0x48>
     59a:	ba 01       	movw	r22, r20
     59c:	62 2b       	or	r22, r18
     59e:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
     5a0:	80 b7       	in	r24, 0x30	; 48
     5a2:	8b 7f       	andi	r24, 0xFB	; 251
     5a4:	80 bf       	out	0x30, r24	; 48
     5a6:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pin);
     5a8:	2b b3       	in	r18, 0x1b	; 27
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	ac 01       	movw	r20, r24
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <GPIO_vconnectpullup+0x6c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	6a 95       	dec	r22
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <GPIO_vconnectpullup+0x68>
     5ba:	ba 01       	movw	r22, r20
     5bc:	60 95       	com	r22
     5be:	62 23       	and	r22, r18
     5c0:	6b bb       	out	0x1b, r22	; 27
     5c2:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect==connect_pullup){
     5c4:	41 30       	cpi	r20, 0x01	; 1
     5c6:	81 f4       	brne	.+32     	; 0x5e8 <GPIO_vconnectpullup+0x9e>
				SET_BIT(myPORTB,pin);
     5c8:	28 b3       	in	r18, 0x18	; 24
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	ac 01       	movw	r20, r24
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <GPIO_vconnectpullup+0x8c>
     5d2:	44 0f       	add	r20, r20
     5d4:	55 1f       	adc	r21, r21
     5d6:	6a 95       	dec	r22
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <GPIO_vconnectpullup+0x88>
     5da:	ba 01       	movw	r22, r20
     5dc:	62 2b       	or	r22, r18
     5de:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
     5e0:	80 b7       	in	r24, 0x30	; 48
     5e2:	8b 7f       	andi	r24, 0xFB	; 251
     5e4:	80 bf       	out	0x30, r24	; 48
     5e6:	08 95       	ret
			}else{
				CLR_BIT(myPORTB,pin);
     5e8:	28 b3       	in	r18, 0x18	; 24
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	ac 01       	movw	r20, r24
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <GPIO_vconnectpullup+0xac>
     5f2:	44 0f       	add	r20, r20
     5f4:	55 1f       	adc	r21, r21
     5f6:	6a 95       	dec	r22
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <GPIO_vconnectpullup+0xa8>
     5fa:	ba 01       	movw	r22, r20
     5fc:	60 95       	com	r22
     5fe:	62 23       	and	r22, r18
     600:	68 bb       	out	0x18, r22	; 24
     602:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect==connect_pullup){
     604:	41 30       	cpi	r20, 0x01	; 1
     606:	81 f4       	brne	.+32     	; 0x628 <GPIO_vconnectpullup+0xde>
				SET_BIT(myPORTC,pin);
     608:	25 b3       	in	r18, 0x15	; 21
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	ac 01       	movw	r20, r24
     610:	02 c0       	rjmp	.+4      	; 0x616 <GPIO_vconnectpullup+0xcc>
     612:	44 0f       	add	r20, r20
     614:	55 1f       	adc	r21, r21
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <GPIO_vconnectpullup+0xc8>
     61a:	ba 01       	movw	r22, r20
     61c:	62 2b       	or	r22, r18
     61e:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
     620:	80 b7       	in	r24, 0x30	; 48
     622:	8b 7f       	andi	r24, 0xFB	; 251
     624:	80 bf       	out	0x30, r24	; 48
     626:	08 95       	ret
			}else{
				CLR_BIT(myPORTC,pin);
     628:	25 b3       	in	r18, 0x15	; 21
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	ac 01       	movw	r20, r24
     630:	02 c0       	rjmp	.+4      	; 0x636 <GPIO_vconnectpullup+0xec>
     632:	44 0f       	add	r20, r20
     634:	55 1f       	adc	r21, r21
     636:	6a 95       	dec	r22
     638:	e2 f7       	brpl	.-8      	; 0x632 <GPIO_vconnectpullup+0xe8>
     63a:	ba 01       	movw	r22, r20
     63c:	60 95       	com	r22
     63e:	62 23       	and	r22, r18
     640:	65 bb       	out	0x15, r22	; 21
     642:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect==connect_pullup){
     644:	41 30       	cpi	r20, 0x01	; 1
     646:	81 f4       	brne	.+32     	; 0x668 <GPIO_vconnectpullup+0x11e>
				SET_BIT(myPORTD,pin);
     648:	22 b3       	in	r18, 0x12	; 18
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	ac 01       	movw	r20, r24
     650:	02 c0       	rjmp	.+4      	; 0x656 <GPIO_vconnectpullup+0x10c>
     652:	44 0f       	add	r20, r20
     654:	55 1f       	adc	r21, r21
     656:	6a 95       	dec	r22
     658:	e2 f7       	brpl	.-8      	; 0x652 <GPIO_vconnectpullup+0x108>
     65a:	ba 01       	movw	r22, r20
     65c:	62 2b       	or	r22, r18
     65e:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
     660:	80 b7       	in	r24, 0x30	; 48
     662:	8b 7f       	andi	r24, 0xFB	; 251
     664:	80 bf       	out	0x30, r24	; 48
     666:	08 95       	ret
			}else{
				CLR_BIT(myPORTD,pin);
     668:	22 b3       	in	r18, 0x12	; 18
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	ac 01       	movw	r20, r24
     670:	02 c0       	rjmp	.+4      	; 0x676 <GPIO_vconnectpullup+0x12c>
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	6a 95       	dec	r22
     678:	e2 f7       	brpl	.-8      	; 0x672 <GPIO_vconnectpullup+0x128>
     67a:	ba 01       	movw	r22, r20
     67c:	60 95       	com	r22
     67e:	62 23       	and	r22, r18
     680:	62 bb       	out	0x12, r22	; 18
     682:	08 95       	ret

00000684 <GPIO_vset_PORT_DIR>:
}

//==================================PORT=============================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
     684:	84 34       	cpi	r24, 0x44	; 68
     686:	d9 f0       	breq	.+54     	; 0x6be <GPIO_vset_PORT_DIR+0x3a>
     688:	85 34       	cpi	r24, 0x45	; 69
     68a:	38 f4       	brcc	.+14     	; 0x69a <GPIO_vset_PORT_DIR+0x16>
     68c:	82 34       	cpi	r24, 0x42	; 66
     68e:	99 f0       	breq	.+38     	; 0x6b6 <GPIO_vset_PORT_DIR+0x32>
     690:	83 34       	cpi	r24, 0x43	; 67
     692:	98 f4       	brcc	.+38     	; 0x6ba <GPIO_vset_PORT_DIR+0x36>
     694:	81 34       	cpi	r24, 0x41	; 65
     696:	a1 f4       	brne	.+40     	; 0x6c0 <GPIO_vset_PORT_DIR+0x3c>
     698:	0c c0       	rjmp	.+24     	; 0x6b2 <GPIO_vset_PORT_DIR+0x2e>
     69a:	82 36       	cpi	r24, 0x62	; 98
     69c:	61 f0       	breq	.+24     	; 0x6b6 <GPIO_vset_PORT_DIR+0x32>
     69e:	83 36       	cpi	r24, 0x63	; 99
     6a0:	18 f4       	brcc	.+6      	; 0x6a8 <GPIO_vset_PORT_DIR+0x24>
     6a2:	81 36       	cpi	r24, 0x61	; 97
     6a4:	69 f4       	brne	.+26     	; 0x6c0 <GPIO_vset_PORT_DIR+0x3c>
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <GPIO_vset_PORT_DIR+0x2e>
     6a8:	83 36       	cpi	r24, 0x63	; 99
     6aa:	39 f0       	breq	.+14     	; 0x6ba <GPIO_vset_PORT_DIR+0x36>
     6ac:	84 36       	cpi	r24, 0x64	; 100
     6ae:	41 f4       	brne	.+16     	; 0x6c0 <GPIO_vset_PORT_DIR+0x3c>
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <GPIO_vset_PORT_DIR+0x3a>
		case 'A' :
		case 'a' :
			myDDRA = dir;
     6b2:	6a bb       	out	0x1a, r22	; 26
			break;
     6b4:	08 95       	ret
		case 'b' :
		case 'B' :
			myDDRB = dir;
     6b6:	67 bb       	out	0x17, r22	; 23
			break;
     6b8:	08 95       	ret
		case 'c' :
		case 'C' :
			myDDRC = dir;
     6ba:	64 bb       	out	0x14, r22	; 20
			break;
     6bc:	08 95       	ret
		case 'd' :
		case 'D' :
			myDDRD = dir;
     6be:	61 bb       	out	0x11, r22	; 17
     6c0:	08 95       	ret

000006c2 <GPIO_vwrite_PORT>:
		default: break;
	}
}

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
     6c2:	84 34       	cpi	r24, 0x44	; 68
     6c4:	d9 f0       	breq	.+54     	; 0x6fc <GPIO_vwrite_PORT+0x3a>
     6c6:	85 34       	cpi	r24, 0x45	; 69
     6c8:	38 f4       	brcc	.+14     	; 0x6d8 <GPIO_vwrite_PORT+0x16>
     6ca:	82 34       	cpi	r24, 0x42	; 66
     6cc:	99 f0       	breq	.+38     	; 0x6f4 <GPIO_vwrite_PORT+0x32>
     6ce:	83 34       	cpi	r24, 0x43	; 67
     6d0:	98 f4       	brcc	.+38     	; 0x6f8 <GPIO_vwrite_PORT+0x36>
     6d2:	81 34       	cpi	r24, 0x41	; 65
     6d4:	a1 f4       	brne	.+40     	; 0x6fe <GPIO_vwrite_PORT+0x3c>
     6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <GPIO_vwrite_PORT+0x2e>
     6d8:	82 36       	cpi	r24, 0x62	; 98
     6da:	61 f0       	breq	.+24     	; 0x6f4 <GPIO_vwrite_PORT+0x32>
     6dc:	83 36       	cpi	r24, 0x63	; 99
     6de:	18 f4       	brcc	.+6      	; 0x6e6 <GPIO_vwrite_PORT+0x24>
     6e0:	81 36       	cpi	r24, 0x61	; 97
     6e2:	69 f4       	brne	.+26     	; 0x6fe <GPIO_vwrite_PORT+0x3c>
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <GPIO_vwrite_PORT+0x2e>
     6e6:	83 36       	cpi	r24, 0x63	; 99
     6e8:	39 f0       	breq	.+14     	; 0x6f8 <GPIO_vwrite_PORT+0x36>
     6ea:	84 36       	cpi	r24, 0x64	; 100
     6ec:	41 f4       	brne	.+16     	; 0x6fe <GPIO_vwrite_PORT+0x3c>
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <GPIO_vwrite_PORT+0x3a>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
     6f0:	6b bb       	out	0x1b, r22	; 27
			break;
     6f2:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
     6f4:	68 bb       	out	0x18, r22	; 24
			break;
     6f6:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
     6f8:	65 bb       	out	0x15, r22	; 21
			break;
     6fa:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
     6fc:	62 bb       	out	0x12, r22	; 18
     6fe:	08 95       	ret

00000700 <GPIO_vtoggle_PORT>:
		default: break;
	}
}

void GPIO_vtoggle_PORT(u8 portnum){
	switch (portnum){
     700:	84 34       	cpi	r24, 0x44	; 68
     702:	09 f1       	breq	.+66     	; 0x746 <GPIO_vtoggle_PORT+0x46>
     704:	85 34       	cpi	r24, 0x45	; 69
     706:	38 f4       	brcc	.+14     	; 0x716 <GPIO_vtoggle_PORT+0x16>
     708:	82 34       	cpi	r24, 0x42	; 66
     70a:	a9 f0       	breq	.+42     	; 0x736 <GPIO_vtoggle_PORT+0x36>
     70c:	83 34       	cpi	r24, 0x43	; 67
     70e:	b8 f4       	brcc	.+46     	; 0x73e <GPIO_vtoggle_PORT+0x3e>
     710:	81 34       	cpi	r24, 0x41	; 65
     712:	e1 f4       	brne	.+56     	; 0x74c <GPIO_vtoggle_PORT+0x4c>
     714:	0c c0       	rjmp	.+24     	; 0x72e <GPIO_vtoggle_PORT+0x2e>
     716:	82 36       	cpi	r24, 0x62	; 98
     718:	71 f0       	breq	.+28     	; 0x736 <GPIO_vtoggle_PORT+0x36>
     71a:	83 36       	cpi	r24, 0x63	; 99
     71c:	18 f4       	brcc	.+6      	; 0x724 <GPIO_vtoggle_PORT+0x24>
     71e:	81 36       	cpi	r24, 0x61	; 97
     720:	a9 f4       	brne	.+42     	; 0x74c <GPIO_vtoggle_PORT+0x4c>
     722:	05 c0       	rjmp	.+10     	; 0x72e <GPIO_vtoggle_PORT+0x2e>
     724:	83 36       	cpi	r24, 0x63	; 99
     726:	59 f0       	breq	.+22     	; 0x73e <GPIO_vtoggle_PORT+0x3e>
     728:	84 36       	cpi	r24, 0x64	; 100
     72a:	81 f4       	brne	.+32     	; 0x74c <GPIO_vtoggle_PORT+0x4c>
     72c:	0c c0       	rjmp	.+24     	; 0x746 <GPIO_vtoggle_PORT+0x46>
		case 'A' :
		case 'a' :
			myPORTA = ~myPORTA;
     72e:	8b b3       	in	r24, 0x1b	; 27
     730:	80 95       	com	r24
     732:	8b bb       	out	0x1b, r24	; 27
			break;
     734:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = ~myPORTB;
     736:	88 b3       	in	r24, 0x18	; 24
     738:	80 95       	com	r24
     73a:	88 bb       	out	0x18, r24	; 24
			break;
     73c:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = ~myPORTC;
     73e:	85 b3       	in	r24, 0x15	; 21
     740:	80 95       	com	r24
     742:	85 bb       	out	0x15, r24	; 21
			break;
     744:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = ~myPORTD;
     746:	82 b3       	in	r24, 0x12	; 18
     748:	80 95       	com	r24
     74a:	82 bb       	out	0x12, r24	; 18
     74c:	08 95       	ret

0000074e <GPIO_read_PORT>:
			break;
		default: break;
	}
}
u8 GPIO_read_PORT(u8 portnum){
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	0f 92       	push	r0
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	volatile u8 val=0;
     758:	19 82       	std	Y+1, r1	; 0x01
	switch (portnum){
     75a:	84 34       	cpi	r24, 0x44	; 68
     75c:	f1 f0       	breq	.+60     	; 0x79a <GPIO_read_PORT+0x4c>
     75e:	85 34       	cpi	r24, 0x45	; 69
     760:	38 f4       	brcc	.+14     	; 0x770 <GPIO_read_PORT+0x22>
     762:	82 34       	cpi	r24, 0x42	; 66
     764:	a1 f0       	breq	.+40     	; 0x78e <GPIO_read_PORT+0x40>
     766:	83 34       	cpi	r24, 0x43	; 67
     768:	a8 f4       	brcc	.+42     	; 0x794 <GPIO_read_PORT+0x46>
     76a:	81 34       	cpi	r24, 0x41	; 65
     76c:	c1 f4       	brne	.+48     	; 0x79e <GPIO_read_PORT+0x50>
     76e:	0c c0       	rjmp	.+24     	; 0x788 <GPIO_read_PORT+0x3a>
     770:	82 36       	cpi	r24, 0x62	; 98
     772:	69 f0       	breq	.+26     	; 0x78e <GPIO_read_PORT+0x40>
     774:	83 36       	cpi	r24, 0x63	; 99
     776:	18 f4       	brcc	.+6      	; 0x77e <GPIO_read_PORT+0x30>
     778:	81 36       	cpi	r24, 0x61	; 97
     77a:	89 f4       	brne	.+34     	; 0x79e <GPIO_read_PORT+0x50>
     77c:	05 c0       	rjmp	.+10     	; 0x788 <GPIO_read_PORT+0x3a>
     77e:	83 36       	cpi	r24, 0x63	; 99
     780:	49 f0       	breq	.+18     	; 0x794 <GPIO_read_PORT+0x46>
     782:	84 36       	cpi	r24, 0x64	; 100
     784:	61 f4       	brne	.+24     	; 0x79e <GPIO_read_PORT+0x50>
     786:	09 c0       	rjmp	.+18     	; 0x79a <GPIO_read_PORT+0x4c>
		case 'a' :
		case 'A' :
			val = myPINA;
     788:	89 b3       	in	r24, 0x19	; 25
     78a:	89 83       	std	Y+1, r24	; 0x01
			break;
     78c:	08 c0       	rjmp	.+16     	; 0x79e <GPIO_read_PORT+0x50>
		case 'b' :
		case 'B' :
			val = myPINB;
     78e:	86 b3       	in	r24, 0x16	; 22
     790:	89 83       	std	Y+1, r24	; 0x01
			break;
     792:	05 c0       	rjmp	.+10     	; 0x79e <GPIO_read_PORT+0x50>
		case 'c' :
		case 'C' :
			val = myPINC;
     794:	83 b3       	in	r24, 0x13	; 19
     796:	89 83       	std	Y+1, r24	; 0x01
			break;
     798:	02 c0       	rjmp	.+4      	; 0x79e <GPIO_read_PORT+0x50>
		case 'd' :
		case 'D' :
			val = myPIND;
     79a:	80 b3       	in	r24, 0x10	; 16
     79c:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
}
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <GPIO_High_Nibble_vset_dir>:
//=====================================================================================

//==================================Nibble=============================================

//==================================High Nibble========================================
void GPIO_High_Nibble_vset_dir(u8 port,u8 dir){
     7a6:	cf 93       	push	r28
     7a8:	c8 2f       	mov	r28, r24
	if (1==dir){
     7aa:	61 30       	cpi	r22, 0x01	; 1
     7ac:	a1 f4       	brne	.+40     	; 0x7d6 <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
     7ae:	64 e0       	ldi	r22, 0x04	; 4
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
     7b6:	8c 2f       	mov	r24, r28
     7b8:	65 e0       	ldi	r22, 0x05	; 5
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
     7c0:	8c 2f       	mov	r24, r28
     7c2:	66 e0       	ldi	r22, 0x06	; 6
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
     7ca:	8c 2f       	mov	r24, r28
     7cc:	67 e0       	ldi	r22, 0x07	; 7
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
     7d4:	13 c0       	rjmp	.+38     	; 0x7fc <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
     7d6:	64 e0       	ldi	r22, 0x04	; 4
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
     7de:	8c 2f       	mov	r24, r28
     7e0:	65 e0       	ldi	r22, 0x05	; 5
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	66 e0       	ldi	r22, 0x06	; 6
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
     7f2:	8c 2f       	mov	r24, r28
     7f4:	67 e0       	ldi	r22, 0x07	; 7
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
	}
	
}
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <GPIO_High_Nibble_vwrite>:

void GPIO_High_Nibble_vwrite( u8 port , u8 value ){
	value <<= 4;   
     800:	62 95       	swap	r22
     802:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){    
     804:	84 34       	cpi	r24, 0x44	; 68
     806:	51 f1       	breq	.+84     	; 0x85c <GPIO_High_Nibble_vwrite+0x5c>
     808:	85 34       	cpi	r24, 0x45	; 69
     80a:	38 f4       	brcc	.+14     	; 0x81a <GPIO_High_Nibble_vwrite+0x1a>
     80c:	82 34       	cpi	r24, 0x42	; 66
     80e:	c1 f0       	breq	.+48     	; 0x840 <GPIO_High_Nibble_vwrite+0x40>
     810:	83 34       	cpi	r24, 0x43	; 67
     812:	e8 f4       	brcc	.+58     	; 0x84e <GPIO_High_Nibble_vwrite+0x4e>
     814:	81 34       	cpi	r24, 0x41	; 65
     816:	41 f5       	brne	.+80     	; 0x868 <__stack+0x9>
     818:	0c c0       	rjmp	.+24     	; 0x832 <GPIO_High_Nibble_vwrite+0x32>
     81a:	82 36       	cpi	r24, 0x62	; 98
     81c:	89 f0       	breq	.+34     	; 0x840 <GPIO_High_Nibble_vwrite+0x40>
     81e:	83 36       	cpi	r24, 0x63	; 99
     820:	18 f4       	brcc	.+6      	; 0x828 <GPIO_High_Nibble_vwrite+0x28>
     822:	81 36       	cpi	r24, 0x61	; 97
     824:	09 f5       	brne	.+66     	; 0x868 <__stack+0x9>
     826:	05 c0       	rjmp	.+10     	; 0x832 <GPIO_High_Nibble_vwrite+0x32>
     828:	83 36       	cpi	r24, 0x63	; 99
     82a:	89 f0       	breq	.+34     	; 0x84e <GPIO_High_Nibble_vwrite+0x4e>
     82c:	84 36       	cpi	r24, 0x64	; 100
     82e:	e1 f4       	brne	.+56     	; 0x868 <__stack+0x9>
     830:	15 c0       	rjmp	.+42     	; 0x85c <GPIO_High_Nibble_vwrite+0x5c>
		case 'A':
		case 'a':			
			myPORTA &=0x0f; 
     832:	8b b3       	in	r24, 0x1b	; 27
     834:	8f 70       	andi	r24, 0x0F	; 15
     836:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     838:	8b b3       	in	r24, 0x1b	; 27
     83a:	68 2b       	or	r22, r24
     83c:	6b bb       	out	0x1b, r22	; 27
			break;				
     83e:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0x0f;
     840:	88 b3       	in	r24, 0x18	; 24
     842:	8f 70       	andi	r24, 0x0F	; 15
     844:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     846:	88 b3       	in	r24, 0x18	; 24
     848:	68 2b       	or	r22, r24
     84a:	68 bb       	out	0x18, r22	; 24
			break;
     84c:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0x0f;
     84e:	85 b3       	in	r24, 0x15	; 21
     850:	8f 70       	andi	r24, 0x0F	; 15
     852:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     854:	85 b3       	in	r24, 0x15	; 21
     856:	68 2b       	or	r22, r24
     858:	65 bb       	out	0x15, r22	; 21
			break;
     85a:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0x0f;
     85c:	82 b3       	in	r24, 0x12	; 18
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     862:	82 b3       	in	r24, 0x12	; 18
     864:	68 2b       	or	r22, r24
     866:	62 bb       	out	0x12, r22	; 18
     868:	08 95       	ret

0000086a <GPIO_Low_Nibble_vset_dir>:
		default: break;
	}
}

//==================================Low Nibble========================================
void GPIO_Low_Nibble_vset_dir(u8 port,u8 dir){
     86a:	cf 93       	push	r28
     86c:	c8 2f       	mov	r28, r24
	if (1==dir){
     86e:	61 30       	cpi	r22, 0x01	; 1
     870:	a1 f4       	brne	.+40     	; 0x89a <GPIO_Low_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,0,1);
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
     87a:	8c 2f       	mov	r24, r28
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
     884:	8c 2f       	mov	r24, r28
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
     88e:	8c 2f       	mov	r24, r28
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
     898:	13 c0       	rjmp	.+38     	; 0x8c0 <GPIO_Low_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,0,0);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
     8a2:	8c 2f       	mov	r24, r28
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
     8ac:	8c 2f       	mov	r24, r28
     8ae:	62 e0       	ldi	r22, 0x02	; 2
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
     8b6:	8c 2f       	mov	r24, r28
     8b8:	63 e0       	ldi	r22, 0x03	; 3
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
	}
}
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <GPIO_Low_Nibble_vwrite>:

void GPIO_Low_Nibble_vwrite( u8 port , u8 value ){
	value &=0x0f;
     8c4:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
     8c6:	84 34       	cpi	r24, 0x44	; 68
     8c8:	51 f1       	breq	.+84     	; 0x91e <GPIO_Low_Nibble_vwrite+0x5a>
     8ca:	85 34       	cpi	r24, 0x45	; 69
     8cc:	38 f4       	brcc	.+14     	; 0x8dc <GPIO_Low_Nibble_vwrite+0x18>
     8ce:	82 34       	cpi	r24, 0x42	; 66
     8d0:	c1 f0       	breq	.+48     	; 0x902 <GPIO_Low_Nibble_vwrite+0x3e>
     8d2:	83 34       	cpi	r24, 0x43	; 67
     8d4:	e8 f4       	brcc	.+58     	; 0x910 <GPIO_Low_Nibble_vwrite+0x4c>
     8d6:	81 34       	cpi	r24, 0x41	; 65
     8d8:	41 f5       	brne	.+80     	; 0x92a <GPIO_Low_Nibble_vwrite+0x66>
     8da:	0c c0       	rjmp	.+24     	; 0x8f4 <GPIO_Low_Nibble_vwrite+0x30>
     8dc:	82 36       	cpi	r24, 0x62	; 98
     8de:	89 f0       	breq	.+34     	; 0x902 <GPIO_Low_Nibble_vwrite+0x3e>
     8e0:	83 36       	cpi	r24, 0x63	; 99
     8e2:	18 f4       	brcc	.+6      	; 0x8ea <GPIO_Low_Nibble_vwrite+0x26>
     8e4:	81 36       	cpi	r24, 0x61	; 97
     8e6:	09 f5       	brne	.+66     	; 0x92a <GPIO_Low_Nibble_vwrite+0x66>
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <GPIO_Low_Nibble_vwrite+0x30>
     8ea:	83 36       	cpi	r24, 0x63	; 99
     8ec:	89 f0       	breq	.+34     	; 0x910 <GPIO_Low_Nibble_vwrite+0x4c>
     8ee:	84 36       	cpi	r24, 0x64	; 100
     8f0:	e1 f4       	brne	.+56     	; 0x92a <GPIO_Low_Nibble_vwrite+0x66>
     8f2:	15 c0       	rjmp	.+42     	; 0x91e <GPIO_Low_Nibble_vwrite+0x5a>
		case 'A':
		case 'a':
			myPORTA &=0xf0;
     8f4:	8b b3       	in	r24, 0x1b	; 27
     8f6:	80 7f       	andi	r24, 0xF0	; 240
     8f8:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     8fa:	8b b3       	in	r24, 0x1b	; 27
     8fc:	68 2b       	or	r22, r24
     8fe:	6b bb       	out	0x1b, r22	; 27
			break;
     900:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0xf0;
     902:	88 b3       	in	r24, 0x18	; 24
     904:	80 7f       	andi	r24, 0xF0	; 240
     906:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     908:	88 b3       	in	r24, 0x18	; 24
     90a:	68 2b       	or	r22, r24
     90c:	68 bb       	out	0x18, r22	; 24
			break;
     90e:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0xf0;
     910:	85 b3       	in	r24, 0x15	; 21
     912:	80 7f       	andi	r24, 0xF0	; 240
     914:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     916:	85 b3       	in	r24, 0x15	; 21
     918:	68 2b       	or	r22, r24
     91a:	65 bb       	out	0x15, r22	; 21
			break;
     91c:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0xf0;
     91e:	82 b3       	in	r24, 0x12	; 18
     920:	80 7f       	andi	r24, 0xF0	; 240
     922:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     924:	82 b3       	in	r24, 0x12	; 18
     926:	68 2b       	or	r22, r24
     928:	62 bb       	out	0x12, r22	; 18
     92a:	08 95       	ret

0000092c <keypad_vInit>:
 * Keypad_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "Keypad_ECU.h"
void keypad_vInit(u8 port){
     92c:	cf 93       	push	r28
     92e:	c8 2f       	mov	r28, r24
										
		GPIO_vset_PORT_DIR(port,0x0f);  
     930:	6f e0       	ldi	r22, 0x0F	; 15
     932:	0e 94 42 03 	call	0x684	; 0x684 <GPIO_vset_PORT_DIR>
		GPIO_vconnectpullup(port,4,1);
     936:	8c 2f       	mov	r24, r28
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,5,1);
     940:	8c 2f       	mov	r24, r28
     942:	65 e0       	ldi	r22, 0x05	; 5
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,6,1);
     94a:	8c 2f       	mov	r24, r28
     94c:	66 e0       	ldi	r22, 0x06	; 6
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,7,1);
     954:	8c 2f       	mov	r24, r28
     956:	67 e0       	ldi	r22, 0x07	; 7
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_vconnectpullup>
	
}
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <keypad_u8check_press>:

u8 keypad_u8check_press(u8 port){
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	60 97       	sbiw	r28, 0x10	; 16
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	08 2f       	mov	r16, r24
	//u8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
     97e:	de 01       	movw	r26, r28
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	e0 e6       	ldi	r30, 0x60	; 96
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 e1       	ldi	r24, 0x10	; 16
     988:	01 90       	ld	r0, Z+
     98a:	0d 92       	st	X+, r0
     98c:	81 50       	subi	r24, 0x01	; 1
     98e:	e1 f7       	brne	.-8      	; 0x988 <keypad_u8check_press+0x26>
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){									
     990:	ff 24       	eor	r15, r15
		GPIO_vwrite_PIN(port,0,1);								
     992:	80 2f       	mov	r24, r16
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	41 e0       	ldi	r20, 0x01	; 1
     998:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,1,1);						
     99c:	80 2f       	mov	r24, r16
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,2,1);						
     9a6:	80 2f       	mov	r24, r16
     9a8:	62 e0       	ldi	r22, 0x02	; 2
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,3,1);
     9b0:	80 2f       	mov	r24, r16
     9b2:	63 e0       	ldi	r22, 0x03	; 3
     9b4:	41 e0       	ldi	r20, 0x01	; 1
     9b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,row,0);
     9ba:	80 2f       	mov	r24, r16
     9bc:	6f 2d       	mov	r22, r15
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		
			for (coloumn=0; coloumn < 4; coloumn++){
     9c4:	10 e0       	ldi	r17, 0x00	; 0
				x=GPIO_u8read_PIN(port,(coloumn+4));
     9c6:	61 2f       	mov	r22, r17
     9c8:	6c 5f       	subi	r22, 0xFC	; 252
     9ca:	80 2f       	mov	r24, r16
     9cc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <GPIO_u8read_PIN>
				if(0==x){
     9d0:	88 23       	and	r24, r24
     9d2:	61 f4       	brne	.+24     	; 0x9ec <keypad_u8check_press+0x8a>
					returnval = arr[row][coloumn];
     9d4:	ef 2d       	mov	r30, r15
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	e1 0f       	add	r30, r17
     9e2:	f1 1d       	adc	r31, r1
     9e4:	ec 0f       	add	r30, r28
     9e6:	fd 1f       	adc	r31, r29
     9e8:	81 81       	ldd	r24, Z+1	; 0x01
     9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <keypad_u8check_press+0x92>
		GPIO_vwrite_PIN(port,1,1);						
		GPIO_vwrite_PIN(port,2,1);						
		GPIO_vwrite_PIN(port,3,1);
		GPIO_vwrite_PIN(port,row,0);
		
			for (coloumn=0; coloumn < 4; coloumn++){
     9ec:	1f 5f       	subi	r17, 0xFF	; 255
     9ee:	14 30       	cpi	r17, 0x04	; 4
     9f0:	51 f7       	brne	.-44     	; 0x9c6 <keypad_u8check_press+0x64>
     9f2:	0c c0       	rjmp	.+24     	; 0xa0c <keypad_u8check_press+0xaa>
		if(0==x){
			break;
		}
	}	
	return returnval;
     9f4:	60 96       	adiw	r28, 0x10	; 16
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	08 95       	ret
u8 keypad_u8check_press(u8 port){
	//u8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){									
     a0c:	f3 94       	inc	r15
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	f8 16       	cp	r15, r24
     a12:	09 f0       	breq	.+2      	; 0xa16 <keypad_u8check_press+0xb4>
     a14:	be cf       	rjmp	.-132    	; 0x992 <keypad_u8check_press+0x30>
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	ed cf       	rjmp	.-38     	; 0x9f4 <keypad_u8check_press+0x92>

00000a1a <send_falling_edge>:
			_delay_ms(1);
		}
	}
}

  static void send_falling_edge(u8 EN_port,u8 EN_pin){
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	d8 2f       	mov	r29, r24
     a20:	c6 2f       	mov	r28, r22
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a28:	8f e9       	ldi	r24, 0x9F	; 159
     a2a:	9f e0       	ldi	r25, 0x0F	; 15
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <send_falling_edge+0x12>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <send_falling_edge+0x18>
     a32:	00 00       	nop
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
     a34:	8d 2f       	mov	r24, r29
     a36:	6c 2f       	mov	r22, r28
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <LCD_vsend_cmd>:
			_delay_ms(1);
		}
	}
}

void LCD_vsend_cmd(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 cmd,u8 EN_port,u8 EN_pin){
     a44:	af 92       	push	r10
     a46:	cf 92       	push	r12
     a48:	ef 92       	push	r14
     a4a:	0f 93       	push	r16
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	c4 2f       	mov	r28, r20
     a52:	d2 2f       	mov	r29, r18
	if(1==Mode){
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	71 f4       	brne	.+28     	; 0xa74 <LCD_vsend_cmd+0x30>
		GPIO_vwrite_PORT(port,cmd);
     a58:	84 2f       	mov	r24, r20
     a5a:	6e 2d       	mov	r22, r14
     a5c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a60:	8d 2f       	mov	r24, r29
     a62:	60 2f       	mov	r22, r16
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     a6a:	8c 2d       	mov	r24, r12
     a6c:	6a 2d       	mov	r22, r10
     a6e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
     a72:	47 c0       	rjmp	.+142    	; 0xb02 <LCD_vsend_cmd+0xbe>
	}else {
		if (1==Nibble){
     a74:	61 30       	cpi	r22, 0x01	; 1
     a76:	19 f5       	brne	.+70     	; 0xabe <LCD_vsend_cmd+0x7a>
			GPIO_High_Nibble_vwrite(port,cmd>>4);     
     a78:	6e 2d       	mov	r22, r14
     a7a:	62 95       	swap	r22
     a7c:	6f 70       	andi	r22, 0x0F	; 15
     a7e:	84 2f       	mov	r24, r20
     a80:	0e 94 00 04 	call	0x800	; 0x800 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a84:	8d 2f       	mov	r24, r29
     a86:	60 2f       	mov	r22, r16
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a8e:	8c 2d       	mov	r24, r12
     a90:	6a 2d       	mov	r22, r10
     a92:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,cmd);
     a96:	8c 2f       	mov	r24, r28
     a98:	6e 2d       	mov	r22, r14
     a9a:	0e 94 00 04 	call	0x800	; 0x800 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a9e:	8d 2f       	mov	r24, r29
     aa0:	60 2f       	mov	r22, r16
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     aa8:	8c 2d       	mov	r24, r12
     aaa:	6a 2d       	mov	r22, r10
     aac:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
     ab0:	8f ec       	ldi	r24, 0xCF	; 207
     ab2:	97 e0       	ldi	r25, 0x07	; 7
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <LCD_vsend_cmd+0x70>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <LCD_vsend_cmd+0x76>
     aba:	00 00       	nop
     abc:	22 c0       	rjmp	.+68     	; 0xb02 <LCD_vsend_cmd+0xbe>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,cmd>>4);   
     abe:	6e 2d       	mov	r22, r14
     ac0:	62 95       	swap	r22
     ac2:	6f 70       	andi	r22, 0x0F	; 15
     ac4:	84 2f       	mov	r24, r20
     ac6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     aca:	8d 2f       	mov	r24, r29
     acc:	60 2f       	mov	r22, r16
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     ad4:	8c 2d       	mov	r24, r12
     ad6:	6a 2d       	mov	r22, r10
     ad8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,cmd);
     adc:	8c 2f       	mov	r24, r28
     ade:	6e 2d       	mov	r22, r14
     ae0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     ae4:	8d 2f       	mov	r24, r29
     ae6:	60 2f       	mov	r22, r16
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     aee:	8c 2d       	mov	r24, r12
     af0:	6a 2d       	mov	r22, r10
     af2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
     af6:	8f ec       	ldi	r24, 0xCF	; 207
     af8:	97 e0       	ldi	r25, 0x07	; 7
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <LCD_vsend_cmd+0xb6>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <LCD_vsend_cmd+0xbc>
     b00:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	0f 91       	pop	r16
     b08:	ef 90       	pop	r14
     b0a:	cf 90       	pop	r12
     b0c:	af 90       	pop	r10
     b0e:	08 95       	ret

00000b10 <LCD_vInit>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

void LCD_vInit(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin, u8 RW_port, u8 RW_pin,u8 EN_port,u8 EN_pin){
     b10:	7f 92       	push	r7
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	18 2f       	mov	r17, r24
     b30:	f6 2e       	mov	r15, r22
     b32:	74 2e       	mov	r7, r20
     b34:	92 2e       	mov	r9, r18
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	91 ee       	ldi	r25, 0xE1	; 225
     b3a:	a4 e0       	ldi	r26, 0x04	; 4
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	90 40       	sbci	r25, 0x00	; 0
     b40:	a0 40       	sbci	r26, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <LCD_vInit+0x2c>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <LCD_vInit+0x36>
     b46:	00 00       	nop
	_delay_ms(200);
	GPIO_vsetPIN_DIR(RS_port,RS_pin,1);
     b48:	82 2f       	mov	r24, r18
     b4a:	60 2f       	mov	r22, r16
     b4c:	41 e0       	ldi	r20, 0x01	; 1
     b4e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(RW_port,RW_pin,1);
     b52:	8e 2d       	mov	r24, r14
     b54:	6c 2d       	mov	r22, r12
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(EN_port,EN_pin,1);
     b5c:	8a 2d       	mov	r24, r10
     b5e:	68 2d       	mov	r22, r8
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
	if (1==Mode){
     b66:	11 30       	cpi	r17, 0x01	; 1
     b68:	09 f0       	breq	.+2      	; 0xb6c <LCD_vInit+0x5c>
     b6a:	50 c0       	rjmp	.+160    	; 0xc0c <LCD_vInit+0xfc>
		GPIO_vset_PORT_DIR(port,0xff);
     b6c:	87 2d       	mov	r24, r7
     b6e:	6f ef       	ldi	r22, 0xFF	; 255
     b70:	0e 94 42 03 	call	0x684	; 0x684 <GPIO_vset_PORT_DIR>
		GPIO_vwrite_PIN(RW_port,RW_pin,0);
     b74:	8e 2d       	mov	r24, r14
     b76:	6c 2d       	mov	r22, r12
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
     b7e:	af e2       	ldi	r26, 0x2F	; 47
     b80:	b5 e7       	ldi	r27, 0x75	; 117
     b82:	11 97       	sbiw	r26, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCD_vInit+0x72>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <LCD_vInit+0x78>
     b88:	00 00       	nop
		_delay_ms(15);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_8BIT_2Lines,EN_port,EN_pin);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	6f 2d       	mov	r22, r15
     b8e:	47 2d       	mov	r20, r7
     b90:	29 2d       	mov	r18, r9
     b92:	0f 2e       	mov	r0, r31
     b94:	f8 e3       	ldi	r31, 0x38	; 56
     b96:	ef 2e       	mov	r14, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	ca 2c       	mov	r12, r10
     b9c:	a8 2c       	mov	r10, r8
     b9e:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     ba2:	8f ec       	ldi	r24, 0xCF	; 207
     ba4:	97 e0       	ldi	r25, 0x07	; 7
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <LCD_vInit+0x96>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <LCD_vInit+0x9c>
     bac:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	6f 2d       	mov	r22, r15
     bb2:	47 2d       	mov	r20, r7
     bb4:	29 2d       	mov	r18, r9
     bb6:	0f 2e       	mov	r0, r31
     bb8:	fe e0       	ldi	r31, 0x0E	; 14
     bba:	ef 2e       	mov	r14, r31
     bbc:	f0 2d       	mov	r31, r0
     bbe:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     bc2:	af ec       	ldi	r26, 0xCF	; 207
     bc4:	b7 e0       	ldi	r27, 0x07	; 7
     bc6:	11 97       	sbiw	r26, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCD_vInit+0xb6>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <LCD_vInit+0xbc>
     bcc:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	6f 2d       	mov	r22, r15
     bd2:	47 2d       	mov	r20, r7
     bd4:	29 2d       	mov	r18, r9
     bd6:	ee 24       	eor	r14, r14
     bd8:	e3 94       	inc	r14
     bda:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     bde:	8f e1       	ldi	r24, 0x1F	; 31
     be0:	9e e4       	ldi	r25, 0x4E	; 78
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <LCD_vInit+0xd2>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <LCD_vInit+0xd8>
     be8:	00 00       	nop
		_delay_ms(10);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	6f 2d       	mov	r22, r15
     bee:	47 2d       	mov	r20, r7
     bf0:	29 2d       	mov	r18, r9
     bf2:	0f 2e       	mov	r0, r31
     bf4:	f6 e0       	ldi	r31, 0x06	; 6
     bf6:	ef 2e       	mov	r14, r31
     bf8:	f0 2d       	mov	r31, r0
     bfa:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     bfe:	af ec       	ldi	r26, 0xCF	; 207
     c00:	b7 e0       	ldi	r27, 0x07	; 7
     c02:	11 97       	sbiw	r26, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <LCD_vInit+0xf2>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <LCD_vInit+0xf8>
     c08:	00 00       	nop
     c0a:	b5 c0       	rjmp	.+362    	; 0xd76 <LCD_vInit+0x266>
		_delay_ms(1);
		
	}else{
		if (1==Nibble){
     c0c:	b1 e0       	ldi	r27, 0x01	; 1
     c0e:	fb 16       	cp	r15, r27
     c10:	09 f0       	breq	.+2      	; 0xc14 <LCD_vInit+0x104>
     c12:	59 c0       	rjmp	.+178    	; 0xcc6 <LCD_vInit+0x1b6>
			GPIO_High_Nibble_vset_dir(port,1);
     c14:	87 2d       	mov	r24, r7
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <GPIO_High_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     c1c:	8e 2d       	mov	r24, r14
     c1e:	6c 2d       	mov	r22, r12
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     c26:	81 2f       	mov	r24, r17
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	47 2d       	mov	r20, r7
     c2c:	29 2d       	mov	r18, r9
     c2e:	ee 24       	eor	r14, r14
     c30:	68 94       	set
     c32:	e1 f8       	bld	r14, 1
     c34:	ca 2c       	mov	r12, r10
     c36:	a8 2c       	mov	r10, r8
     c38:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     c3c:	8f e2       	ldi	r24, 0x2F	; 47
     c3e:	95 e7       	ldi	r25, 0x75	; 117
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_vInit+0x130>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <LCD_vInit+0x136>
     c46:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     c48:	81 2f       	mov	r24, r17
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	47 2d       	mov	r20, r7
     c4e:	29 2d       	mov	r18, r9
     c50:	0f 2e       	mov	r0, r31
     c52:	f8 e2       	ldi	r31, 0x28	; 40
     c54:	ef 2e       	mov	r14, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     c5c:	af ec       	ldi	r26, 0xCF	; 207
     c5e:	b7 e0       	ldi	r27, 0x07	; 7
     c60:	11 97       	sbiw	r26, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <LCD_vInit+0x150>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <LCD_vInit+0x156>
     c66:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     c68:	81 2f       	mov	r24, r17
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	47 2d       	mov	r20, r7
     c6e:	29 2d       	mov	r18, r9
     c70:	0f 2e       	mov	r0, r31
     c72:	fe e0       	ldi	r31, 0x0E	; 14
     c74:	ef 2e       	mov	r14, r31
     c76:	f0 2d       	mov	r31, r0
     c78:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     c7c:	8f ec       	ldi	r24, 0xCF	; 207
     c7e:	97 e0       	ldi	r25, 0x07	; 7
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <LCD_vInit+0x170>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <LCD_vInit+0x176>
     c86:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     c88:	81 2f       	mov	r24, r17
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	47 2d       	mov	r20, r7
     c8e:	29 2d       	mov	r18, r9
     c90:	ee 24       	eor	r14, r14
     c92:	e3 94       	inc	r14
     c94:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     c98:	af e1       	ldi	r26, 0x1F	; 31
     c9a:	be e4       	ldi	r27, 0x4E	; 78
     c9c:	11 97       	sbiw	r26, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <LCD_vInit+0x18c>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <LCD_vInit+0x192>
     ca2:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     ca4:	81 2f       	mov	r24, r17
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	47 2d       	mov	r20, r7
     caa:	29 2d       	mov	r18, r9
     cac:	0f 2e       	mov	r0, r31
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	ef 2e       	mov	r14, r31
     cb2:	f0 2d       	mov	r31, r0
     cb4:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     cb8:	8f ec       	ldi	r24, 0xCF	; 207
     cba:	97 e0       	ldi	r25, 0x07	; 7
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LCD_vInit+0x1ac>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <LCD_vInit+0x1b2>
     cc2:	00 00       	nop
     cc4:	58 c0       	rjmp	.+176    	; 0xd76 <LCD_vInit+0x266>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vset_dir(port,1);
     cc6:	87 2d       	mov	r24, r7
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	0e 94 35 04 	call	0x86a	; 0x86a <GPIO_Low_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     cce:	8e 2d       	mov	r24, r14
     cd0:	6c 2d       	mov	r22, r12
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     cd8:	81 2f       	mov	r24, r17
     cda:	6f 2d       	mov	r22, r15
     cdc:	47 2d       	mov	r20, r7
     cde:	29 2d       	mov	r18, r9
     ce0:	ee 24       	eor	r14, r14
     ce2:	68 94       	set
     ce4:	e1 f8       	bld	r14, 1
     ce6:	ca 2c       	mov	r12, r10
     ce8:	a8 2c       	mov	r10, r8
     cea:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     cee:	af e2       	ldi	r26, 0x2F	; 47
     cf0:	b5 e7       	ldi	r27, 0x75	; 117
     cf2:	11 97       	sbiw	r26, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCD_vInit+0x1e2>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <LCD_vInit+0x1e8>
     cf8:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     cfa:	81 2f       	mov	r24, r17
     cfc:	6f 2d       	mov	r22, r15
     cfe:	47 2d       	mov	r20, r7
     d00:	29 2d       	mov	r18, r9
     d02:	0f 2e       	mov	r0, r31
     d04:	f8 e2       	ldi	r31, 0x28	; 40
     d06:	ef 2e       	mov	r14, r31
     d08:	f0 2d       	mov	r31, r0
     d0a:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     d0e:	8f ec       	ldi	r24, 0xCF	; 207
     d10:	97 e0       	ldi	r25, 0x07	; 7
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <LCD_vInit+0x202>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <LCD_vInit+0x208>
     d18:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     d1a:	81 2f       	mov	r24, r17
     d1c:	6f 2d       	mov	r22, r15
     d1e:	47 2d       	mov	r20, r7
     d20:	29 2d       	mov	r18, r9
     d22:	0f 2e       	mov	r0, r31
     d24:	fe e0       	ldi	r31, 0x0E	; 14
     d26:	ef 2e       	mov	r14, r31
     d28:	f0 2d       	mov	r31, r0
     d2a:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     d2e:	af ec       	ldi	r26, 0xCF	; 207
     d30:	b7 e0       	ldi	r27, 0x07	; 7
     d32:	11 97       	sbiw	r26, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <LCD_vInit+0x222>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <LCD_vInit+0x228>
     d38:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     d3a:	81 2f       	mov	r24, r17
     d3c:	6f 2d       	mov	r22, r15
     d3e:	47 2d       	mov	r20, r7
     d40:	29 2d       	mov	r18, r9
     d42:	ee 24       	eor	r14, r14
     d44:	e3 94       	inc	r14
     d46:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     d4a:	8f e1       	ldi	r24, 0x1F	; 31
     d4c:	9e e4       	ldi	r25, 0x4E	; 78
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <LCD_vInit+0x23e>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <LCD_vInit+0x244>
     d54:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     d56:	81 2f       	mov	r24, r17
     d58:	6f 2d       	mov	r22, r15
     d5a:	47 2d       	mov	r20, r7
     d5c:	29 2d       	mov	r18, r9
     d5e:	0f 2e       	mov	r0, r31
     d60:	f6 e0       	ldi	r31, 0x06	; 6
     d62:	ef 2e       	mov	r14, r31
     d64:	f0 2d       	mov	r31, r0
     d66:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     d6a:	af ec       	ldi	r26, 0xCF	; 207
     d6c:	b7 e0       	ldi	r27, 0x07	; 7
     d6e:	11 97       	sbiw	r26, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <LCD_vInit+0x25e>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <LCD_vInit+0x264>
     d74:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	bf 90       	pop	r11
     d88:	af 90       	pop	r10
     d8a:	9f 90       	pop	r9
     d8c:	8f 90       	pop	r8
     d8e:	7f 90       	pop	r7
     d90:	08 95       	ret

00000d92 <LCD_clear_screen>:
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
}

void LCD_clear_screen(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin){
     d92:	af 92       	push	r10
     d94:	cf 92       	push	r12
     d96:	ef 92       	push	r14
     d98:	0f 93       	push	r16
     d9a:	9e 2d       	mov	r25, r14
     d9c:	ac 2c       	mov	r10, r12
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     d9e:	ee 24       	eor	r14, r14
     da0:	e3 94       	inc	r14
     da2:	c9 2e       	mov	r12, r25
     da4:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     da8:	8f e1       	ldi	r24, 0x1F	; 31
     daa:	9e e4       	ldi	r25, 0x4E	; 78
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <LCD_clear_screen+0x1a>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <LCD_clear_screen+0x20>
     db2:	00 00       	nop
	_delay_ms(10);
}
     db4:	0f 91       	pop	r16
     db6:	ef 90       	pop	r14
     db8:	cf 90       	pop	r12
     dba:	af 90       	pop	r10
     dbc:	08 95       	ret

00000dbe <LCD_Move_Cursor>:

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
     dbe:	8f 92       	push	r8
     dc0:	af 92       	push	r10
     dc2:	cf 92       	push	r12
     dc4:	ef 92       	push	r14
     dc6:	0f 93       	push	r16
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	3e 2d       	mov	r19, r14
     dd2:	9c 2d       	mov	r25, r12
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
     dd4:	7a 2d       	mov	r23, r10
     dd6:	71 50       	subi	r23, 0x01	; 1
     dd8:	73 30       	cpi	r23, 0x03	; 3
     dda:	88 f4       	brcc	.+34     	; 0xdfe <LCD_Move_Cursor+0x40>
     ddc:	70 e1       	ldi	r23, 0x10	; 16
     dde:	78 15       	cp	r23, r8
     de0:	80 f0       	brcs	.+32     	; 0xe02 <LCD_Move_Cursor+0x44>
     de2:	88 20       	and	r8, r8
     de4:	81 f0       	breq	.+32     	; 0xe06 <LCD_Move_Cursor+0x48>
		data = 0x80;
	}else if (1 == line ){
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	a7 16       	cp	r10, r23
     dea:	19 f4       	brne	.+6      	; 0xdf2 <LCD_Move_Cursor+0x34>
		data = 0x80 + (position - 1);         
     dec:	58 2d       	mov	r21, r8
     dee:	51 58       	subi	r21, 0x81	; 129
     df0:	0b c0       	rjmp	.+22     	; 0xe08 <LCD_Move_Cursor+0x4a>
	}else if (2 == line){
     df2:	72 e0       	ldi	r23, 0x02	; 2
     df4:	a7 16       	cp	r10, r23
     df6:	41 f4       	brne	.+16     	; 0xe08 <LCD_Move_Cursor+0x4a>
		data = 0xC0 + (position - 1);  
     df8:	58 2d       	mov	r21, r8
     dfa:	51 54       	subi	r21, 0x41	; 65
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <LCD_Move_Cursor+0x4a>
}

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
		data = 0x80;
     dfe:	50 e8       	ldi	r21, 0x80	; 128
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <LCD_Move_Cursor+0x4a>
     e02:	50 e8       	ldi	r21, 0x80	; 128
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <LCD_Move_Cursor+0x4a>
     e06:	50 e8       	ldi	r21, 0x80	; 128
	}else if (1 == line ){
		data = 0x80 + (position - 1);         
	}else if (2 == line){
		data = 0xC0 + (position - 1);  
	}
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,data,EN_port,EN_pin);
     e08:	e5 2e       	mov	r14, r21
     e0a:	c3 2e       	mov	r12, r19
     e0c:	a9 2e       	mov	r10, r25
     e0e:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_vsend_cmd>
     e12:	8f ec       	ldi	r24, 0xCF	; 207
     e14:	97 e0       	ldi	r25, 0x07	; 7
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <LCD_Move_Cursor+0x58>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <LCD_Move_Cursor+0x5e>
     e1c:	00 00       	nop
	_delay_ms(1);
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	0f 91       	pop	r16
     e24:	ef 90       	pop	r14
     e26:	cf 90       	pop	r12
     e28:	af 90       	pop	r10
     e2a:	8f 90       	pop	r8
     e2c:	08 95       	ret

00000e2e <LCD_vsend_char>:

void LCD_vsend_char(u8 Mood , u8 Nibble,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 data){
     e2e:	af 92       	push	r10
     e30:	cf 92       	push	r12
     e32:	ef 92       	push	r14
     e34:	0f 93       	push	r16
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	c4 2f       	mov	r28, r20
     e3c:	d2 2f       	mov	r29, r18
	if (1==Mood){
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	a1 f4       	brne	.+40     	; 0xe6a <LCD_vsend_char+0x3c>
		GPIO_vwrite_PORT(port,data);
     e42:	84 2f       	mov	r24, r20
     e44:	6a 2d       	mov	r22, r10
     e46:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e4a:	8d 2f       	mov	r24, r29
     e4c:	60 2f       	mov	r22, r16
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     e54:	8e 2d       	mov	r24, r14
     e56:	6c 2d       	mov	r22, r12
     e58:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
     e5c:	8f ec       	ldi	r24, 0xCF	; 207
     e5e:	97 e0       	ldi	r25, 0x07	; 7
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <LCD_vsend_char+0x32>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <LCD_vsend_char+0x38>
     e66:	00 00       	nop
     e68:	47 c0       	rjmp	.+142    	; 0xef8 <LCD_vsend_char+0xca>
		_delay_ms(1);
	}else{
		if (1==Nibble){
     e6a:	61 30       	cpi	r22, 0x01	; 1
     e6c:	19 f5       	brne	.+70     	; 0xeb4 <LCD_vsend_char+0x86>
			GPIO_High_Nibble_vwrite(port,data>>4);
     e6e:	6a 2d       	mov	r22, r10
     e70:	62 95       	swap	r22
     e72:	6f 70       	andi	r22, 0x0F	; 15
     e74:	84 2f       	mov	r24, r20
     e76:	0e 94 00 04 	call	0x800	; 0x800 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e7a:	8d 2f       	mov	r24, r29
     e7c:	60 2f       	mov	r22, r16
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e84:	8e 2d       	mov	r24, r14
     e86:	6c 2d       	mov	r22, r12
     e88:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,data);
     e8c:	8c 2f       	mov	r24, r28
     e8e:	6a 2d       	mov	r22, r10
     e90:	0e 94 00 04 	call	0x800	; 0x800 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e94:	8d 2f       	mov	r24, r29
     e96:	60 2f       	mov	r22, r16
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e9e:	8e 2d       	mov	r24, r14
     ea0:	6c 2d       	mov	r22, r12
     ea2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
     ea6:	8f ec       	ldi	r24, 0xCF	; 207
     ea8:	97 e0       	ldi	r25, 0x07	; 7
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <LCD_vsend_char+0x7c>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <LCD_vsend_char+0x82>
     eb0:	00 00       	nop
     eb2:	22 c0       	rjmp	.+68     	; 0xef8 <LCD_vsend_char+0xca>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,data>>4);
     eb4:	6a 2d       	mov	r22, r10
     eb6:	62 95       	swap	r22
     eb8:	6f 70       	andi	r22, 0x0F	; 15
     eba:	84 2f       	mov	r24, r20
     ebc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     ec0:	8d 2f       	mov	r24, r29
     ec2:	60 2f       	mov	r22, r16
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     eca:	8e 2d       	mov	r24, r14
     ecc:	6c 2d       	mov	r22, r12
     ece:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,data);
     ed2:	8c 2f       	mov	r24, r28
     ed4:	6a 2d       	mov	r22, r10
     ed6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     eda:	8d 2f       	mov	r24, r29
     edc:	60 2f       	mov	r22, r16
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     ee4:	8e 2d       	mov	r24, r14
     ee6:	6c 2d       	mov	r22, r12
     ee8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <send_falling_edge>
     eec:	8f ec       	ldi	r24, 0xCF	; 207
     eee:	97 e0       	ldi	r25, 0x07	; 7
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <LCD_vsend_char+0xc2>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <LCD_vsend_char+0xc8>
     ef6:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	0f 91       	pop	r16
     efe:	ef 90       	pop	r14
     f00:	cf 90       	pop	r12
     f02:	af 90       	pop	r10
     f04:	08 95       	ret

00000f06 <LCD_vsend_string>:
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	68 2e       	mov	r6, r24
     f24:	76 2e       	mov	r7, r22
     f26:	84 2e       	mov	r8, r20
     f28:	92 2e       	mov	r9, r18
     f2a:	d0 2e       	mov	r13, r16
     f2c:	fe 2c       	mov	r15, r14
     f2e:	1c 2d       	mov	r17, r12
     f30:	e5 01       	movw	r28, r10
	while((*data)!='\0'){
     f32:	a8 80       	ld	r10, Y
     f34:	aa 20       	and	r10, r10
     f36:	69 f0       	breq	.+26     	; 0xf52 <LCD_vsend_string+0x4c>
			_delay_ms(1);
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     f38:	21 96       	adiw	r28, 0x01	; 1
	while((*data)!='\0'){
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
     f3a:	86 2d       	mov	r24, r6
     f3c:	67 2d       	mov	r22, r7
     f3e:	48 2d       	mov	r20, r8
     f40:	29 2d       	mov	r18, r9
     f42:	0d 2d       	mov	r16, r13
     f44:	ef 2c       	mov	r14, r15
     f46:	c1 2e       	mov	r12, r17
     f48:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_vsend_char>
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
	while((*data)!='\0'){
     f4c:	a9 90       	ld	r10, Y+
     f4e:	aa 20       	and	r10, r10
     f50:	a1 f7       	brne	.-24     	; 0xf3a <LCD_vsend_string+0x34>
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
		data++;
	}
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
     f6a:	7f 90       	pop	r7
     f6c:	6f 90       	pop	r6
     f6e:	08 95       	ret

00000f70 <LCD_display_number>:

void LCD_display_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u32 Number){
     f70:	7f 92       	push	r7
     f72:	8f 92       	push	r8
     f74:	9f 92       	push	r9
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	27 97       	sbiw	r28, 0x07	; 7
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	18 2f       	mov	r17, r24
     f9c:	f6 2e       	mov	r15, r22
     f9e:	d4 2e       	mov	r13, r20
     fa0:	72 2e       	mov	r7, r18
     fa2:	d5 01       	movw	r26, r10
     fa4:	c4 01       	movw	r24, r8
	u8 str[7]; 
	sprintf(str,"%d",Number);
     fa6:	2d b7       	in	r18, 0x3d	; 61
     fa8:	3e b7       	in	r19, 0x3e	; 62
     faa:	28 50       	subi	r18, 0x08	; 8
     fac:	30 40       	sbci	r19, 0x00	; 0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	3e bf       	out	0x3e, r19	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	2d bf       	out	0x3d, r18	; 61
     fb8:	4d b7       	in	r20, 0x3d	; 61
     fba:	5e b7       	in	r21, 0x3e	; 62
     fbc:	4f 5f       	subi	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	5e 01       	movw	r10, r28
     fc2:	08 94       	sec
     fc4:	a1 1c       	adc	r10, r1
     fc6:	b1 1c       	adc	r11, r1
     fc8:	ed b7       	in	r30, 0x3d	; 61
     fca:	fe b7       	in	r31, 0x3e	; 62
     fcc:	b2 82       	std	Z+2, r11	; 0x02
     fce:	a1 82       	std	Z+1, r10	; 0x01
     fd0:	20 e7       	ldi	r18, 0x70	; 112
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	fa 01       	movw	r30, r20
     fd6:	33 83       	std	Z+3, r19	; 0x03
     fd8:	22 83       	std	Z+2, r18	; 0x02
     fda:	84 83       	std	Z+4, r24	; 0x04
     fdc:	95 83       	std	Z+5, r25	; 0x05
     fde:	a6 83       	std	Z+6, r26	; 0x06
     fe0:	b7 83       	std	Z+7, r27	; 0x07
     fe2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
     fe6:	2d b7       	in	r18, 0x3d	; 61
     fe8:	3e b7       	in	r19, 0x3e	; 62
     fea:	28 5f       	subi	r18, 0xF8	; 248
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	3e bf       	out	0x3e, r19	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	2d bf       	out	0x3d, r18	; 61
     ff8:	81 2f       	mov	r24, r17
     ffa:	6f 2d       	mov	r22, r15
     ffc:	4d 2d       	mov	r20, r13
     ffe:	27 2d       	mov	r18, r7
    1000:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_vsend_string>
}
    1004:	27 96       	adiw	r28, 0x07	; 7
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	bf 90       	pop	r11
    1022:	af 90       	pop	r10
    1024:	9f 90       	pop	r9
    1026:	8f 90       	pop	r8
    1028:	7f 90       	pop	r7
    102a:	08 95       	ret

0000102c <LCD_display_real_number>:

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
    102c:	2f 92       	push	r2
    102e:	3f 92       	push	r3
    1030:	4f 92       	push	r4
    1032:	5f 92       	push	r5
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	61 97       	sbiw	r28, 0x11	; 17
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	18 2f       	mov	r17, r24
    1062:	f6 2e       	mov	r15, r22
    1064:	d4 2e       	mov	r13, r20
    1066:	29 8b       	std	Y+17, r18	; 0x11
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    1068:	c5 01       	movw	r24, r10
    106a:	b4 01       	movw	r22, r8
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	0e 94 38 0b 	call	0x1670	; 0x1670 <__cmpsf2>
    1076:	88 23       	and	r24, r24
    1078:	6c f4       	brge	.+26     	; 0x1094 <LCD_display_real_number+0x68>
	f32 tmpval = (Number < 0) ? -Number : Number;
    107a:	24 01       	movw	r4, r8
    107c:	35 01       	movw	r6, r10
    107e:	77 fa       	bst	r7, 7
    1080:	70 94       	com	r7
    1082:	77 f8       	bld	r7, 7
    1084:	70 94       	com	r7
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
}

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    1086:	0f 2e       	mov	r0, r31
    1088:	f3 e7       	ldi	r31, 0x73	; 115
    108a:	2f 2e       	mov	r2, r31
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	3f 2e       	mov	r3, r31
    1090:	f0 2d       	mov	r31, r0
    1092:	08 c0       	rjmp	.+16     	; 0x10a4 <LCD_display_real_number+0x78>
	f32 tmpval = (Number < 0) ? -Number : Number;
    1094:	24 01       	movw	r4, r8
    1096:	35 01       	movw	r6, r10
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
}

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    1098:	0f 2e       	mov	r0, r31
    109a:	f5 e7       	ldi	r31, 0x75	; 117
    109c:	2f 2e       	mov	r2, r31
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	3f 2e       	mov	r3, r31
    10a2:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
    10a4:	c3 01       	movw	r24, r6
    10a6:	b2 01       	movw	r22, r4
    10a8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fixsfsi>
	f32 tmpFrac = tmpval - tmpInt1;
	s32 tmpInt2 = tmpFrac * 10000;
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    10ac:	2d b7       	in	r18, 0x3d	; 61
    10ae:	3e b7       	in	r19, 0x3e	; 62
    10b0:	2e 50       	subi	r18, 0x0E	; 14
    10b2:	30 40       	sbci	r19, 0x00	; 0
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	3e bf       	out	0x3e, r19	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	2d bf       	out	0x3d, r18	; 61
    10be:	8d b6       	in	r8, 0x3d	; 61
    10c0:	9e b6       	in	r9, 0x3e	; 62
    10c2:	08 94       	sec
    10c4:	81 1c       	adc	r8, r1
    10c6:	91 1c       	adc	r9, r1
    10c8:	5e 01       	movw	r10, r28
    10ca:	08 94       	sec
    10cc:	a1 1c       	adc	r10, r1
    10ce:	b1 1c       	adc	r11, r1
    10d0:	ed b7       	in	r30, 0x3d	; 61
    10d2:	fe b7       	in	r31, 0x3e	; 62
    10d4:	b2 82       	std	Z+2, r11	; 0x02
    10d6:	a1 82       	std	Z+1, r10	; 0x01
    10d8:	26 e7       	ldi	r18, 0x76	; 118
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	f4 01       	movw	r30, r8
    10de:	33 83       	std	Z+3, r19	; 0x03
    10e0:	22 83       	std	Z+2, r18	; 0x02
    10e2:	35 82       	std	Z+5, r3	; 0x05
    10e4:	24 82       	std	Z+4, r2	; 0x04
    10e6:	66 83       	std	Z+6, r22	; 0x06
    10e8:	77 83       	std	Z+7, r23	; 0x07
    10ea:	80 87       	std	Z+8, r24	; 0x08
    10ec:	91 87       	std	Z+9, r25	; 0x09
void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
	f32 tmpFrac = tmpval - tmpInt1;
    10ee:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__floatsisf>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	c3 01       	movw	r24, r6
    10f8:	b2 01       	movw	r22, r4
    10fa:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__subsf3>
	s32 tmpInt2 = tmpFrac * 10000;
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e4       	ldi	r19, 0x40	; 64
    1102:	4c e1       	ldi	r20, 0x1C	; 28
    1104:	56 e4       	ldi	r21, 0x46	; 70
    1106:	0e 94 87 0c 	call	0x190e	; 0x190e <__mulsf3>
    110a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fixsfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    1112:	f4 01       	movw	r30, r8
    1114:	82 87       	std	Z+10, r24	; 0x0a
    1116:	93 87       	std	Z+11, r25	; 0x0b
    1118:	a4 87       	std	Z+12, r26	; 0x0c
    111a:	b5 87       	std	Z+13, r27	; 0x0d
    111c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
    1120:	2d b7       	in	r18, 0x3d	; 61
    1122:	3e b7       	in	r19, 0x3e	; 62
    1124:	22 5f       	subi	r18, 0xF2	; 242
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	3e bf       	out	0x3e, r19	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	2d bf       	out	0x3d, r18	; 61
    1132:	81 2f       	mov	r24, r17
    1134:	6f 2d       	mov	r22, r15
    1136:	4d 2d       	mov	r20, r13
    1138:	29 89       	ldd	r18, Y+17	; 0x11
    113a:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_vsend_string>
    113e:	61 96       	adiw	r28, 0x11	; 17
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	6f 90       	pop	r6
    1166:	5f 90       	pop	r5
    1168:	4f 90       	pop	r4
    116a:	3f 90       	pop	r3
    116c:	2f 90       	pop	r2
    116e:	08 95       	ret

00001170 <LDR_sensor_vInit>:
 * LDR_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LDR_ECU.h"
void LDR_sensor_vInit(u8 pin){
    1170:	cf 93       	push	r28
    1172:	c8 2f       	mov	r28, r24
	ADC_vInit();
    1174:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	switch(pin){		
    1178:	c3 30       	cpi	r28, 0x03	; 3
    117a:	11 f1       	breq	.+68     	; 0x11c0 <LDR_sensor_vInit+0x50>
    117c:	c4 30       	cpi	r28, 0x04	; 4
    117e:	28 f4       	brcc	.+10     	; 0x118a <LDR_sensor_vInit+0x1a>
    1180:	c1 30       	cpi	r28, 0x01	; 1
    1182:	91 f0       	breq	.+36     	; 0x11a8 <LDR_sensor_vInit+0x38>
    1184:	c2 30       	cpi	r28, 0x02	; 2
    1186:	b0 f4       	brcc	.+44     	; 0x11b4 <LDR_sensor_vInit+0x44>
    1188:	09 c0       	rjmp	.+18     	; 0x119c <LDR_sensor_vInit+0x2c>
    118a:	c5 30       	cpi	r28, 0x05	; 5
    118c:	29 f1       	breq	.+74     	; 0x11d8 <LDR_sensor_vInit+0x68>
    118e:	c5 30       	cpi	r28, 0x05	; 5
    1190:	e8 f0       	brcs	.+58     	; 0x11cc <LDR_sensor_vInit+0x5c>
    1192:	c6 30       	cpi	r28, 0x06	; 6
    1194:	39 f1       	breq	.+78     	; 0x11e4 <LDR_sensor_vInit+0x74>
    1196:	c7 30       	cpi	r28, 0x07	; 7
    1198:	81 f5       	brne	.+96     	; 0x11fa <LDR_sensor_vInit+0x8a>
    119a:	2a c0       	rjmp	.+84     	; 0x11f0 <LDR_sensor_vInit+0x80>
		case 0 :
		GPIO_vsetPIN_DIR('A',0,0);  
    119c:	81 e4       	ldi	r24, 0x41	; 65
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11a6:	29 c0       	rjmp	.+82     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 1 :
		GPIO_vsetPIN_DIR('A',1,0);
    11a8:	81 e4       	ldi	r24, 0x41	; 65
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11b2:	23 c0       	rjmp	.+70     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 2 :
		GPIO_vsetPIN_DIR('A',2,0);
    11b4:	81 e4       	ldi	r24, 0x41	; 65
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11be:	1d c0       	rjmp	.+58     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 3 :
		GPIO_vsetPIN_DIR('A',3,0);
    11c0:	81 e4       	ldi	r24, 0x41	; 65
    11c2:	63 e0       	ldi	r22, 0x03	; 3
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 4 :
		GPIO_vsetPIN_DIR('A',4,0);
    11cc:	81 e4       	ldi	r24, 0x41	; 65
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 5 :
		GPIO_vsetPIN_DIR('A',5,0);
    11d8:	81 e4       	ldi	r24, 0x41	; 65
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 6 :
		GPIO_vsetPIN_DIR('A',6,0);
    11e4:	81 e4       	ldi	r24, 0x41	; 65
    11e6:	66 e0       	ldi	r22, 0x06	; 6
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <LDR_sensor_vInit+0x8a>
		case 7 :
		GPIO_vsetPIN_DIR('A',7,0);
    11f0:	81 e4       	ldi	r24, 0x41	; 65
    11f2:	67 e0       	ldi	r22, 0x07	; 7
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
		break;
	}
}
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <LDR_sensor_u16Read>:

u16 LDR_sensor_u16Read(u8 pin){
	u16 intensity ;
	
	intensity = ADC_u16Read_Single_Endded(pin);
    11fe:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_u16Read_Single_Endded>
	
	return intensity;
    1202:	08 95       	ret

00001204 <LED_vintialize>:
 * It is in ECU abstraction layer 
 */

#include "GPIO_MCAL.h"
void LED_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
}
    120a:	08 95       	ret

0000120c <LED_vTurnon>:
void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
}
    1212:	08 95       	ret

00001214 <LED_vTurnoff>:
void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
}
    121a:	08 95       	ret

0000121c <LED_vtoggle>:
void LED_vtoggle(u8 port, u8 pin){
	GPIO_vtoggle_PIN(port,pin);
    121c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <GPIO_vtoggle_PIN>
    1220:	08 95       	ret

00001222 <PIR_Init>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "PIR_ECU.h"
void PIR_Init(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin,0);
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
}
    1228:	08 95       	ret

0000122a <PIR_u8Read>:


u8 PIR_u8Read(u8 port, u8 pin){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
    122a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <GPIO_u8read_PIN>

	return x;
    122e:	08 95       	ret

00001230 <Relay_vintialize>:
 *  Author: Mahmoud Ayman
 */ 
#include "Relay_ECU.h"

void Relay_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
}
    1236:	08 95       	ret

00001238 <Relay_vTurnon>:

void Relay_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
}
    123e:	08 95       	ret

00001240 <Relay_vTurnoff>:

void Relay_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_vwrite_PIN>
    1246:	08 95       	ret

00001248 <Seven_Segment_Init>:
#define  Eight_bit 1
#define  High_Nibble 1
#define  LOW_Nibble 0

void Seven_Segment_Init(u8 Mode,u8 port ,u8 Nibble){
	if (0 == Mode){
    1248:	88 23       	and	r24, r24
    124a:	71 f4       	brne	.+28     	; 0x1268 <Seven_Segment_Init+0x20>
		if (0==Nibble){
    124c:	44 23       	and	r20, r20
    124e:	29 f4       	brne	.+10     	; 0x125a <Seven_Segment_Init+0x12>
			GPIO_Low_Nibble_vset_dir(port,1);
    1250:	86 2f       	mov	r24, r22
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	0e 94 35 04 	call	0x86a	; 0x86a <GPIO_Low_Nibble_vset_dir>
    1258:	08 95       	ret
		}else if (1==Nibble){
    125a:	41 30       	cpi	r20, 0x01	; 1
    125c:	59 f4       	brne	.+22     	; 0x1274 <Seven_Segment_Init+0x2c>
			GPIO_High_Nibble_vset_dir(port,1);
    125e:	86 2f       	mov	r24, r22
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <GPIO_High_Nibble_vset_dir>
    1266:	08 95       	ret
		}
		else{
			
		}
	}else if (1==Mode){
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	21 f4       	brne	.+8      	; 0x1274 <Seven_Segment_Init+0x2c>
		GPIO_vset_PORT_DIR(port,0xff);
    126c:	86 2f       	mov	r24, r22
    126e:	6f ef       	ldi	r22, 0xFF	; 255
    1270:	0e 94 42 03 	call	0x684	; 0x684 <GPIO_vset_PORT_DIR>
    1274:	08 95       	ret

00001276 <Seven_segment_Display>:
		
	}
}


void Seven_segment_Display(u8 Mode,u8 Nibble , u8 port, u8 value){
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	2a 97       	sbiw	r28, 0x0a	; 10
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
	if (0 == Mode){
    128a:	88 23       	and	r24, r24
    128c:	71 f4       	brne	.+28     	; 0x12aa <Seven_segment_Display+0x34>
		if (0==Nibble){
    128e:	66 23       	and	r22, r22
    1290:	29 f4       	brne	.+10     	; 0x129c <Seven_segment_Display+0x26>
			GPIO_Low_Nibble_vwrite(port,value);
    1292:	84 2f       	mov	r24, r20
    1294:	62 2f       	mov	r22, r18
    1296:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_Low_Nibble_vwrite>
    129a:	2c c0       	rjmp	.+88     	; 0x12f4 <Seven_segment_Display+0x7e>
		}else if (1==Nibble){
    129c:	61 30       	cpi	r22, 0x01	; 1
    129e:	51 f5       	brne	.+84     	; 0x12f4 <Seven_segment_Display+0x7e>
			GPIO_High_Nibble_vwrite(port,value);
    12a0:	84 2f       	mov	r24, r20
    12a2:	62 2f       	mov	r22, r18
    12a4:	0e 94 00 04 	call	0x800	; 0x800 <GPIO_High_Nibble_vwrite>
    12a8:	25 c0       	rjmp	.+74     	; 0x12f4 <Seven_segment_Display+0x7e>
		}
		else{
			
		}
	}else if (1==Mode){
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	19 f5       	brne	.+70     	; 0x12f4 <Seven_segment_Display+0x7e>
		if (value >=0 && value <=9)
    12ae:	2a 30       	cpi	r18, 0x0A	; 10
    12b0:	88 f4       	brcc	.+34     	; 0x12d4 <Seven_segment_Display+0x5e>
		{
			u8 arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    12b2:	de 01       	movw	r26, r28
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	e0 e8       	ldi	r30, 0x80	; 128
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a e0       	ldi	r24, 0x0A	; 10
    12bc:	01 90       	ld	r0, Z+
    12be:	0d 92       	st	X+, r0
    12c0:	81 50       	subi	r24, 0x01	; 1
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <Seven_segment_Display+0x46>
			GPIO_vwrite_PORT(port,arr[value]);
    12c4:	fe 01       	movw	r30, r28
    12c6:	e2 0f       	add	r30, r18
    12c8:	f1 1d       	adc	r31, r1
    12ca:	84 2f       	mov	r24, r20
    12cc:	61 81       	ldd	r22, Z+1	; 0x01
    12ce:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GPIO_vwrite_PORT>
    12d2:	10 c0       	rjmp	.+32     	; 0x12f4 <Seven_segment_Display+0x7e>
			#define B 1
			#define C 2
			#define D 3
			#define E 4
			#define F 5
			u8 arr1[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
    12d4:	de 01       	movw	r26, r28
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	ea e8       	ldi	r30, 0x8A	; 138
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	86 e0       	ldi	r24, 0x06	; 6
    12de:	01 90       	ld	r0, Z+
    12e0:	0d 92       	st	X+, r0
    12e2:	81 50       	subi	r24, 0x01	; 1
    12e4:	e1 f7       	brne	.-8      	; 0x12de <Seven_segment_Display+0x68>
			GPIO_vwrite_PORT(port,arr1[value]);
    12e6:	fe 01       	movw	r30, r28
    12e8:	e2 0f       	add	r30, r18
    12ea:	f1 1d       	adc	r31, r1
    12ec:	84 2f       	mov	r24, r20
    12ee:	61 81       	ldd	r22, Z+1	; 0x01
    12f0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GPIO_vwrite_PORT>
		}
	}
	else{
		
	}
    12f4:	2a 96       	adiw	r28, 0x0a	; 10
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <temp_sensor_vInit>:
 *  Author: Mahmoud Ayman
 */ 

#include "Temperature_Sensor_ECU.h"
#define Vref 2.56
void temp_sensor_vInit(u8 pin){
    1306:	cf 93       	push	r28
    1308:	c8 2f       	mov	r28, r24
	ADC_vInit();
    130a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	switch(pin){
    130e:	c3 30       	cpi	r28, 0x03	; 3
    1310:	11 f1       	breq	.+68     	; 0x1356 <temp_sensor_vInit+0x50>
    1312:	c4 30       	cpi	r28, 0x04	; 4
    1314:	28 f4       	brcc	.+10     	; 0x1320 <temp_sensor_vInit+0x1a>
    1316:	c1 30       	cpi	r28, 0x01	; 1
    1318:	91 f0       	breq	.+36     	; 0x133e <temp_sensor_vInit+0x38>
    131a:	c2 30       	cpi	r28, 0x02	; 2
    131c:	b0 f4       	brcc	.+44     	; 0x134a <temp_sensor_vInit+0x44>
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <temp_sensor_vInit+0x2c>
    1320:	c5 30       	cpi	r28, 0x05	; 5
    1322:	29 f1       	breq	.+74     	; 0x136e <temp_sensor_vInit+0x68>
    1324:	c5 30       	cpi	r28, 0x05	; 5
    1326:	e8 f0       	brcs	.+58     	; 0x1362 <temp_sensor_vInit+0x5c>
    1328:	c6 30       	cpi	r28, 0x06	; 6
    132a:	39 f1       	breq	.+78     	; 0x137a <temp_sensor_vInit+0x74>
    132c:	c7 30       	cpi	r28, 0x07	; 7
    132e:	81 f5       	brne	.+96     	; 0x1390 <temp_sensor_vInit+0x8a>
    1330:	2a c0       	rjmp	.+84     	; 0x1386 <temp_sensor_vInit+0x80>
		case 0 :
			GPIO_vsetPIN_DIR('A',0,0);
    1332:	81 e4       	ldi	r24, 0x41	; 65
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    133c:	29 c0       	rjmp	.+82     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 1 :
			GPIO_vsetPIN_DIR('A',1,0);
    133e:	81 e4       	ldi	r24, 0x41	; 65
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    1348:	23 c0       	rjmp	.+70     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 2 :
			GPIO_vsetPIN_DIR('A',2,0);
    134a:	81 e4       	ldi	r24, 0x41	; 65
    134c:	62 e0       	ldi	r22, 0x02	; 2
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    1354:	1d c0       	rjmp	.+58     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 3 :
			GPIO_vsetPIN_DIR('A',3,0);
    1356:	81 e4       	ldi	r24, 0x41	; 65
    1358:	63 e0       	ldi	r22, 0x03	; 3
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    1360:	17 c0       	rjmp	.+46     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 4 :
			GPIO_vsetPIN_DIR('A',4,0);
    1362:	81 e4       	ldi	r24, 0x41	; 65
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    136c:	11 c0       	rjmp	.+34     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 5 :
			GPIO_vsetPIN_DIR('A',5,0);
    136e:	81 e4       	ldi	r24, 0x41	; 65
    1370:	65 e0       	ldi	r22, 0x05	; 5
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    1378:	0b c0       	rjmp	.+22     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 6 :
			GPIO_vsetPIN_DIR('A',6,0);
    137a:	81 e4       	ldi	r24, 0x41	; 65
    137c:	66 e0       	ldi	r22, 0x06	; 6
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <temp_sensor_vInit+0x8a>
		case 7 :
			GPIO_vsetPIN_DIR('A',7,0);
    1386:	81 e4       	ldi	r24, 0x41	; 65
    1388:	67 e0       	ldi	r22, 0x07	; 7
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GPIO_vsetPIN_DIR>
			break;
	}
	
}
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <temp_sensor_u16Read>:

u16 temp_sensor_u16Read(u8 pin){
	u16 temperatue ;
	u16 v;
	v = ADC_u16Read_Single_Endded(pin);
    1394:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_u16Read_Single_Endded>
	temperatue = (v*Vref*1000)/(1024*10);
    1398:	bc 01       	movw	r22, r24
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__floatunsisf>
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	37 ed       	ldi	r19, 0xD7	; 215
    13a6:	43 e2       	ldi	r20, 0x23	; 35
    13a8:	50 e4       	ldi	r21, 0x40	; 64
    13aa:	0e 94 87 0c 	call	0x190e	; 0x190e <__mulsf3>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a e7       	ldi	r20, 0x7A	; 122
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	0e 94 87 0c 	call	0x190e	; 0x190e <__mulsf3>
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	56 e4       	ldi	r21, 0x46	; 70
    13c2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__divsf3>
    13c6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fixunssfsi>
	return temperatue;
    13ca:	86 2f       	mov	r24, r22
    13cc:	97 2f       	mov	r25, r23
    13ce:	08 95       	ret

000013d0 <TMR0_Get_Configuration>:
#include "Timer_driver_MCAL.h"
#include "Data_type.h"
static void (*Ptr_To_OVFI)(void);
static void (*Ptr_To_OCMI)(void);
void TMR0_Get_Configuration(u8 waveform , u8 TMR0_OVFI , u8 TMR0_CTCI , u8 clk_Selcet){
	confiuration.Mode = waveform ;
    13d0:	80 93 96 00 	sts	0x0096, r24
	confiuration.Prescalar = clk_Selcet;
    13d4:	20 93 99 00 	sts	0x0099, r18
	confiuration.TMR0_OVF_Interrupt = TMR0_OVFI;
    13d8:	60 93 97 00 	sts	0x0097, r22
	confiuration.TMR0_CTC_Interrupt = TMR0_CTCI;
    13dc:	40 93 98 00 	sts	0x0098, r20
}
    13e0:	08 95       	ret

000013e2 <TMR0_vInit>:

void TMR0_vInit(void){
	/*********************Adjust Mode*****************************/
		if (confiuration.Mode==NORMAL_Mode){
    13e2:	80 91 96 00 	lds	r24, 0x0096
    13e6:	88 23       	and	r24, r24
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <TMR0_vInit+0x16>
			CLR_BIT(myTCCR0,myWGM00);
    13ea:	83 b7       	in	r24, 0x33	; 51
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(myTCCR0,myWGM01);
    13f0:	83 b7       	in	r24, 0x33	; 51
    13f2:	87 7f       	andi	r24, 0xF7	; 247
    13f4:	83 bf       	out	0x33, r24	; 51
    13f6:	23 c0       	rjmp	.+70     	; 0x143e <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==CTC_Mode){
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	39 f4       	brne	.+14     	; 0x140a <TMR0_vInit+0x28>
			CLR_BIT(myTCCR0,myWGM00);
    13fc:	83 b7       	in	r24, 0x33	; 51
    13fe:	8f 7b       	andi	r24, 0xBF	; 191
    1400:	83 bf       	out	0x33, r24	; 51
			SET_BIT(myTCCR0,myWGM01);
    1402:	83 b7       	in	r24, 0x33	; 51
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	83 bf       	out	0x33, r24	; 51
    1408:	1a c0       	rjmp	.+52     	; 0x143e <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==OCM_Non_PWM_Mode){
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	39 f4       	brne	.+14     	; 0x141c <TMR0_vInit+0x3a>
			CLR_BIT(myTCCR0,myWGM00);
    140e:	83 b7       	in	r24, 0x33	; 51
    1410:	8f 7b       	andi	r24, 0xBF	; 191
    1412:	83 bf       	out	0x33, r24	; 51
			SET_BIT(myTCCR0,myWGM01);
    1414:	83 b7       	in	r24, 0x33	; 51
    1416:	88 60       	ori	r24, 0x08	; 8
    1418:	83 bf       	out	0x33, r24	; 51
    141a:	11 c0       	rjmp	.+34     	; 0x143e <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==Fast_PWM_Mode){
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	39 f4       	brne	.+14     	; 0x142e <TMR0_vInit+0x4c>
			SET_BIT(myTCCR0,myWGM00);
    1420:	83 b7       	in	r24, 0x33	; 51
    1422:	80 64       	ori	r24, 0x40	; 64
    1424:	83 bf       	out	0x33, r24	; 51
			SET_BIT(myTCCR0,myWGM01);
    1426:	83 b7       	in	r24, 0x33	; 51
    1428:	88 60       	ori	r24, 0x08	; 8
    142a:	83 bf       	out	0x33, r24	; 51
    142c:	08 c0       	rjmp	.+16     	; 0x143e <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==Phase_Correct_PWM){
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	31 f4       	brne	.+12     	; 0x143e <TMR0_vInit+0x5c>
			SET_BIT(myTCCR0,myWGM00);
    1432:	83 b7       	in	r24, 0x33	; 51
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(myTCCR0,myWGM01);
    1438:	83 b7       	in	r24, 0x33	; 51
    143a:	87 7f       	andi	r24, 0xF7	; 247
    143c:	83 bf       	out	0x33, r24	; 51
		}
	/****************************************************************/	
	/************************Adjust prescalar************************/
		myTCCR0 |= confiuration.Prescalar;    
    143e:	93 b7       	in	r25, 0x33	; 51
    1440:	80 91 99 00 	lds	r24, 0x0099
    1444:	89 2b       	or	r24, r25
    1446:	83 bf       	out	0x33, r24	; 51
	/****************************************************************/
	/*************Over flow Interrupt Enable/Disable*****************/
		if (confiuration.TMR0_OVF_Interrupt==TOIE0_enable){
    1448:	80 91 97 00 	lds	r24, 0x0097
    144c:	88 23       	and	r24, r24
    144e:	21 f4       	brne	.+8      	; 0x1458 <TMR0_vInit+0x76>
			SET_BIT(myTIMSK,myTOIE0);
    1450:	89 b7       	in	r24, 0x39	; 57
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	89 bf       	out	0x39, r24	; 57
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <TMR0_vInit+0x80>
		}else if (confiuration.TMR0_OVF_Interrupt==TOIE0_disable){
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	19 f4       	brne	.+6      	; 0x1462 <TMR0_vInit+0x80>
			CLR_BIT(myTIMSK,myTOIE0);
    145c:	89 b7       	in	r24, 0x39	; 57
    145e:	8e 7f       	andi	r24, 0xFE	; 254
    1460:	89 bf       	out	0x39, r24	; 57
		}
	/****************************************************************/
	/******************OCR0 Interrupt Enable/Disable*****************/
		if (confiuration.TMR0_CTC_Interrupt==OCIE0_enable){
    1462:	80 91 98 00 	lds	r24, 0x0098
    1466:	88 23       	and	r24, r24
    1468:	21 f4       	brne	.+8      	; 0x1472 <TMR0_vInit+0x90>
			SET_BIT(myTIMSK,myOCIE0);
    146a:	89 b7       	in	r24, 0x39	; 57
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	89 bf       	out	0x39, r24	; 57
    1470:	08 95       	ret
		}else if (confiuration.TMR0_CTC_Interrupt==OCIE0_disable){
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	19 f4       	brne	.+6      	; 0x147c <TMR0_vInit+0x9a>
			CLR_BIT(myTIMSK,myOCIE0);
    1476:	89 b7       	in	r24, 0x39	; 57
    1478:	8d 7f       	andi	r24, 0xFD	; 253
    147a:	89 bf       	out	0x39, r24	; 57
    147c:	08 95       	ret

0000147e <TMR0_Set_Compare_Value>:
		}
	/****************************************************************/
}

void TMR0_Set_Compare_Value(u8 u8Val){
	myOCR0 = u8Val;
    147e:	8c bf       	out	0x3c, r24	; 60
}
    1480:	08 95       	ret

00001482 <TMR0_Set_Counter_Value>:
void TMR0_Set_Counter_Value(u8 u8Val){
	myTCNT0 = u8Val;
    1482:	82 bf       	out	0x32, r24	; 50
}
    1484:	08 95       	ret

00001486 <TMR0_Read_count>:

u8 TMR0_Read_count(void){
	return myTCNT0;
    1486:	82 b7       	in	r24, 0x32	; 50
}
    1488:	08 95       	ret

0000148a <TMR0_COM_Non_PWM_Gen>:

/*************************************** Wave Generation*************************************/
/*Compare Output Mode , Non PWM mode */
void TMR0_COM_Non_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRB,3);
    148a:	bb 9a       	sbi	0x17, 3	; 23
	val=(duty_cycle * 256) / 100;
    148c:	38 2f       	mov	r19, r24
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	c9 01       	movw	r24, r18
    1492:	64 e6       	ldi	r22, 0x64	; 100
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodhi4>
    149a:	86 2f       	mov	r24, r22
	TMR0_Set_Compare_Value(val);
    149c:	0e 94 3f 0a 	call	0x147e	; 0x147e <TMR0_Set_Compare_Value>
	SET_BIT(myTCCR0,myCOM00);
    14a0:	83 b7       	in	r24, 0x33	; 51
    14a2:	80 61       	ori	r24, 0x10	; 16
    14a4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(myTCCR0,myCOM01);
    14a6:	83 b7       	in	r24, 0x33	; 51
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	83 bf       	out	0x33, r24	; 51
}
    14ac:	08 95       	ret

000014ae <TMR0_Fast_PWM_Gen>:

/*Fast PWM mode */
void TMR0_Fast_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRB,3);
    14ae:	bb 9a       	sbi	0x17, 3	; 23
	val=(duty_cycle * 256) / 100;
    14b0:	38 2f       	mov	r19, r24
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	c9 01       	movw	r24, r18
    14b6:	64 e6       	ldi	r22, 0x64	; 100
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodhi4>
    14be:	86 2f       	mov	r24, r22
	TMR0_Set_Compare_Value(val);
    14c0:	0e 94 3f 0a 	call	0x147e	; 0x147e <TMR0_Set_Compare_Value>
	SET_BIT(myTCCR0,myCOM00);
    14c4:	83 b7       	in	r24, 0x33	; 51
    14c6:	80 61       	ori	r24, 0x10	; 16
    14c8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(myTCCR0,myCOM01);
    14ca:	83 b7       	in	r24, 0x33	; 51
    14cc:	80 62       	ori	r24, 0x20	; 32
    14ce:	83 bf       	out	0x33, r24	; 51
}
    14d0:	08 95       	ret

000014d2 <TMR0_Phase_Correct_PWM_Gen>:
/*Phase Correct PWM mode */
void TMR0_Phase_Correct_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRB,3);
    14d2:	bb 9a       	sbi	0x17, 3	; 23
	val=(duty_cycle * 256) / 100;
    14d4:	38 2f       	mov	r19, r24
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	c9 01       	movw	r24, r18
    14da:	64 e6       	ldi	r22, 0x64	; 100
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodhi4>
    14e2:	86 2f       	mov	r24, r22
	TMR0_Set_Compare_Value(val);
    14e4:	0e 94 3f 0a 	call	0x147e	; 0x147e <TMR0_Set_Compare_Value>
	SET_BIT(myTCCR0,myCOM00);
    14e8:	83 b7       	in	r24, 0x33	; 51
    14ea:	80 61       	ori	r24, 0x10	; 16
    14ec:	83 bf       	out	0x33, r24	; 51
	SET_BIT(myTCCR0,myCOM01);
    14ee:	83 b7       	in	r24, 0x33	; 51
    14f0:	80 62       	ori	r24, 0x20	; 32
    14f2:	83 bf       	out	0x33, r24	; 51
}
    14f4:	08 95       	ret

000014f6 <callback_TMR0_Overflow_Interrupt>:
/********************************************************************************************/



void callback_TMR0_Overflow_Interrupt (void(*Ptr_to_OVI_Function)(void)){
	Ptr_To_OVFI = Ptr_to_OVI_Function ;
    14f6:	90 93 91 00 	sts	0x0091, r25
    14fa:	80 93 90 00 	sts	0x0090, r24
}
    14fe:	08 95       	ret

00001500 <callback_OCR0_Compare_Match_Interrupt>:

void callback_OCR0_Compare_Match_Interrupt(void(*Ptr_to_OCM_Function)(void)){
	Ptr_To_OCMI = Ptr_to_OCM_Function ;
    1500:	90 93 93 00 	sts	0x0093, r25
    1504:	80 93 92 00 	sts	0x0092, r24
}
    1508:	08 95       	ret

0000150a <__vector_10>:



ISR(TIMER0_COMP_vect){
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
	(*Ptr_To_OCMI)();
    152c:	e0 91 92 00 	lds	r30, 0x0092
    1530:	f0 91 93 00 	lds	r31, 0x0093
    1534:	09 95       	icall
}
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_11>:


ISR(TIMER0_OVF_vect){
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
	(*Ptr_To_OVFI)();
    157a:	e0 91 90 00 	lds	r30, 0x0090
    157e:	f0 91 91 00 	lds	r31, 0x0091
    1582:	09 95       	icall
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__subsf3>:
    15a6:	50 58       	subi	r21, 0x80	; 128

000015a8 <__addsf3>:
    15a8:	bb 27       	eor	r27, r27
    15aa:	aa 27       	eor	r26, r26
    15ac:	0e d0       	rcall	.+28     	; 0x15ca <__addsf3x>
    15ae:	75 c1       	rjmp	.+746    	; 0x189a <__fp_round>
    15b0:	66 d1       	rcall	.+716    	; 0x187e <__fp_pscA>
    15b2:	30 f0       	brcs	.+12     	; 0x15c0 <__addsf3+0x18>
    15b4:	6b d1       	rcall	.+726    	; 0x188c <__fp_pscB>
    15b6:	20 f0       	brcs	.+8      	; 0x15c0 <__addsf3+0x18>
    15b8:	31 f4       	brne	.+12     	; 0x15c6 <__addsf3+0x1e>
    15ba:	9f 3f       	cpi	r25, 0xFF	; 255
    15bc:	11 f4       	brne	.+4      	; 0x15c2 <__addsf3+0x1a>
    15be:	1e f4       	brtc	.+6      	; 0x15c6 <__addsf3+0x1e>
    15c0:	5b c1       	rjmp	.+694    	; 0x1878 <__fp_nan>
    15c2:	0e f4       	brtc	.+2      	; 0x15c6 <__addsf3+0x1e>
    15c4:	e0 95       	com	r30
    15c6:	e7 fb       	bst	r30, 7
    15c8:	51 c1       	rjmp	.+674    	; 0x186c <__fp_inf>

000015ca <__addsf3x>:
    15ca:	e9 2f       	mov	r30, r25
    15cc:	77 d1       	rcall	.+750    	; 0x18bc <__fp_split3>
    15ce:	80 f3       	brcs	.-32     	; 0x15b0 <__addsf3+0x8>
    15d0:	ba 17       	cp	r27, r26
    15d2:	62 07       	cpc	r22, r18
    15d4:	73 07       	cpc	r23, r19
    15d6:	84 07       	cpc	r24, r20
    15d8:	95 07       	cpc	r25, r21
    15da:	18 f0       	brcs	.+6      	; 0x15e2 <__addsf3x+0x18>
    15dc:	71 f4       	brne	.+28     	; 0x15fa <__addsf3x+0x30>
    15de:	9e f5       	brtc	.+102    	; 0x1646 <__addsf3x+0x7c>
    15e0:	8f c1       	rjmp	.+798    	; 0x1900 <__fp_zero>
    15e2:	0e f4       	brtc	.+2      	; 0x15e6 <__addsf3x+0x1c>
    15e4:	e0 95       	com	r30
    15e6:	0b 2e       	mov	r0, r27
    15e8:	ba 2f       	mov	r27, r26
    15ea:	a0 2d       	mov	r26, r0
    15ec:	0b 01       	movw	r0, r22
    15ee:	b9 01       	movw	r22, r18
    15f0:	90 01       	movw	r18, r0
    15f2:	0c 01       	movw	r0, r24
    15f4:	ca 01       	movw	r24, r20
    15f6:	a0 01       	movw	r20, r0
    15f8:	11 24       	eor	r1, r1
    15fa:	ff 27       	eor	r31, r31
    15fc:	59 1b       	sub	r21, r25
    15fe:	99 f0       	breq	.+38     	; 0x1626 <__addsf3x+0x5c>
    1600:	59 3f       	cpi	r21, 0xF9	; 249
    1602:	50 f4       	brcc	.+20     	; 0x1618 <__addsf3x+0x4e>
    1604:	50 3e       	cpi	r21, 0xE0	; 224
    1606:	68 f1       	brcs	.+90     	; 0x1662 <__addsf3x+0x98>
    1608:	1a 16       	cp	r1, r26
    160a:	f0 40       	sbci	r31, 0x00	; 0
    160c:	a2 2f       	mov	r26, r18
    160e:	23 2f       	mov	r18, r19
    1610:	34 2f       	mov	r19, r20
    1612:	44 27       	eor	r20, r20
    1614:	58 5f       	subi	r21, 0xF8	; 248
    1616:	f3 cf       	rjmp	.-26     	; 0x15fe <__addsf3x+0x34>
    1618:	46 95       	lsr	r20
    161a:	37 95       	ror	r19
    161c:	27 95       	ror	r18
    161e:	a7 95       	ror	r26
    1620:	f0 40       	sbci	r31, 0x00	; 0
    1622:	53 95       	inc	r21
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__addsf3x+0x4e>
    1626:	7e f4       	brtc	.+30     	; 0x1646 <__addsf3x+0x7c>
    1628:	1f 16       	cp	r1, r31
    162a:	ba 0b       	sbc	r27, r26
    162c:	62 0b       	sbc	r22, r18
    162e:	73 0b       	sbc	r23, r19
    1630:	84 0b       	sbc	r24, r20
    1632:	ba f0       	brmi	.+46     	; 0x1662 <__addsf3x+0x98>
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	a1 f0       	breq	.+40     	; 0x1660 <__addsf3x+0x96>
    1638:	ff 0f       	add	r31, r31
    163a:	bb 1f       	adc	r27, r27
    163c:	66 1f       	adc	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	c2 f7       	brpl	.-16     	; 0x1634 <__addsf3x+0x6a>
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <__addsf3x+0x98>
    1646:	ba 0f       	add	r27, r26
    1648:	62 1f       	adc	r22, r18
    164a:	73 1f       	adc	r23, r19
    164c:	84 1f       	adc	r24, r20
    164e:	48 f4       	brcc	.+18     	; 0x1662 <__addsf3x+0x98>
    1650:	87 95       	ror	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	9e 3f       	cpi	r25, 0xFE	; 254
    165c:	08 f0       	brcs	.+2      	; 0x1660 <__addsf3x+0x96>
    165e:	b3 cf       	rjmp	.-154    	; 0x15c6 <__addsf3+0x1e>
    1660:	93 95       	inc	r25
    1662:	88 0f       	add	r24, r24
    1664:	08 f0       	brcs	.+2      	; 0x1668 <__addsf3x+0x9e>
    1666:	99 27       	eor	r25, r25
    1668:	ee 0f       	add	r30, r30
    166a:	97 95       	ror	r25
    166c:	87 95       	ror	r24
    166e:	08 95       	ret

00001670 <__cmpsf2>:
    1670:	d9 d0       	rcall	.+434    	; 0x1824 <__fp_cmp>
    1672:	08 f4       	brcc	.+2      	; 0x1676 <__cmpsf2+0x6>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	08 95       	ret

00001678 <__divsf3>:
    1678:	0c d0       	rcall	.+24     	; 0x1692 <__divsf3x>
    167a:	0f c1       	rjmp	.+542    	; 0x189a <__fp_round>
    167c:	07 d1       	rcall	.+526    	; 0x188c <__fp_pscB>
    167e:	40 f0       	brcs	.+16     	; 0x1690 <__divsf3+0x18>
    1680:	fe d0       	rcall	.+508    	; 0x187e <__fp_pscA>
    1682:	30 f0       	brcs	.+12     	; 0x1690 <__divsf3+0x18>
    1684:	21 f4       	brne	.+8      	; 0x168e <__divsf3+0x16>
    1686:	5f 3f       	cpi	r21, 0xFF	; 255
    1688:	19 f0       	breq	.+6      	; 0x1690 <__divsf3+0x18>
    168a:	f0 c0       	rjmp	.+480    	; 0x186c <__fp_inf>
    168c:	51 11       	cpse	r21, r1
    168e:	39 c1       	rjmp	.+626    	; 0x1902 <__fp_szero>
    1690:	f3 c0       	rjmp	.+486    	; 0x1878 <__fp_nan>

00001692 <__divsf3x>:
    1692:	14 d1       	rcall	.+552    	; 0x18bc <__fp_split3>
    1694:	98 f3       	brcs	.-26     	; 0x167c <__divsf3+0x4>

00001696 <__divsf3_pse>:
    1696:	99 23       	and	r25, r25
    1698:	c9 f3       	breq	.-14     	; 0x168c <__divsf3+0x14>
    169a:	55 23       	and	r21, r21
    169c:	b1 f3       	breq	.-20     	; 0x168a <__divsf3+0x12>
    169e:	95 1b       	sub	r25, r21
    16a0:	55 0b       	sbc	r21, r21
    16a2:	bb 27       	eor	r27, r27
    16a4:	aa 27       	eor	r26, r26
    16a6:	62 17       	cp	r22, r18
    16a8:	73 07       	cpc	r23, r19
    16aa:	84 07       	cpc	r24, r20
    16ac:	38 f0       	brcs	.+14     	; 0x16bc <__divsf3_pse+0x26>
    16ae:	9f 5f       	subi	r25, 0xFF	; 255
    16b0:	5f 4f       	sbci	r21, 0xFF	; 255
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	44 1f       	adc	r20, r20
    16b8:	aa 1f       	adc	r26, r26
    16ba:	a9 f3       	breq	.-22     	; 0x16a6 <__divsf3_pse+0x10>
    16bc:	33 d0       	rcall	.+102    	; 0x1724 <__divsf3_pse+0x8e>
    16be:	0e 2e       	mov	r0, r30
    16c0:	3a f0       	brmi	.+14     	; 0x16d0 <__divsf3_pse+0x3a>
    16c2:	e0 e8       	ldi	r30, 0x80	; 128
    16c4:	30 d0       	rcall	.+96     	; 0x1726 <__divsf3_pse+0x90>
    16c6:	91 50       	subi	r25, 0x01	; 1
    16c8:	50 40       	sbci	r21, 0x00	; 0
    16ca:	e6 95       	lsr	r30
    16cc:	00 1c       	adc	r0, r0
    16ce:	ca f7       	brpl	.-14     	; 0x16c2 <__divsf3_pse+0x2c>
    16d0:	29 d0       	rcall	.+82     	; 0x1724 <__divsf3_pse+0x8e>
    16d2:	fe 2f       	mov	r31, r30
    16d4:	27 d0       	rcall	.+78     	; 0x1724 <__divsf3_pse+0x8e>
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	bb 1f       	adc	r27, r27
    16de:	26 17       	cp	r18, r22
    16e0:	37 07       	cpc	r19, r23
    16e2:	48 07       	cpc	r20, r24
    16e4:	ab 07       	cpc	r26, r27
    16e6:	b0 e8       	ldi	r27, 0x80	; 128
    16e8:	09 f0       	breq	.+2      	; 0x16ec <__divsf3_pse+0x56>
    16ea:	bb 0b       	sbc	r27, r27
    16ec:	80 2d       	mov	r24, r0
    16ee:	bf 01       	movw	r22, r30
    16f0:	ff 27       	eor	r31, r31
    16f2:	93 58       	subi	r25, 0x83	; 131
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	2a f0       	brmi	.+10     	; 0x1702 <__divsf3_pse+0x6c>
    16f8:	9e 3f       	cpi	r25, 0xFE	; 254
    16fa:	51 05       	cpc	r21, r1
    16fc:	68 f0       	brcs	.+26     	; 0x1718 <__divsf3_pse+0x82>
    16fe:	b6 c0       	rjmp	.+364    	; 0x186c <__fp_inf>
    1700:	00 c1       	rjmp	.+512    	; 0x1902 <__fp_szero>
    1702:	5f 3f       	cpi	r21, 0xFF	; 255
    1704:	ec f3       	brlt	.-6      	; 0x1700 <__divsf3_pse+0x6a>
    1706:	98 3e       	cpi	r25, 0xE8	; 232
    1708:	dc f3       	brlt	.-10     	; 0x1700 <__divsf3_pse+0x6a>
    170a:	86 95       	lsr	r24
    170c:	77 95       	ror	r23
    170e:	67 95       	ror	r22
    1710:	b7 95       	ror	r27
    1712:	f7 95       	ror	r31
    1714:	9f 5f       	subi	r25, 0xFF	; 255
    1716:	c9 f7       	brne	.-14     	; 0x170a <__divsf3_pse+0x74>
    1718:	88 0f       	add	r24, r24
    171a:	91 1d       	adc	r25, r1
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	97 f9       	bld	r25, 7
    1722:	08 95       	ret
    1724:	e1 e0       	ldi	r30, 0x01	; 1
    1726:	66 0f       	add	r22, r22
    1728:	77 1f       	adc	r23, r23
    172a:	88 1f       	adc	r24, r24
    172c:	bb 1f       	adc	r27, r27
    172e:	62 17       	cp	r22, r18
    1730:	73 07       	cpc	r23, r19
    1732:	84 07       	cpc	r24, r20
    1734:	ba 07       	cpc	r27, r26
    1736:	20 f0       	brcs	.+8      	; 0x1740 <__divsf3_pse+0xaa>
    1738:	62 1b       	sub	r22, r18
    173a:	73 0b       	sbc	r23, r19
    173c:	84 0b       	sbc	r24, r20
    173e:	ba 0b       	sbc	r27, r26
    1740:	ee 1f       	adc	r30, r30
    1742:	88 f7       	brcc	.-30     	; 0x1726 <__divsf3_pse+0x90>
    1744:	e0 95       	com	r30
    1746:	08 95       	ret

00001748 <__fixsfsi>:
    1748:	04 d0       	rcall	.+8      	; 0x1752 <__fixunssfsi>
    174a:	68 94       	set
    174c:	b1 11       	cpse	r27, r1
    174e:	d9 c0       	rjmp	.+434    	; 0x1902 <__fp_szero>
    1750:	08 95       	ret

00001752 <__fixunssfsi>:
    1752:	bc d0       	rcall	.+376    	; 0x18cc <__fp_splitA>
    1754:	88 f0       	brcs	.+34     	; 0x1778 <__fixunssfsi+0x26>
    1756:	9f 57       	subi	r25, 0x7F	; 127
    1758:	90 f0       	brcs	.+36     	; 0x177e <__fixunssfsi+0x2c>
    175a:	b9 2f       	mov	r27, r25
    175c:	99 27       	eor	r25, r25
    175e:	b7 51       	subi	r27, 0x17	; 23
    1760:	a0 f0       	brcs	.+40     	; 0x178a <__fixunssfsi+0x38>
    1762:	d1 f0       	breq	.+52     	; 0x1798 <__fixunssfsi+0x46>
    1764:	66 0f       	add	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	1a f0       	brmi	.+6      	; 0x1774 <__fixunssfsi+0x22>
    176e:	ba 95       	dec	r27
    1770:	c9 f7       	brne	.-14     	; 0x1764 <__fixunssfsi+0x12>
    1772:	12 c0       	rjmp	.+36     	; 0x1798 <__fixunssfsi+0x46>
    1774:	b1 30       	cpi	r27, 0x01	; 1
    1776:	81 f0       	breq	.+32     	; 0x1798 <__fixunssfsi+0x46>
    1778:	c3 d0       	rcall	.+390    	; 0x1900 <__fp_zero>
    177a:	b1 e0       	ldi	r27, 0x01	; 1
    177c:	08 95       	ret
    177e:	c0 c0       	rjmp	.+384    	; 0x1900 <__fp_zero>
    1780:	67 2f       	mov	r22, r23
    1782:	78 2f       	mov	r23, r24
    1784:	88 27       	eor	r24, r24
    1786:	b8 5f       	subi	r27, 0xF8	; 248
    1788:	39 f0       	breq	.+14     	; 0x1798 <__fixunssfsi+0x46>
    178a:	b9 3f       	cpi	r27, 0xF9	; 249
    178c:	cc f3       	brlt	.-14     	; 0x1780 <__fixunssfsi+0x2e>
    178e:	86 95       	lsr	r24
    1790:	77 95       	ror	r23
    1792:	67 95       	ror	r22
    1794:	b3 95       	inc	r27
    1796:	d9 f7       	brne	.-10     	; 0x178e <__fixunssfsi+0x3c>
    1798:	3e f4       	brtc	.+14     	; 0x17a8 <__fixunssfsi+0x56>
    179a:	90 95       	com	r25
    179c:	80 95       	com	r24
    179e:	70 95       	com	r23
    17a0:	61 95       	neg	r22
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	8f 4f       	sbci	r24, 0xFF	; 255
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	08 95       	ret

000017aa <__floatunsisf>:
    17aa:	e8 94       	clt
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <__floatsisf+0x12>

000017ae <__floatsisf>:
    17ae:	97 fb       	bst	r25, 7
    17b0:	3e f4       	brtc	.+14     	; 0x17c0 <__floatsisf+0x12>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	99 23       	and	r25, r25
    17c2:	a9 f0       	breq	.+42     	; 0x17ee <__floatsisf+0x40>
    17c4:	f9 2f       	mov	r31, r25
    17c6:	96 e9       	ldi	r25, 0x96	; 150
    17c8:	bb 27       	eor	r27, r27
    17ca:	93 95       	inc	r25
    17cc:	f6 95       	lsr	r31
    17ce:	87 95       	ror	r24
    17d0:	77 95       	ror	r23
    17d2:	67 95       	ror	r22
    17d4:	b7 95       	ror	r27
    17d6:	f1 11       	cpse	r31, r1
    17d8:	f8 cf       	rjmp	.-16     	; 0x17ca <__floatsisf+0x1c>
    17da:	fa f4       	brpl	.+62     	; 0x181a <__floatsisf+0x6c>
    17dc:	bb 0f       	add	r27, r27
    17de:	11 f4       	brne	.+4      	; 0x17e4 <__floatsisf+0x36>
    17e0:	60 ff       	sbrs	r22, 0
    17e2:	1b c0       	rjmp	.+54     	; 0x181a <__floatsisf+0x6c>
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	16 c0       	rjmp	.+44     	; 0x181a <__floatsisf+0x6c>
    17ee:	88 23       	and	r24, r24
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <__floatsisf+0x48>
    17f2:	96 e9       	ldi	r25, 0x96	; 150
    17f4:	11 c0       	rjmp	.+34     	; 0x1818 <__floatsisf+0x6a>
    17f6:	77 23       	and	r23, r23
    17f8:	21 f0       	breq	.+8      	; 0x1802 <__floatsisf+0x54>
    17fa:	9e e8       	ldi	r25, 0x8E	; 142
    17fc:	87 2f       	mov	r24, r23
    17fe:	76 2f       	mov	r23, r22
    1800:	05 c0       	rjmp	.+10     	; 0x180c <__floatsisf+0x5e>
    1802:	66 23       	and	r22, r22
    1804:	71 f0       	breq	.+28     	; 0x1822 <__floatsisf+0x74>
    1806:	96 e8       	ldi	r25, 0x86	; 134
    1808:	86 2f       	mov	r24, r22
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	2a f0       	brmi	.+10     	; 0x181a <__floatsisf+0x6c>
    1810:	9a 95       	dec	r25
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	da f7       	brpl	.-10     	; 0x1810 <__floatsisf+0x62>
    181a:	88 0f       	add	r24, r24
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	97 f9       	bld	r25, 7
    1822:	08 95       	ret

00001824 <__fp_cmp>:
    1824:	99 0f       	add	r25, r25
    1826:	00 08       	sbc	r0, r0
    1828:	55 0f       	add	r21, r21
    182a:	aa 0b       	sbc	r26, r26
    182c:	e0 e8       	ldi	r30, 0x80	; 128
    182e:	fe ef       	ldi	r31, 0xFE	; 254
    1830:	16 16       	cp	r1, r22
    1832:	17 06       	cpc	r1, r23
    1834:	e8 07       	cpc	r30, r24
    1836:	f9 07       	cpc	r31, r25
    1838:	c0 f0       	brcs	.+48     	; 0x186a <__fp_cmp+0x46>
    183a:	12 16       	cp	r1, r18
    183c:	13 06       	cpc	r1, r19
    183e:	e4 07       	cpc	r30, r20
    1840:	f5 07       	cpc	r31, r21
    1842:	98 f0       	brcs	.+38     	; 0x186a <__fp_cmp+0x46>
    1844:	62 1b       	sub	r22, r18
    1846:	73 0b       	sbc	r23, r19
    1848:	84 0b       	sbc	r24, r20
    184a:	95 0b       	sbc	r25, r21
    184c:	39 f4       	brne	.+14     	; 0x185c <__fp_cmp+0x38>
    184e:	0a 26       	eor	r0, r26
    1850:	61 f0       	breq	.+24     	; 0x186a <__fp_cmp+0x46>
    1852:	23 2b       	or	r18, r19
    1854:	24 2b       	or	r18, r20
    1856:	25 2b       	or	r18, r21
    1858:	21 f4       	brne	.+8      	; 0x1862 <__fp_cmp+0x3e>
    185a:	08 95       	ret
    185c:	0a 26       	eor	r0, r26
    185e:	09 f4       	brne	.+2      	; 0x1862 <__fp_cmp+0x3e>
    1860:	a1 40       	sbci	r26, 0x01	; 1
    1862:	a6 95       	lsr	r26
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	81 1d       	adc	r24, r1
    1868:	81 1d       	adc	r24, r1
    186a:	08 95       	ret

0000186c <__fp_inf>:
    186c:	97 f9       	bld	r25, 7
    186e:	9f 67       	ori	r25, 0x7F	; 127
    1870:	80 e8       	ldi	r24, 0x80	; 128
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	08 95       	ret

00001878 <__fp_nan>:
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	80 ec       	ldi	r24, 0xC0	; 192
    187c:	08 95       	ret

0000187e <__fp_pscA>:
    187e:	00 24       	eor	r0, r0
    1880:	0a 94       	dec	r0
    1882:	16 16       	cp	r1, r22
    1884:	17 06       	cpc	r1, r23
    1886:	18 06       	cpc	r1, r24
    1888:	09 06       	cpc	r0, r25
    188a:	08 95       	ret

0000188c <__fp_pscB>:
    188c:	00 24       	eor	r0, r0
    188e:	0a 94       	dec	r0
    1890:	12 16       	cp	r1, r18
    1892:	13 06       	cpc	r1, r19
    1894:	14 06       	cpc	r1, r20
    1896:	05 06       	cpc	r0, r21
    1898:	08 95       	ret

0000189a <__fp_round>:
    189a:	09 2e       	mov	r0, r25
    189c:	03 94       	inc	r0
    189e:	00 0c       	add	r0, r0
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <__fp_round+0xc>
    18a2:	88 23       	and	r24, r24
    18a4:	52 f0       	brmi	.+20     	; 0x18ba <__fp_round+0x20>
    18a6:	bb 0f       	add	r27, r27
    18a8:	40 f4       	brcc	.+16     	; 0x18ba <__fp_round+0x20>
    18aa:	bf 2b       	or	r27, r31
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <__fp_round+0x18>
    18ae:	60 ff       	sbrs	r22, 0
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <__fp_round+0x20>
    18b2:	6f 5f       	subi	r22, 0xFF	; 255
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	8f 4f       	sbci	r24, 0xFF	; 255
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	08 95       	ret

000018bc <__fp_split3>:
    18bc:	57 fd       	sbrc	r21, 7
    18be:	90 58       	subi	r25, 0x80	; 128
    18c0:	44 0f       	add	r20, r20
    18c2:	55 1f       	adc	r21, r21
    18c4:	59 f0       	breq	.+22     	; 0x18dc <__fp_splitA+0x10>
    18c6:	5f 3f       	cpi	r21, 0xFF	; 255
    18c8:	71 f0       	breq	.+28     	; 0x18e6 <__fp_splitA+0x1a>
    18ca:	47 95       	ror	r20

000018cc <__fp_splitA>:
    18cc:	88 0f       	add	r24, r24
    18ce:	97 fb       	bst	r25, 7
    18d0:	99 1f       	adc	r25, r25
    18d2:	61 f0       	breq	.+24     	; 0x18ec <__fp_splitA+0x20>
    18d4:	9f 3f       	cpi	r25, 0xFF	; 255
    18d6:	79 f0       	breq	.+30     	; 0x18f6 <__fp_splitA+0x2a>
    18d8:	87 95       	ror	r24
    18da:	08 95       	ret
    18dc:	12 16       	cp	r1, r18
    18de:	13 06       	cpc	r1, r19
    18e0:	14 06       	cpc	r1, r20
    18e2:	55 1f       	adc	r21, r21
    18e4:	f2 cf       	rjmp	.-28     	; 0x18ca <__fp_split3+0xe>
    18e6:	46 95       	lsr	r20
    18e8:	f1 df       	rcall	.-30     	; 0x18cc <__fp_splitA>
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <__fp_splitA+0x30>
    18ec:	16 16       	cp	r1, r22
    18ee:	17 06       	cpc	r1, r23
    18f0:	18 06       	cpc	r1, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	f1 cf       	rjmp	.-30     	; 0x18d8 <__fp_splitA+0xc>
    18f6:	86 95       	lsr	r24
    18f8:	71 05       	cpc	r23, r1
    18fa:	61 05       	cpc	r22, r1
    18fc:	08 94       	sec
    18fe:	08 95       	ret

00001900 <__fp_zero>:
    1900:	e8 94       	clt

00001902 <__fp_szero>:
    1902:	bb 27       	eor	r27, r27
    1904:	66 27       	eor	r22, r22
    1906:	77 27       	eor	r23, r23
    1908:	cb 01       	movw	r24, r22
    190a:	97 f9       	bld	r25, 7
    190c:	08 95       	ret

0000190e <__mulsf3>:
    190e:	0b d0       	rcall	.+22     	; 0x1926 <__mulsf3x>
    1910:	c4 cf       	rjmp	.-120    	; 0x189a <__fp_round>
    1912:	b5 df       	rcall	.-150    	; 0x187e <__fp_pscA>
    1914:	28 f0       	brcs	.+10     	; 0x1920 <__mulsf3+0x12>
    1916:	ba df       	rcall	.-140    	; 0x188c <__fp_pscB>
    1918:	18 f0       	brcs	.+6      	; 0x1920 <__mulsf3+0x12>
    191a:	95 23       	and	r25, r21
    191c:	09 f0       	breq	.+2      	; 0x1920 <__mulsf3+0x12>
    191e:	a6 cf       	rjmp	.-180    	; 0x186c <__fp_inf>
    1920:	ab cf       	rjmp	.-170    	; 0x1878 <__fp_nan>
    1922:	11 24       	eor	r1, r1
    1924:	ee cf       	rjmp	.-36     	; 0x1902 <__fp_szero>

00001926 <__mulsf3x>:
    1926:	ca df       	rcall	.-108    	; 0x18bc <__fp_split3>
    1928:	a0 f3       	brcs	.-24     	; 0x1912 <__mulsf3+0x4>

0000192a <__mulsf3_pse>:
    192a:	95 9f       	mul	r25, r21
    192c:	d1 f3       	breq	.-12     	; 0x1922 <__mulsf3+0x14>
    192e:	95 0f       	add	r25, r21
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	55 1f       	adc	r21, r21
    1934:	62 9f       	mul	r22, r18
    1936:	f0 01       	movw	r30, r0
    1938:	72 9f       	mul	r23, r18
    193a:	bb 27       	eor	r27, r27
    193c:	f0 0d       	add	r31, r0
    193e:	b1 1d       	adc	r27, r1
    1940:	63 9f       	mul	r22, r19
    1942:	aa 27       	eor	r26, r26
    1944:	f0 0d       	add	r31, r0
    1946:	b1 1d       	adc	r27, r1
    1948:	aa 1f       	adc	r26, r26
    194a:	64 9f       	mul	r22, r20
    194c:	66 27       	eor	r22, r22
    194e:	b0 0d       	add	r27, r0
    1950:	a1 1d       	adc	r26, r1
    1952:	66 1f       	adc	r22, r22
    1954:	82 9f       	mul	r24, r18
    1956:	22 27       	eor	r18, r18
    1958:	b0 0d       	add	r27, r0
    195a:	a1 1d       	adc	r26, r1
    195c:	62 1f       	adc	r22, r18
    195e:	73 9f       	mul	r23, r19
    1960:	b0 0d       	add	r27, r0
    1962:	a1 1d       	adc	r26, r1
    1964:	62 1f       	adc	r22, r18
    1966:	83 9f       	mul	r24, r19
    1968:	a0 0d       	add	r26, r0
    196a:	61 1d       	adc	r22, r1
    196c:	22 1f       	adc	r18, r18
    196e:	74 9f       	mul	r23, r20
    1970:	33 27       	eor	r19, r19
    1972:	a0 0d       	add	r26, r0
    1974:	61 1d       	adc	r22, r1
    1976:	23 1f       	adc	r18, r19
    1978:	84 9f       	mul	r24, r20
    197a:	60 0d       	add	r22, r0
    197c:	21 1d       	adc	r18, r1
    197e:	82 2f       	mov	r24, r18
    1980:	76 2f       	mov	r23, r22
    1982:	6a 2f       	mov	r22, r26
    1984:	11 24       	eor	r1, r1
    1986:	9f 57       	subi	r25, 0x7F	; 127
    1988:	50 40       	sbci	r21, 0x00	; 0
    198a:	8a f0       	brmi	.+34     	; 0x19ae <__mulsf3_pse+0x84>
    198c:	e1 f0       	breq	.+56     	; 0x19c6 <__mulsf3_pse+0x9c>
    198e:	88 23       	and	r24, r24
    1990:	4a f0       	brmi	.+18     	; 0x19a4 <__mulsf3_pse+0x7a>
    1992:	ee 0f       	add	r30, r30
    1994:	ff 1f       	adc	r31, r31
    1996:	bb 1f       	adc	r27, r27
    1998:	66 1f       	adc	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	91 50       	subi	r25, 0x01	; 1
    19a0:	50 40       	sbci	r21, 0x00	; 0
    19a2:	a9 f7       	brne	.-22     	; 0x198e <__mulsf3_pse+0x64>
    19a4:	9e 3f       	cpi	r25, 0xFE	; 254
    19a6:	51 05       	cpc	r21, r1
    19a8:	70 f0       	brcs	.+28     	; 0x19c6 <__mulsf3_pse+0x9c>
    19aa:	60 cf       	rjmp	.-320    	; 0x186c <__fp_inf>
    19ac:	aa cf       	rjmp	.-172    	; 0x1902 <__fp_szero>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	ec f3       	brlt	.-6      	; 0x19ac <__mulsf3_pse+0x82>
    19b2:	98 3e       	cpi	r25, 0xE8	; 232
    19b4:	dc f3       	brlt	.-10     	; 0x19ac <__mulsf3_pse+0x82>
    19b6:	86 95       	lsr	r24
    19b8:	77 95       	ror	r23
    19ba:	67 95       	ror	r22
    19bc:	b7 95       	ror	r27
    19be:	f7 95       	ror	r31
    19c0:	e7 95       	ror	r30
    19c2:	9f 5f       	subi	r25, 0xFF	; 255
    19c4:	c1 f7       	brne	.-16     	; 0x19b6 <__mulsf3_pse+0x8c>
    19c6:	fe 2b       	or	r31, r30
    19c8:	88 0f       	add	r24, r24
    19ca:	91 1d       	adc	r25, r1
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	97 f9       	bld	r25, 7
    19d2:	08 95       	ret

000019d4 <__divmodhi4>:
    19d4:	97 fb       	bst	r25, 7
    19d6:	09 2e       	mov	r0, r25
    19d8:	07 26       	eor	r0, r23
    19da:	0a d0       	rcall	.+20     	; 0x19f0 <__divmodhi4_neg1>
    19dc:	77 fd       	sbrc	r23, 7
    19de:	04 d0       	rcall	.+8      	; 0x19e8 <__divmodhi4_neg2>
    19e0:	0c d0       	rcall	.+24     	; 0x19fa <__udivmodhi4>
    19e2:	06 d0       	rcall	.+12     	; 0x19f0 <__divmodhi4_neg1>
    19e4:	00 20       	and	r0, r0
    19e6:	1a f4       	brpl	.+6      	; 0x19ee <__divmodhi4_exit>

000019e8 <__divmodhi4_neg2>:
    19e8:	70 95       	com	r23
    19ea:	61 95       	neg	r22
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255

000019ee <__divmodhi4_exit>:
    19ee:	08 95       	ret

000019f0 <__divmodhi4_neg1>:
    19f0:	f6 f7       	brtc	.-4      	; 0x19ee <__divmodhi4_exit>
    19f2:	90 95       	com	r25
    19f4:	81 95       	neg	r24
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	08 95       	ret

000019fa <__udivmodhi4>:
    19fa:	aa 1b       	sub	r26, r26
    19fc:	bb 1b       	sub	r27, r27
    19fe:	51 e1       	ldi	r21, 0x11	; 17
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <__udivmodhi4_ep>

00001a02 <__udivmodhi4_loop>:
    1a02:	aa 1f       	adc	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	a6 17       	cp	r26, r22
    1a08:	b7 07       	cpc	r27, r23
    1a0a:	10 f0       	brcs	.+4      	; 0x1a10 <__udivmodhi4_ep>
    1a0c:	a6 1b       	sub	r26, r22
    1a0e:	b7 0b       	sbc	r27, r23

00001a10 <__udivmodhi4_ep>:
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	5a 95       	dec	r21
    1a16:	a9 f7       	brne	.-22     	; 0x1a02 <__udivmodhi4_loop>
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	08 95       	ret

00001a22 <sprintf>:
    1a22:	ae e0       	ldi	r26, 0x0E	; 14
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e7 e1       	ldi	r30, 0x17	; 23
    1a28:	fd e0       	ldi	r31, 0x0D	; 13
    1a2a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x1c>
    1a2e:	0d 89       	ldd	r16, Y+21	; 0x15
    1a30:	1e 89       	ldd	r17, Y+22	; 0x16
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	8c 83       	std	Y+4, r24	; 0x04
    1a36:	1a 83       	std	Y+2, r17	; 0x02
    1a38:	09 83       	std	Y+1, r16	; 0x01
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	9f e7       	ldi	r25, 0x7F	; 127
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	ae 01       	movw	r20, r28
    1a44:	47 5e       	subi	r20, 0xE7	; 231
    1a46:	5f 4f       	sbci	r21, 0xFF	; 255
    1a48:	ce 01       	movw	r24, r28
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	6f 89       	ldd	r22, Y+23	; 0x17
    1a4e:	78 8d       	ldd	r23, Y+24	; 0x18
    1a50:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <vfprintf>
    1a54:	ef 81       	ldd	r30, Y+7	; 0x07
    1a56:	f8 85       	ldd	r31, Y+8	; 0x08
    1a58:	e0 0f       	add	r30, r16
    1a5a:	f1 1f       	adc	r31, r17
    1a5c:	10 82       	st	Z, r1
    1a5e:	2e 96       	adiw	r28, 0x0e	; 14
    1a60:	e4 e0       	ldi	r30, 0x04	; 4
    1a62:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x1c>

00001a66 <vfprintf>:
    1a66:	ad e0       	ldi	r26, 0x0D	; 13
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e3       	ldi	r30, 0x39	; 57
    1a6c:	fd e0       	ldi	r31, 0x0D	; 13
    1a6e:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__prologue_saves__>
    1a72:	3c 01       	movw	r6, r24
    1a74:	7d 87       	std	Y+13, r23	; 0x0d
    1a76:	6c 87       	std	Y+12, r22	; 0x0c
    1a78:	5a 01       	movw	r10, r20
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	17 82       	std	Z+7, r1	; 0x07
    1a7e:	16 82       	std	Z+6, r1	; 0x06
    1a80:	83 81       	ldd	r24, Z+3	; 0x03
    1a82:	81 ff       	sbrs	r24, 1
    1a84:	c8 c1       	rjmp	.+912    	; 0x1e16 <vfprintf+0x3b0>
    1a86:	2e 01       	movw	r4, r28
    1a88:	08 94       	sec
    1a8a:	41 1c       	adc	r4, r1
    1a8c:	51 1c       	adc	r5, r1
    1a8e:	f3 01       	movw	r30, r6
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a94:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a96:	93 fd       	sbrc	r25, 3
    1a98:	85 91       	lpm	r24, Z+
    1a9a:	93 ff       	sbrs	r25, 3
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	fd 87       	std	Y+13, r31	; 0x0d
    1aa0:	ec 87       	std	Y+12, r30	; 0x0c
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <vfprintf+0x42>
    1aa6:	b3 c1       	rjmp	.+870    	; 0x1e0e <vfprintf+0x3a8>
    1aa8:	85 32       	cpi	r24, 0x25	; 37
    1aaa:	41 f4       	brne	.+16     	; 0x1abc <vfprintf+0x56>
    1aac:	93 fd       	sbrc	r25, 3
    1aae:	85 91       	lpm	r24, Z+
    1ab0:	93 ff       	sbrs	r25, 3
    1ab2:	81 91       	ld	r24, Z+
    1ab4:	fd 87       	std	Y+13, r31	; 0x0d
    1ab6:	ec 87       	std	Y+12, r30	; 0x0c
    1ab8:	85 32       	cpi	r24, 0x25	; 37
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <vfprintf+0x60>
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	b3 01       	movw	r22, r6
    1ac0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1ac4:	e4 cf       	rjmp	.-56     	; 0x1a8e <vfprintf+0x28>
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	ee 24       	eor	r14, r14
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	10 32       	cpi	r17, 0x20	; 32
    1ace:	b0 f4       	brcc	.+44     	; 0x1afc <vfprintf+0x96>
    1ad0:	8b 32       	cpi	r24, 0x2B	; 43
    1ad2:	69 f0       	breq	.+26     	; 0x1aee <vfprintf+0x88>
    1ad4:	8c 32       	cpi	r24, 0x2C	; 44
    1ad6:	28 f4       	brcc	.+10     	; 0x1ae2 <vfprintf+0x7c>
    1ad8:	80 32       	cpi	r24, 0x20	; 32
    1ada:	51 f0       	breq	.+20     	; 0x1af0 <vfprintf+0x8a>
    1adc:	83 32       	cpi	r24, 0x23	; 35
    1ade:	71 f4       	brne	.+28     	; 0x1afc <vfprintf+0x96>
    1ae0:	0b c0       	rjmp	.+22     	; 0x1af8 <vfprintf+0x92>
    1ae2:	8d 32       	cpi	r24, 0x2D	; 45
    1ae4:	39 f0       	breq	.+14     	; 0x1af4 <vfprintf+0x8e>
    1ae6:	80 33       	cpi	r24, 0x30	; 48
    1ae8:	49 f4       	brne	.+18     	; 0x1afc <vfprintf+0x96>
    1aea:	11 60       	ori	r17, 0x01	; 1
    1aec:	2c c0       	rjmp	.+88     	; 0x1b46 <vfprintf+0xe0>
    1aee:	12 60       	ori	r17, 0x02	; 2
    1af0:	14 60       	ori	r17, 0x04	; 4
    1af2:	29 c0       	rjmp	.+82     	; 0x1b46 <vfprintf+0xe0>
    1af4:	18 60       	ori	r17, 0x08	; 8
    1af6:	27 c0       	rjmp	.+78     	; 0x1b46 <vfprintf+0xe0>
    1af8:	10 61       	ori	r17, 0x10	; 16
    1afa:	25 c0       	rjmp	.+74     	; 0x1b46 <vfprintf+0xe0>
    1afc:	17 fd       	sbrc	r17, 7
    1afe:	2e c0       	rjmp	.+92     	; 0x1b5c <vfprintf+0xf6>
    1b00:	28 2f       	mov	r18, r24
    1b02:	20 53       	subi	r18, 0x30	; 48
    1b04:	2a 30       	cpi	r18, 0x0A	; 10
    1b06:	98 f4       	brcc	.+38     	; 0x1b2e <vfprintf+0xc8>
    1b08:	16 ff       	sbrs	r17, 6
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <vfprintf+0xb6>
    1b0c:	8f 2d       	mov	r24, r15
    1b0e:	88 0f       	add	r24, r24
    1b10:	f8 2e       	mov	r15, r24
    1b12:	ff 0c       	add	r15, r15
    1b14:	ff 0c       	add	r15, r15
    1b16:	f8 0e       	add	r15, r24
    1b18:	f2 0e       	add	r15, r18
    1b1a:	15 c0       	rjmp	.+42     	; 0x1b46 <vfprintf+0xe0>
    1b1c:	8e 2d       	mov	r24, r14
    1b1e:	88 0f       	add	r24, r24
    1b20:	e8 2e       	mov	r14, r24
    1b22:	ee 0c       	add	r14, r14
    1b24:	ee 0c       	add	r14, r14
    1b26:	e8 0e       	add	r14, r24
    1b28:	e2 0e       	add	r14, r18
    1b2a:	10 62       	ori	r17, 0x20	; 32
    1b2c:	0c c0       	rjmp	.+24     	; 0x1b46 <vfprintf+0xe0>
    1b2e:	8e 32       	cpi	r24, 0x2E	; 46
    1b30:	21 f4       	brne	.+8      	; 0x1b3a <vfprintf+0xd4>
    1b32:	16 fd       	sbrc	r17, 6
    1b34:	6c c1       	rjmp	.+728    	; 0x1e0e <vfprintf+0x3a8>
    1b36:	10 64       	ori	r17, 0x40	; 64
    1b38:	06 c0       	rjmp	.+12     	; 0x1b46 <vfprintf+0xe0>
    1b3a:	8c 36       	cpi	r24, 0x6C	; 108
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <vfprintf+0xdc>
    1b3e:	10 68       	ori	r17, 0x80	; 128
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <vfprintf+0xe0>
    1b42:	88 36       	cpi	r24, 0x68	; 104
    1b44:	59 f4       	brne	.+22     	; 0x1b5c <vfprintf+0xf6>
    1b46:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b48:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b4a:	93 fd       	sbrc	r25, 3
    1b4c:	85 91       	lpm	r24, Z+
    1b4e:	93 ff       	sbrs	r25, 3
    1b50:	81 91       	ld	r24, Z+
    1b52:	fd 87       	std	Y+13, r31	; 0x0d
    1b54:	ec 87       	std	Y+12, r30	; 0x0c
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <vfprintf+0xf6>
    1b5a:	b8 cf       	rjmp	.-144    	; 0x1acc <vfprintf+0x66>
    1b5c:	98 2f       	mov	r25, r24
    1b5e:	95 54       	subi	r25, 0x45	; 69
    1b60:	93 30       	cpi	r25, 0x03	; 3
    1b62:	18 f0       	brcs	.+6      	; 0x1b6a <vfprintf+0x104>
    1b64:	90 52       	subi	r25, 0x20	; 32
    1b66:	93 30       	cpi	r25, 0x03	; 3
    1b68:	38 f4       	brcc	.+14     	; 0x1b78 <vfprintf+0x112>
    1b6a:	24 e0       	ldi	r18, 0x04	; 4
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	a2 0e       	add	r10, r18
    1b70:	b3 1e       	adc	r11, r19
    1b72:	3f e3       	ldi	r19, 0x3F	; 63
    1b74:	39 83       	std	Y+1, r19	; 0x01
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <vfprintf+0x130>
    1b78:	83 36       	cpi	r24, 0x63	; 99
    1b7a:	31 f0       	breq	.+12     	; 0x1b88 <vfprintf+0x122>
    1b7c:	83 37       	cpi	r24, 0x73	; 115
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <vfprintf+0x13a>
    1b80:	83 35       	cpi	r24, 0x53	; 83
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <vfprintf+0x120>
    1b84:	5a c0       	rjmp	.+180    	; 0x1c3a <vfprintf+0x1d4>
    1b86:	22 c0       	rjmp	.+68     	; 0x1bcc <vfprintf+0x166>
    1b88:	f5 01       	movw	r30, r10
    1b8a:	80 81       	ld	r24, Z
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	22 e0       	ldi	r18, 0x02	; 2
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	a2 0e       	add	r10, r18
    1b94:	b3 1e       	adc	r11, r19
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	c2 2e       	mov	r12, r18
    1b9a:	d1 2c       	mov	r13, r1
    1b9c:	42 01       	movw	r8, r4
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <vfprintf+0x162>
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	29 2e       	mov	r2, r25
    1ba4:	31 2c       	mov	r3, r1
    1ba6:	2a 0c       	add	r2, r10
    1ba8:	3b 1c       	adc	r3, r11
    1baa:	f5 01       	movw	r30, r10
    1bac:	80 80       	ld	r8, Z
    1bae:	91 80       	ldd	r9, Z+1	; 0x01
    1bb0:	16 ff       	sbrs	r17, 6
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <vfprintf+0x154>
    1bb4:	6f 2d       	mov	r22, r15
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x158>
    1bba:	6f ef       	ldi	r22, 0xFF	; 255
    1bbc:	7f ef       	ldi	r23, 0xFF	; 255
    1bbe:	c4 01       	movw	r24, r8
    1bc0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <strnlen>
    1bc4:	6c 01       	movw	r12, r24
    1bc6:	51 01       	movw	r10, r2
    1bc8:	1f 77       	andi	r17, 0x7F	; 127
    1bca:	15 c0       	rjmp	.+42     	; 0x1bf6 <vfprintf+0x190>
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	28 2e       	mov	r2, r24
    1bd0:	31 2c       	mov	r3, r1
    1bd2:	2a 0c       	add	r2, r10
    1bd4:	3b 1c       	adc	r3, r11
    1bd6:	f5 01       	movw	r30, r10
    1bd8:	80 80       	ld	r8, Z
    1bda:	91 80       	ldd	r9, Z+1	; 0x01
    1bdc:	16 ff       	sbrs	r17, 6
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <vfprintf+0x180>
    1be0:	6f 2d       	mov	r22, r15
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <vfprintf+0x184>
    1be6:	6f ef       	ldi	r22, 0xFF	; 255
    1be8:	7f ef       	ldi	r23, 0xFF	; 255
    1bea:	c4 01       	movw	r24, r8
    1bec:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <strnlen_P>
    1bf0:	6c 01       	movw	r12, r24
    1bf2:	10 68       	ori	r17, 0x80	; 128
    1bf4:	51 01       	movw	r10, r2
    1bf6:	13 fd       	sbrc	r17, 3
    1bf8:	1c c0       	rjmp	.+56     	; 0x1c32 <vfprintf+0x1cc>
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <vfprintf+0x1a2>
    1bfc:	80 e2       	ldi	r24, 0x20	; 32
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	b3 01       	movw	r22, r6
    1c02:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1c06:	ea 94       	dec	r14
    1c08:	8e 2d       	mov	r24, r14
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	c8 16       	cp	r12, r24
    1c0e:	d9 06       	cpc	r13, r25
    1c10:	a8 f3       	brcs	.-22     	; 0x1bfc <vfprintf+0x196>
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <vfprintf+0x1cc>
    1c14:	f4 01       	movw	r30, r8
    1c16:	17 fd       	sbrc	r17, 7
    1c18:	85 91       	lpm	r24, Z+
    1c1a:	17 ff       	sbrs	r17, 7
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	4f 01       	movw	r8, r30
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	b3 01       	movw	r22, r6
    1c24:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1c28:	e1 10       	cpse	r14, r1
    1c2a:	ea 94       	dec	r14
    1c2c:	08 94       	sec
    1c2e:	c1 08       	sbc	r12, r1
    1c30:	d1 08       	sbc	r13, r1
    1c32:	c1 14       	cp	r12, r1
    1c34:	d1 04       	cpc	r13, r1
    1c36:	71 f7       	brne	.-36     	; 0x1c14 <vfprintf+0x1ae>
    1c38:	e7 c0       	rjmp	.+462    	; 0x1e08 <vfprintf+0x3a2>
    1c3a:	84 36       	cpi	r24, 0x64	; 100
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <vfprintf+0x1dc>
    1c3e:	89 36       	cpi	r24, 0x69	; 105
    1c40:	51 f5       	brne	.+84     	; 0x1c96 <vfprintf+0x230>
    1c42:	f5 01       	movw	r30, r10
    1c44:	17 ff       	sbrs	r17, 7
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <vfprintf+0x1f0>
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	a2 81       	ldd	r26, Z+2	; 0x02
    1c4e:	b3 81       	ldd	r27, Z+3	; 0x03
    1c50:	24 e0       	ldi	r18, 0x04	; 4
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <vfprintf+0x200>
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	aa 27       	eor	r26, r26
    1c5c:	97 fd       	sbrc	r25, 7
    1c5e:	a0 95       	com	r26
    1c60:	ba 2f       	mov	r27, r26
    1c62:	22 e0       	ldi	r18, 0x02	; 2
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	a2 0e       	add	r10, r18
    1c68:	b3 1e       	adc	r11, r19
    1c6a:	01 2f       	mov	r16, r17
    1c6c:	0f 76       	andi	r16, 0x6F	; 111
    1c6e:	b7 ff       	sbrs	r27, 7
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <vfprintf+0x21c>
    1c72:	b0 95       	com	r27
    1c74:	a0 95       	com	r26
    1c76:	90 95       	com	r25
    1c78:	81 95       	neg	r24
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	af 4f       	sbci	r26, 0xFF	; 255
    1c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c80:	00 68       	ori	r16, 0x80	; 128
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	a2 01       	movw	r20, r4
    1c88:	2a e0       	ldi	r18, 0x0A	; 10
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ultoa_invert>
    1c90:	d8 2e       	mov	r13, r24
    1c92:	d4 18       	sub	r13, r4
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <vfprintf+0x2ae>
    1c96:	85 37       	cpi	r24, 0x75	; 117
    1c98:	21 f4       	brne	.+8      	; 0x1ca2 <vfprintf+0x23c>
    1c9a:	1f 7e       	andi	r17, 0xEF	; 239
    1c9c:	2a e0       	ldi	r18, 0x0A	; 10
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	20 c0       	rjmp	.+64     	; 0x1ce2 <vfprintf+0x27c>
    1ca2:	19 7f       	andi	r17, 0xF9	; 249
    1ca4:	8f 36       	cpi	r24, 0x6F	; 111
    1ca6:	a9 f0       	breq	.+42     	; 0x1cd2 <vfprintf+0x26c>
    1ca8:	80 37       	cpi	r24, 0x70	; 112
    1caa:	20 f4       	brcc	.+8      	; 0x1cb4 <vfprintf+0x24e>
    1cac:	88 35       	cpi	r24, 0x58	; 88
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <vfprintf+0x24c>
    1cb0:	ae c0       	rjmp	.+348    	; 0x1e0e <vfprintf+0x3a8>
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <vfprintf+0x264>
    1cb4:	80 37       	cpi	r24, 0x70	; 112
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <vfprintf+0x25a>
    1cb8:	88 37       	cpi	r24, 0x78	; 120
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <vfprintf+0x258>
    1cbc:	a8 c0       	rjmp	.+336    	; 0x1e0e <vfprintf+0x3a8>
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <vfprintf+0x25c>
    1cc0:	10 61       	ori	r17, 0x10	; 16
    1cc2:	14 ff       	sbrs	r17, 4
    1cc4:	09 c0       	rjmp	.+18     	; 0x1cd8 <vfprintf+0x272>
    1cc6:	14 60       	ori	r17, 0x04	; 4
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <vfprintf+0x272>
    1cca:	14 ff       	sbrs	r17, 4
    1ccc:	08 c0       	rjmp	.+16     	; 0x1cde <vfprintf+0x278>
    1cce:	16 60       	ori	r17, 0x06	; 6
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <vfprintf+0x278>
    1cd2:	28 e0       	ldi	r18, 0x08	; 8
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	05 c0       	rjmp	.+10     	; 0x1ce2 <vfprintf+0x27c>
    1cd8:	20 e1       	ldi	r18, 0x10	; 16
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0x27c>
    1cde:	20 e1       	ldi	r18, 0x10	; 16
    1ce0:	32 e0       	ldi	r19, 0x02	; 2
    1ce2:	f5 01       	movw	r30, r10
    1ce4:	17 ff       	sbrs	r17, 7
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <vfprintf+0x290>
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	44 e0       	ldi	r20, 0x04	; 4
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <vfprintf+0x29c>
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	42 e0       	ldi	r20, 0x02	; 2
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	a4 0e       	add	r10, r20
    1d04:	b5 1e       	adc	r11, r21
    1d06:	a2 01       	movw	r20, r4
    1d08:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ultoa_invert>
    1d0c:	d8 2e       	mov	r13, r24
    1d0e:	d4 18       	sub	r13, r4
    1d10:	01 2f       	mov	r16, r17
    1d12:	0f 77       	andi	r16, 0x7F	; 127
    1d14:	06 ff       	sbrs	r16, 6
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <vfprintf+0x2c4>
    1d18:	0e 7f       	andi	r16, 0xFE	; 254
    1d1a:	df 14       	cp	r13, r15
    1d1c:	30 f4       	brcc	.+12     	; 0x1d2a <vfprintf+0x2c4>
    1d1e:	04 ff       	sbrs	r16, 4
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0x2c8>
    1d22:	02 fd       	sbrc	r16, 2
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <vfprintf+0x2c8>
    1d26:	0f 7e       	andi	r16, 0xEF	; 239
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <vfprintf+0x2c8>
    1d2a:	1d 2d       	mov	r17, r13
    1d2c:	01 c0       	rjmp	.+2      	; 0x1d30 <vfprintf+0x2ca>
    1d2e:	1f 2d       	mov	r17, r15
    1d30:	80 2f       	mov	r24, r16
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	04 ff       	sbrs	r16, 4
    1d36:	0c c0       	rjmp	.+24     	; 0x1d50 <vfprintf+0x2ea>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ed 0d       	add	r30, r13
    1d3c:	f1 1d       	adc	r31, r1
    1d3e:	20 81       	ld	r18, Z
    1d40:	20 33       	cpi	r18, 0x30	; 48
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <vfprintf+0x2e2>
    1d44:	09 7e       	andi	r16, 0xE9	; 233
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <vfprintf+0x2f4>
    1d48:	02 ff       	sbrs	r16, 2
    1d4a:	06 c0       	rjmp	.+12     	; 0x1d58 <vfprintf+0x2f2>
    1d4c:	1e 5f       	subi	r17, 0xFE	; 254
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <vfprintf+0x2f4>
    1d50:	86 78       	andi	r24, 0x86	; 134
    1d52:	90 70       	andi	r25, 0x00	; 0
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <vfprintf+0x2f4>
    1d58:	1f 5f       	subi	r17, 0xFF	; 255
    1d5a:	80 2e       	mov	r8, r16
    1d5c:	99 24       	eor	r9, r9
    1d5e:	03 fd       	sbrc	r16, 3
    1d60:	12 c0       	rjmp	.+36     	; 0x1d86 <vfprintf+0x320>
    1d62:	00 ff       	sbrs	r16, 0
    1d64:	0d c0       	rjmp	.+26     	; 0x1d80 <vfprintf+0x31a>
    1d66:	fd 2c       	mov	r15, r13
    1d68:	1e 15       	cp	r17, r14
    1d6a:	50 f4       	brcc	.+20     	; 0x1d80 <vfprintf+0x31a>
    1d6c:	fe 0c       	add	r15, r14
    1d6e:	f1 1a       	sub	r15, r17
    1d70:	1e 2d       	mov	r17, r14
    1d72:	06 c0       	rjmp	.+12     	; 0x1d80 <vfprintf+0x31a>
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	b3 01       	movw	r22, r6
    1d7a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1d7e:	1f 5f       	subi	r17, 0xFF	; 255
    1d80:	1e 15       	cp	r17, r14
    1d82:	c0 f3       	brcs	.-16     	; 0x1d74 <vfprintf+0x30e>
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <vfprintf+0x328>
    1d86:	1e 15       	cp	r17, r14
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <vfprintf+0x328>
    1d8a:	e1 1a       	sub	r14, r17
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <vfprintf+0x32a>
    1d8e:	ee 24       	eor	r14, r14
    1d90:	84 fe       	sbrs	r8, 4
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <vfprintf+0x34c>
    1d94:	80 e3       	ldi	r24, 0x30	; 48
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	b3 01       	movw	r22, r6
    1d9a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1d9e:	82 fe       	sbrs	r8, 2
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <vfprintf+0x37a>
    1da2:	81 fe       	sbrs	r8, 1
    1da4:	03 c0       	rjmp	.+6      	; 0x1dac <vfprintf+0x346>
    1da6:	88 e5       	ldi	r24, 0x58	; 88
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	10 c0       	rjmp	.+32     	; 0x1dcc <vfprintf+0x366>
    1dac:	88 e7       	ldi	r24, 0x78	; 120
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0d c0       	rjmp	.+26     	; 0x1dcc <vfprintf+0x366>
    1db2:	c4 01       	movw	r24, r8
    1db4:	86 78       	andi	r24, 0x86	; 134
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	91 f0       	breq	.+36     	; 0x1de0 <vfprintf+0x37a>
    1dbc:	81 fc       	sbrc	r8, 1
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <vfprintf+0x35e>
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <vfprintf+0x360>
    1dc4:	8b e2       	ldi	r24, 0x2B	; 43
    1dc6:	07 fd       	sbrc	r16, 7
    1dc8:	8d e2       	ldi	r24, 0x2D	; 45
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	b3 01       	movw	r22, r6
    1dce:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <vfprintf+0x37a>
    1dd4:	80 e3       	ldi	r24, 0x30	; 48
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	b3 01       	movw	r22, r6
    1dda:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1dde:	fa 94       	dec	r15
    1de0:	df 14       	cp	r13, r15
    1de2:	c0 f3       	brcs	.-16     	; 0x1dd4 <vfprintf+0x36e>
    1de4:	da 94       	dec	r13
    1de6:	f2 01       	movw	r30, r4
    1de8:	ed 0d       	add	r30, r13
    1dea:	f1 1d       	adc	r31, r1
    1dec:	80 81       	ld	r24, Z
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	b3 01       	movw	r22, r6
    1df2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1df6:	dd 20       	and	r13, r13
    1df8:	a9 f7       	brne	.-22     	; 0x1de4 <vfprintf+0x37e>
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <vfprintf+0x3a2>
    1dfc:	80 e2       	ldi	r24, 0x20	; 32
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	b3 01       	movw	r22, r6
    1e02:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fputc>
    1e06:	ea 94       	dec	r14
    1e08:	ee 20       	and	r14, r14
    1e0a:	c1 f7       	brne	.-16     	; 0x1dfc <vfprintf+0x396>
    1e0c:	40 ce       	rjmp	.-896    	; 0x1a8e <vfprintf+0x28>
    1e0e:	f3 01       	movw	r30, r6
    1e10:	86 81       	ldd	r24, Z+6	; 0x06
    1e12:	97 81       	ldd	r25, Z+7	; 0x07
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <vfprintf+0x3b4>
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	9f ef       	ldi	r25, 0xFF	; 255
    1e1a:	2d 96       	adiw	r28, 0x0d	; 13
    1e1c:	e2 e1       	ldi	r30, 0x12	; 18
    1e1e:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__epilogue_restores__>

00001e22 <strnlen_P>:
    1e22:	fc 01       	movw	r30, r24
    1e24:	05 90       	lpm	r0, Z+
    1e26:	61 50       	subi	r22, 0x01	; 1
    1e28:	70 40       	sbci	r23, 0x00	; 0
    1e2a:	01 10       	cpse	r0, r1
    1e2c:	d8 f7       	brcc	.-10     	; 0x1e24 <strnlen_P+0x2>
    1e2e:	80 95       	com	r24
    1e30:	90 95       	com	r25
    1e32:	8e 0f       	add	r24, r30
    1e34:	9f 1f       	adc	r25, r31
    1e36:	08 95       	ret

00001e38 <strnlen>:
    1e38:	fc 01       	movw	r30, r24
    1e3a:	61 50       	subi	r22, 0x01	; 1
    1e3c:	70 40       	sbci	r23, 0x00	; 0
    1e3e:	01 90       	ld	r0, Z+
    1e40:	01 10       	cpse	r0, r1
    1e42:	d8 f7       	brcc	.-10     	; 0x1e3a <strnlen+0x2>
    1e44:	80 95       	com	r24
    1e46:	90 95       	com	r25
    1e48:	8e 0f       	add	r24, r30
    1e4a:	9f 1f       	adc	r25, r31
    1e4c:	08 95       	ret

00001e4e <fputc>:
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	8c 01       	movw	r16, r24
    1e58:	eb 01       	movw	r28, r22
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	81 ff       	sbrs	r24, 1
    1e5e:	1b c0       	rjmp	.+54     	; 0x1e96 <fputc+0x48>
    1e60:	82 ff       	sbrs	r24, 2
    1e62:	0d c0       	rjmp	.+26     	; 0x1e7e <fputc+0x30>
    1e64:	2e 81       	ldd	r18, Y+6	; 0x06
    1e66:	3f 81       	ldd	r19, Y+7	; 0x07
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	64 f4       	brge	.+24     	; 0x1e8a <fputc+0x3c>
    1e72:	e8 81       	ld	r30, Y
    1e74:	f9 81       	ldd	r31, Y+1	; 0x01
    1e76:	01 93       	st	Z+, r16
    1e78:	f9 83       	std	Y+1, r31	; 0x01
    1e7a:	e8 83       	st	Y, r30
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <fputc+0x3c>
    1e7e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e80:	f9 85       	ldd	r31, Y+9	; 0x09
    1e82:	80 2f       	mov	r24, r16
    1e84:	09 95       	icall
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	31 f4       	brne	.+12     	; 0x1e96 <fputc+0x48>
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	9f 83       	std	Y+7, r25	; 0x07
    1e92:	8e 83       	std	Y+6, r24	; 0x06
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <fputc+0x4c>
    1e96:	0f ef       	ldi	r16, 0xFF	; 255
    1e98:	1f ef       	ldi	r17, 0xFF	; 255
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <__ultoa_invert>:
    1ea6:	fa 01       	movw	r30, r20
    1ea8:	aa 27       	eor	r26, r26
    1eaa:	28 30       	cpi	r18, 0x08	; 8
    1eac:	51 f1       	breq	.+84     	; 0x1f02 <__ultoa_invert+0x5c>
    1eae:	20 31       	cpi	r18, 0x10	; 16
    1eb0:	81 f1       	breq	.+96     	; 0x1f12 <__ultoa_invert+0x6c>
    1eb2:	e8 94       	clt
    1eb4:	6f 93       	push	r22
    1eb6:	6e 7f       	andi	r22, 0xFE	; 254
    1eb8:	6e 5f       	subi	r22, 0xFE	; 254
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	af 4f       	sbci	r26, 0xFF	; 255
    1ec2:	b1 e0       	ldi	r27, 0x01	; 1
    1ec4:	3e d0       	rcall	.+124    	; 0x1f42 <__ultoa_invert+0x9c>
    1ec6:	b4 e0       	ldi	r27, 0x04	; 4
    1ec8:	3c d0       	rcall	.+120    	; 0x1f42 <__ultoa_invert+0x9c>
    1eca:	67 0f       	add	r22, r23
    1ecc:	78 1f       	adc	r23, r24
    1ece:	89 1f       	adc	r24, r25
    1ed0:	9a 1f       	adc	r25, r26
    1ed2:	a1 1d       	adc	r26, r1
    1ed4:	68 0f       	add	r22, r24
    1ed6:	79 1f       	adc	r23, r25
    1ed8:	8a 1f       	adc	r24, r26
    1eda:	91 1d       	adc	r25, r1
    1edc:	a1 1d       	adc	r26, r1
    1ede:	6a 0f       	add	r22, r26
    1ee0:	71 1d       	adc	r23, r1
    1ee2:	81 1d       	adc	r24, r1
    1ee4:	91 1d       	adc	r25, r1
    1ee6:	a1 1d       	adc	r26, r1
    1ee8:	20 d0       	rcall	.+64     	; 0x1f2a <__ultoa_invert+0x84>
    1eea:	09 f4       	brne	.+2      	; 0x1eee <__ultoa_invert+0x48>
    1eec:	68 94       	set
    1eee:	3f 91       	pop	r19
    1ef0:	2a e0       	ldi	r18, 0x0A	; 10
    1ef2:	26 9f       	mul	r18, r22
    1ef4:	11 24       	eor	r1, r1
    1ef6:	30 19       	sub	r19, r0
    1ef8:	30 5d       	subi	r19, 0xD0	; 208
    1efa:	31 93       	st	Z+, r19
    1efc:	de f6       	brtc	.-74     	; 0x1eb4 <__ultoa_invert+0xe>
    1efe:	cf 01       	movw	r24, r30
    1f00:	08 95       	ret
    1f02:	46 2f       	mov	r20, r22
    1f04:	47 70       	andi	r20, 0x07	; 7
    1f06:	40 5d       	subi	r20, 0xD0	; 208
    1f08:	41 93       	st	Z+, r20
    1f0a:	b3 e0       	ldi	r27, 0x03	; 3
    1f0c:	0f d0       	rcall	.+30     	; 0x1f2c <__ultoa_invert+0x86>
    1f0e:	c9 f7       	brne	.-14     	; 0x1f02 <__ultoa_invert+0x5c>
    1f10:	f6 cf       	rjmp	.-20     	; 0x1efe <__ultoa_invert+0x58>
    1f12:	46 2f       	mov	r20, r22
    1f14:	4f 70       	andi	r20, 0x0F	; 15
    1f16:	40 5d       	subi	r20, 0xD0	; 208
    1f18:	4a 33       	cpi	r20, 0x3A	; 58
    1f1a:	18 f0       	brcs	.+6      	; 0x1f22 <__ultoa_invert+0x7c>
    1f1c:	49 5d       	subi	r20, 0xD9	; 217
    1f1e:	31 fd       	sbrc	r19, 1
    1f20:	40 52       	subi	r20, 0x20	; 32
    1f22:	41 93       	st	Z+, r20
    1f24:	02 d0       	rcall	.+4      	; 0x1f2a <__ultoa_invert+0x84>
    1f26:	a9 f7       	brne	.-22     	; 0x1f12 <__ultoa_invert+0x6c>
    1f28:	ea cf       	rjmp	.-44     	; 0x1efe <__ultoa_invert+0x58>
    1f2a:	b4 e0       	ldi	r27, 0x04	; 4
    1f2c:	a6 95       	lsr	r26
    1f2e:	97 95       	ror	r25
    1f30:	87 95       	ror	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	ba 95       	dec	r27
    1f38:	c9 f7       	brne	.-14     	; 0x1f2c <__ultoa_invert+0x86>
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	61 05       	cpc	r22, r1
    1f3e:	71 05       	cpc	r23, r1
    1f40:	08 95       	ret
    1f42:	9b 01       	movw	r18, r22
    1f44:	ac 01       	movw	r20, r24
    1f46:	0a 2e       	mov	r0, r26
    1f48:	06 94       	lsr	r0
    1f4a:	57 95       	ror	r21
    1f4c:	47 95       	ror	r20
    1f4e:	37 95       	ror	r19
    1f50:	27 95       	ror	r18
    1f52:	ba 95       	dec	r27
    1f54:	c9 f7       	brne	.-14     	; 0x1f48 <__ultoa_invert+0xa2>
    1f56:	62 0f       	add	r22, r18
    1f58:	73 1f       	adc	r23, r19
    1f5a:	84 1f       	adc	r24, r20
    1f5c:	95 1f       	adc	r25, r21
    1f5e:	a0 1d       	adc	r26, r0
    1f60:	08 95       	ret

00001f62 <__prologue_saves__>:
    1f62:	2f 92       	push	r2
    1f64:	3f 92       	push	r3
    1f66:	4f 92       	push	r4
    1f68:	5f 92       	push	r5
    1f6a:	6f 92       	push	r6
    1f6c:	7f 92       	push	r7
    1f6e:	8f 92       	push	r8
    1f70:	9f 92       	push	r9
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	ca 1b       	sub	r28, r26
    1f8c:	db 0b       	sbc	r29, r27
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	09 94       	ijmp

00001f9a <__epilogue_restores__>:
    1f9a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f9c:	39 88       	ldd	r3, Y+17	; 0x11
    1f9e:	48 88       	ldd	r4, Y+16	; 0x10
    1fa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1faa:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fac:	b9 84       	ldd	r11, Y+9	; 0x09
    1fae:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb0:	df 80       	ldd	r13, Y+7	; 0x07
    1fb2:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb4:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb6:	0c 81       	ldd	r16, Y+4	; 0x04
    1fb8:	1b 81       	ldd	r17, Y+3	; 0x03
    1fba:	aa 81       	ldd	r26, Y+2	; 0x02
    1fbc:	b9 81       	ldd	r27, Y+1	; 0x01
    1fbe:	ce 0f       	add	r28, r30
    1fc0:	d1 1d       	adc	r29, r1
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	ed 01       	movw	r28, r26
    1fce:	08 95       	ret

00001fd0 <_exit>:
    1fd0:	f8 94       	cli

00001fd2 <__stop_program>:
    1fd2:	ff cf       	rjmp	.-2      	; 0x1fd2 <__stop_program>
