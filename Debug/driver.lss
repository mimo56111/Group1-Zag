
driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b00  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001b00  00001b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002640  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000843  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001e0  00000000  00000000  00004a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002000  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d9b  00000000  00000000  0000750a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  000082a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005df  00000000  00000000  000087f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021e0  00000000  00000000  00008dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000afb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
      8a:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_vInit>:
#include "GPIO_MCAL.h"
#define F_CPU 8000000UL
#include "util/delay.h"

void button_vInit( u8 port,u8 pin ){
	GPIO_vsetPIN_DIR(port, pin,0);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
	
}
      98:	08 95       	ret

0000009a <button_u8read>:

u8 button_u8read( u8 port,u8 pin ){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
      9a:	0e 94 16 02 	call	0x42c	; 0x42c <GPIO_u8read_PIN>
	
	return x;
}
      9e:	08 95       	ret

000000a0 <main>:
#include "Data_type.h"
#include "EEPROM_MCAL.h"
#include <avr/interrupt.h>
int main(void){
	
	LCD_vInit(Eight_bit,High_Nibble,'A','B',2,'B',3,'B',4);
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	41 e4       	ldi	r20, 0x41	; 65
      a6:	22 e4       	ldi	r18, 0x42	; 66
      a8:	02 e0       	ldi	r16, 0x02	; 2
      aa:	0f 2e       	mov	r0, r31
      ac:	f2 e4       	ldi	r31, 0x42	; 66
      ae:	ef 2e       	mov	r14, r31
      b0:	f0 2d       	mov	r31, r0
      b2:	0f 2e       	mov	r0, r31
      b4:	f3 e0       	ldi	r31, 0x03	; 3
      b6:	cf 2e       	mov	r12, r31
      b8:	f0 2d       	mov	r31, r0
      ba:	0f 2e       	mov	r0, r31
      bc:	f2 e4       	ldi	r31, 0x42	; 66
      be:	af 2e       	mov	r10, r31
      c0:	f0 2d       	mov	r31, r0
      c2:	88 24       	eor	r8, r8
      c4:	68 94       	set
      c6:	82 f8       	bld	r8, 2
      c8:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_vInit>
	
	LCD_vsend_cmd(Eight_bit,High_Nibble,'A','B',2,64,'B',4);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	41 e4       	ldi	r20, 0x41	; 65
      d2:	22 e4       	ldi	r18, 0x42	; 66
      d4:	ee 24       	eor	r14, r14
      d6:	68 94       	set
      d8:	e6 f8       	bld	r14, 6
      da:	0f 2e       	mov	r0, r31
      dc:	f2 e4       	ldi	r31, 0x42	; 66
      de:	cf 2e       	mov	r12, r31
      e0:	f0 2d       	mov	r31, r0
      e2:	aa 24       	eor	r10, r10
      e4:	68 94       	set
      e6:	a2 f8       	bld	r10, 2
      e8:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,0);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	41 e4       	ldi	r20, 0x41	; 65
      f2:	22 e4       	ldi	r18, 0x42	; 66
      f4:	0f 2e       	mov	r0, r31
      f6:	f2 e4       	ldi	r31, 0x42	; 66
      f8:	ef 2e       	mov	r14, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	cc 24       	eor	r12, r12
      fe:	68 94       	set
     100:	c2 f8       	bld	r12, 2
     102:	aa 24       	eor	r10, r10
     104:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,0);
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	41 e4       	ldi	r20, 0x41	; 65
     10e:	22 e4       	ldi	r18, 0x42	; 66
     110:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,10);
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	61 e0       	ldi	r22, 0x01	; 1
     118:	41 e4       	ldi	r20, 0x41	; 65
     11a:	22 e4       	ldi	r18, 0x42	; 66
     11c:	0f 2e       	mov	r0, r31
     11e:	fa e0       	ldi	r31, 0x0A	; 10
     120:	af 2e       	mov	r10, r31
     122:	f0 2d       	mov	r31, r0
     124:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,21);
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	41 e4       	ldi	r20, 0x41	; 65
     12e:	22 e4       	ldi	r18, 0x42	; 66
     130:	0f 2e       	mov	r0, r31
     132:	f5 e1       	ldi	r31, 0x15	; 21
     134:	af 2e       	mov	r10, r31
     136:	f0 2d       	mov	r31, r0
     138:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,17);
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	41 e4       	ldi	r20, 0x41	; 65
     142:	22 e4       	ldi	r18, 0x42	; 66
     144:	0f 2e       	mov	r0, r31
     146:	f1 e1       	ldi	r31, 0x11	; 17
     148:	af 2e       	mov	r10, r31
     14a:	f0 2d       	mov	r31, r0
     14c:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,10);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	41 e4       	ldi	r20, 0x41	; 65
     156:	22 e4       	ldi	r18, 0x42	; 66
     158:	0f 2e       	mov	r0, r31
     15a:	fa e0       	ldi	r31, 0x0A	; 10
     15c:	af 2e       	mov	r10, r31
     15e:	f0 2d       	mov	r31, r0
     160:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,4);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	41 e4       	ldi	r20, 0x41	; 65
     16a:	22 e4       	ldi	r18, 0x42	; 66
     16c:	aa 24       	eor	r10, r10
     16e:	68 94       	set
     170:	a2 f8       	bld	r10, 2
     172:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,0);
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	41 e4       	ldi	r20, 0x41	; 65
     17c:	22 e4       	ldi	r18, 0x42	; 66
     17e:	aa 24       	eor	r10, r10
     180:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	
	
	LCD_Move_Cursor(Eight_bit,High_Nibble,'A','B',2,'B',4,1,5);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	41 e4       	ldi	r20, 0x41	; 65
     18a:	22 e4       	ldi	r18, 0x42	; 66
     18c:	aa 24       	eor	r10, r10
     18e:	a3 94       	inc	r10
     190:	0f 2e       	mov	r0, r31
     192:	f5 e0       	ldi	r31, 0x05	; 5
     194:	8f 2e       	mov	r8, r31
     196:	f0 2d       	mov	r31, r0
     198:	0e 94 8b 06 	call	0xd16	; 0xd16 <LCD_Move_Cursor>
	
	LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,0);
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	41 e4       	ldi	r20, 0x41	; 65
     1a2:	22 e4       	ldi	r18, 0x42	; 66
     1a4:	aa 24       	eor	r10, r10
     1a6:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
	
	
	
	LCD_vsend_string(Eight_bit,High_Nibble,'A','B',2,'B',4,"Mahmoud");
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	41 e4       	ldi	r20, 0x41	; 65
     1b0:	22 e4       	ldi	r18, 0x42	; 66
     1b2:	0f 2e       	mov	r0, r31
     1b4:	f0 e6       	ldi	r31, 0x60	; 96
     1b6:	af 2e       	mov	r10, r31
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	bf 2e       	mov	r11, r31
     1bc:	f0 2d       	mov	r31, r0
     1be:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_vsend_string>
     1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x122>

000001c4 <EEPROM_Write>:
 */ 
#include "Register.h"
#include "stdmacros.h"
#include "Data_type.h"
void EEPROM_Write(u16 address , u8 value){
	myEEARL = (u8)address;      
     1c4:	8e bb       	out	0x1e, r24	; 30
	myEEARH= (u8)(address>>8);
     1c6:	9f bb       	out	0x1f, r25	; 31
	myEEDR = value;
     1c8:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(myEECR , myEEMWE);
     1ca:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(myEECR , myEEWE);
     1cc:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(myEECR , myEEWE)==1);
     1ce:	e1 99       	sbic	0x1c, 1	; 28
     1d0:	fe cf       	rjmp	.-4      	; 0x1ce <EEPROM_Write+0xa>
}
     1d2:	08 95       	ret

000001d4 <EEPROM_Read>:



u8 EEPROM_Read(const u16 address){
	myEEARL = (u8)address;
     1d4:	8e bb       	out	0x1e, r24	; 30
	myEEARH = (u8)(address>>8);
     1d6:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(myEECR , myEERE);
     1d8:	e0 9a       	sbi	0x1c, 0	; 28
	return myEEDR;
     1da:	8d b3       	in	r24, 0x1d	; 29
     1dc:	08 95       	ret

000001de <GPIO_voidInit>:
#include "GPIO_MCAL.h"

//================================Initialization=======================================
 void GPIO_voidInit(void){
	 /*Comment!: DDR initialization  */
	myDDRA = Init_direction_default;
     1de:	1a ba       	out	0x1a, r1	; 26
	myDDRB = Init_direction_default;
     1e0:	17 ba       	out	0x17, r1	; 23
	myDDRC = Init_direction_default;
     1e2:	14 ba       	out	0x14, r1	; 20
	myDDRD = Init_direction_default;
     1e4:	11 ba       	out	0x11, r1	; 17
 }
     1e6:	08 95       	ret

000001e8 <GPIO_vsetPIN_DIR>:
//=====================================================================================

//===================================PIN===============================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir ){
	switch (portnum){
     1e8:	84 34       	cpi	r24, 0x44	; 68
     1ea:	09 f4       	brne	.+2      	; 0x1ee <GPIO_vsetPIN_DIR+0x6>
     1ec:	71 c0       	rjmp	.+226    	; 0x2d0 <GPIO_vsetPIN_DIR+0xe8>
     1ee:	85 34       	cpi	r24, 0x45	; 69
     1f0:	48 f4       	brcc	.+18     	; 0x204 <GPIO_vsetPIN_DIR+0x1c>
     1f2:	82 34       	cpi	r24, 0x42	; 66
     1f4:	99 f1       	breq	.+102    	; 0x25c <GPIO_vsetPIN_DIR+0x74>
     1f6:	83 34       	cpi	r24, 0x43	; 67
     1f8:	08 f0       	brcs	.+2      	; 0x1fc <GPIO_vsetPIN_DIR+0x14>
     1fa:	4d c0       	rjmp	.+154    	; 0x296 <GPIO_vsetPIN_DIR+0xae>
     1fc:	81 34       	cpi	r24, 0x41	; 65
     1fe:	09 f0       	breq	.+2      	; 0x202 <GPIO_vsetPIN_DIR+0x1a>
     200:	83 c0       	rjmp	.+262    	; 0x308 <GPIO_vsetPIN_DIR+0x120>
     202:	0f c0       	rjmp	.+30     	; 0x222 <GPIO_vsetPIN_DIR+0x3a>
     204:	82 36       	cpi	r24, 0x62	; 98
     206:	51 f1       	breq	.+84     	; 0x25c <GPIO_vsetPIN_DIR+0x74>
     208:	83 36       	cpi	r24, 0x63	; 99
     20a:	20 f4       	brcc	.+8      	; 0x214 <GPIO_vsetPIN_DIR+0x2c>
     20c:	81 36       	cpi	r24, 0x61	; 97
     20e:	09 f0       	breq	.+2      	; 0x212 <GPIO_vsetPIN_DIR+0x2a>
     210:	7b c0       	rjmp	.+246    	; 0x308 <GPIO_vsetPIN_DIR+0x120>
     212:	07 c0       	rjmp	.+14     	; 0x222 <GPIO_vsetPIN_DIR+0x3a>
     214:	83 36       	cpi	r24, 0x63	; 99
     216:	09 f4       	brne	.+2      	; 0x21a <GPIO_vsetPIN_DIR+0x32>
     218:	3e c0       	rjmp	.+124    	; 0x296 <GPIO_vsetPIN_DIR+0xae>
     21a:	84 36       	cpi	r24, 0x64	; 100
     21c:	09 f0       	breq	.+2      	; 0x220 <GPIO_vsetPIN_DIR+0x38>
     21e:	74 c0       	rjmp	.+232    	; 0x308 <GPIO_vsetPIN_DIR+0x120>
     220:	57 c0       	rjmp	.+174    	; 0x2d0 <GPIO_vsetPIN_DIR+0xe8>
		case 'A' :
		case 'a' :
			if(dir == 1){
     222:	41 30       	cpi	r20, 0x01	; 1
     224:	69 f4       	brne	.+26     	; 0x240 <GPIO_vsetPIN_DIR+0x58>
				SET_BIT(myDDRA , pinnum);
     226:	2a b3       	in	r18, 0x1a	; 26
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	ac 01       	movw	r20, r24
     22e:	02 c0       	rjmp	.+4      	; 0x234 <GPIO_vsetPIN_DIR+0x4c>
     230:	44 0f       	add	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	6a 95       	dec	r22
     236:	e2 f7       	brpl	.-8      	; 0x230 <GPIO_vsetPIN_DIR+0x48>
     238:	ba 01       	movw	r22, r20
     23a:	62 2b       	or	r22, r18
     23c:	6a bb       	out	0x1a, r22	; 26
     23e:	08 95       	ret
			}else{
				CLR_BIT(myDDRA , pinnum);
     240:	2a b3       	in	r18, 0x1a	; 26
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	ac 01       	movw	r20, r24
     248:	02 c0       	rjmp	.+4      	; 0x24e <GPIO_vsetPIN_DIR+0x66>
     24a:	44 0f       	add	r20, r20
     24c:	55 1f       	adc	r21, r21
     24e:	6a 95       	dec	r22
     250:	e2 f7       	brpl	.-8      	; 0x24a <GPIO_vsetPIN_DIR+0x62>
     252:	ba 01       	movw	r22, r20
     254:	60 95       	com	r22
     256:	62 23       	and	r22, r18
     258:	6a bb       	out	0x1a, r22	; 26
     25a:	08 95       	ret
			}
			break;
		case 'b' :
		case 'B' :
			if(dir == 1){
     25c:	41 30       	cpi	r20, 0x01	; 1
     25e:	69 f4       	brne	.+26     	; 0x27a <GPIO_vsetPIN_DIR+0x92>
				SET_BIT(myDDRB , pinnum);
     260:	27 b3       	in	r18, 0x17	; 23
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	ac 01       	movw	r20, r24
     268:	02 c0       	rjmp	.+4      	; 0x26e <GPIO_vsetPIN_DIR+0x86>
     26a:	44 0f       	add	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <GPIO_vsetPIN_DIR+0x82>
     272:	ba 01       	movw	r22, r20
     274:	62 2b       	or	r22, r18
     276:	67 bb       	out	0x17, r22	; 23
     278:	08 95       	ret
			}else{
				CLR_BIT(myDDRB , pinnum);
     27a:	27 b3       	in	r18, 0x17	; 23
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	ac 01       	movw	r20, r24
     282:	02 c0       	rjmp	.+4      	; 0x288 <GPIO_vsetPIN_DIR+0xa0>
     284:	44 0f       	add	r20, r20
     286:	55 1f       	adc	r21, r21
     288:	6a 95       	dec	r22
     28a:	e2 f7       	brpl	.-8      	; 0x284 <GPIO_vsetPIN_DIR+0x9c>
     28c:	ba 01       	movw	r22, r20
     28e:	60 95       	com	r22
     290:	62 23       	and	r22, r18
     292:	67 bb       	out	0x17, r22	; 23
     294:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
     296:	41 30       	cpi	r20, 0x01	; 1
     298:	69 f4       	brne	.+26     	; 0x2b4 <GPIO_vsetPIN_DIR+0xcc>
				SET_BIT(myDDRC , pinnum);
     29a:	24 b3       	in	r18, 0x14	; 20
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	ac 01       	movw	r20, r24
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <GPIO_vsetPIN_DIR+0xc0>
     2a4:	44 0f       	add	r20, r20
     2a6:	55 1f       	adc	r21, r21
     2a8:	6a 95       	dec	r22
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <GPIO_vsetPIN_DIR+0xbc>
     2ac:	ba 01       	movw	r22, r20
     2ae:	62 2b       	or	r22, r18
     2b0:	64 bb       	out	0x14, r22	; 20
     2b2:	08 95       	ret
			}else{
				CLR_BIT(myDDRC , pinnum);
     2b4:	24 b3       	in	r18, 0x14	; 20
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	ac 01       	movw	r20, r24
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_vsetPIN_DIR+0xda>
     2be:	44 0f       	add	r20, r20
     2c0:	55 1f       	adc	r21, r21
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_vsetPIN_DIR+0xd6>
     2c6:	ba 01       	movw	r22, r20
     2c8:	60 95       	com	r22
     2ca:	62 23       	and	r22, r18
     2cc:	64 bb       	out	0x14, r22	; 20
     2ce:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
     2d0:	41 30       	cpi	r20, 0x01	; 1
     2d2:	69 f4       	brne	.+26     	; 0x2ee <GPIO_vsetPIN_DIR+0x106>
				SET_BIT(myDDRD , pinnum);
     2d4:	21 b3       	in	r18, 0x11	; 17
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	ac 01       	movw	r20, r24
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <GPIO_vsetPIN_DIR+0xfa>
     2de:	44 0f       	add	r20, r20
     2e0:	55 1f       	adc	r21, r21
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <GPIO_vsetPIN_DIR+0xf6>
     2e6:	ba 01       	movw	r22, r20
     2e8:	62 2b       	or	r22, r18
     2ea:	61 bb       	out	0x11, r22	; 17
     2ec:	08 95       	ret
			}else{
				CLR_BIT(myDDRD , pinnum);
     2ee:	21 b3       	in	r18, 0x11	; 17
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	ac 01       	movw	r20, r24
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <GPIO_vsetPIN_DIR+0x114>
     2f8:	44 0f       	add	r20, r20
     2fa:	55 1f       	adc	r21, r21
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <GPIO_vsetPIN_DIR+0x110>
     300:	ba 01       	movw	r22, r20
     302:	60 95       	com	r22
     304:	62 23       	and	r22, r18
     306:	61 bb       	out	0x11, r22	; 17
     308:	08 95       	ret

0000030a <GPIO_vwrite_PIN>:
	}
	
}

void GPIO_vwrite_PIN(u8 portnum , u8 pinnum , u8 value ){
	switch(portnum){
     30a:	84 34       	cpi	r24, 0x44	; 68
     30c:	09 f4       	brne	.+2      	; 0x310 <GPIO_vwrite_PIN+0x6>
     30e:	71 c0       	rjmp	.+226    	; 0x3f2 <GPIO_vwrite_PIN+0xe8>
     310:	85 34       	cpi	r24, 0x45	; 69
     312:	48 f4       	brcc	.+18     	; 0x326 <GPIO_vwrite_PIN+0x1c>
     314:	82 34       	cpi	r24, 0x42	; 66
     316:	99 f1       	breq	.+102    	; 0x37e <GPIO_vwrite_PIN+0x74>
     318:	83 34       	cpi	r24, 0x43	; 67
     31a:	08 f0       	brcs	.+2      	; 0x31e <GPIO_vwrite_PIN+0x14>
     31c:	4d c0       	rjmp	.+154    	; 0x3b8 <GPIO_vwrite_PIN+0xae>
     31e:	81 34       	cpi	r24, 0x41	; 65
     320:	09 f0       	breq	.+2      	; 0x324 <GPIO_vwrite_PIN+0x1a>
     322:	83 c0       	rjmp	.+262    	; 0x42a <GPIO_vwrite_PIN+0x120>
     324:	0f c0       	rjmp	.+30     	; 0x344 <GPIO_vwrite_PIN+0x3a>
     326:	82 36       	cpi	r24, 0x62	; 98
     328:	51 f1       	breq	.+84     	; 0x37e <GPIO_vwrite_PIN+0x74>
     32a:	83 36       	cpi	r24, 0x63	; 99
     32c:	20 f4       	brcc	.+8      	; 0x336 <GPIO_vwrite_PIN+0x2c>
     32e:	81 36       	cpi	r24, 0x61	; 97
     330:	09 f0       	breq	.+2      	; 0x334 <GPIO_vwrite_PIN+0x2a>
     332:	7b c0       	rjmp	.+246    	; 0x42a <GPIO_vwrite_PIN+0x120>
     334:	07 c0       	rjmp	.+14     	; 0x344 <GPIO_vwrite_PIN+0x3a>
     336:	83 36       	cpi	r24, 0x63	; 99
     338:	09 f4       	brne	.+2      	; 0x33c <GPIO_vwrite_PIN+0x32>
     33a:	3e c0       	rjmp	.+124    	; 0x3b8 <GPIO_vwrite_PIN+0xae>
     33c:	84 36       	cpi	r24, 0x64	; 100
     33e:	09 f0       	breq	.+2      	; 0x342 <GPIO_vwrite_PIN+0x38>
     340:	74 c0       	rjmp	.+232    	; 0x42a <GPIO_vwrite_PIN+0x120>
     342:	57 c0       	rjmp	.+174    	; 0x3f2 <GPIO_vwrite_PIN+0xe8>
		case 'A':
		case 'a':
			if (value ==1){
     344:	41 30       	cpi	r20, 0x01	; 1
     346:	69 f4       	brne	.+26     	; 0x362 <GPIO_vwrite_PIN+0x58>
				SET_BIT(myPORTA , pinnum);
     348:	2b b3       	in	r18, 0x1b	; 27
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	ac 01       	movw	r20, r24
     350:	02 c0       	rjmp	.+4      	; 0x356 <GPIO_vwrite_PIN+0x4c>
     352:	44 0f       	add	r20, r20
     354:	55 1f       	adc	r21, r21
     356:	6a 95       	dec	r22
     358:	e2 f7       	brpl	.-8      	; 0x352 <GPIO_vwrite_PIN+0x48>
     35a:	ba 01       	movw	r22, r20
     35c:	62 2b       	or	r22, r18
     35e:	6b bb       	out	0x1b, r22	; 27
     360:	08 95       	ret
			}else {
				CLR_BIT(myPORTA , pinnum);
     362:	2b b3       	in	r18, 0x1b	; 27
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	ac 01       	movw	r20, r24
     36a:	02 c0       	rjmp	.+4      	; 0x370 <GPIO_vwrite_PIN+0x66>
     36c:	44 0f       	add	r20, r20
     36e:	55 1f       	adc	r21, r21
     370:	6a 95       	dec	r22
     372:	e2 f7       	brpl	.-8      	; 0x36c <GPIO_vwrite_PIN+0x62>
     374:	ba 01       	movw	r22, r20
     376:	60 95       	com	r22
     378:	62 23       	and	r22, r18
     37a:	6b bb       	out	0x1b, r22	; 27
     37c:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if (value ==1){
     37e:	41 30       	cpi	r20, 0x01	; 1
     380:	69 f4       	brne	.+26     	; 0x39c <GPIO_vwrite_PIN+0x92>
				SET_BIT(myPORTB , pinnum);
     382:	28 b3       	in	r18, 0x18	; 24
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	ac 01       	movw	r20, r24
     38a:	02 c0       	rjmp	.+4      	; 0x390 <GPIO_vwrite_PIN+0x86>
     38c:	44 0f       	add	r20, r20
     38e:	55 1f       	adc	r21, r21
     390:	6a 95       	dec	r22
     392:	e2 f7       	brpl	.-8      	; 0x38c <GPIO_vwrite_PIN+0x82>
     394:	ba 01       	movw	r22, r20
     396:	62 2b       	or	r22, r18
     398:	68 bb       	out	0x18, r22	; 24
     39a:	08 95       	ret
			}else {
				CLR_BIT(myPORTB , pinnum);
     39c:	28 b3       	in	r18, 0x18	; 24
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	ac 01       	movw	r20, r24
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <GPIO_vwrite_PIN+0xa0>
     3a6:	44 0f       	add	r20, r20
     3a8:	55 1f       	adc	r21, r21
     3aa:	6a 95       	dec	r22
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <GPIO_vwrite_PIN+0x9c>
     3ae:	ba 01       	movw	r22, r20
     3b0:	60 95       	com	r22
     3b2:	62 23       	and	r22, r18
     3b4:	68 bb       	out	0x18, r22	; 24
     3b6:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (value ==1){
     3b8:	41 30       	cpi	r20, 0x01	; 1
     3ba:	69 f4       	brne	.+26     	; 0x3d6 <GPIO_vwrite_PIN+0xcc>
				SET_BIT(myPORTC , pinnum);
     3bc:	25 b3       	in	r18, 0x15	; 21
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	ac 01       	movw	r20, r24
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_vwrite_PIN+0xc0>
     3c6:	44 0f       	add	r20, r20
     3c8:	55 1f       	adc	r21, r21
     3ca:	6a 95       	dec	r22
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_vwrite_PIN+0xbc>
     3ce:	ba 01       	movw	r22, r20
     3d0:	62 2b       	or	r22, r18
     3d2:	65 bb       	out	0x15, r22	; 21
     3d4:	08 95       	ret
			}else {
				CLR_BIT(myPORTC , pinnum);
     3d6:	25 b3       	in	r18, 0x15	; 21
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	ac 01       	movw	r20, r24
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_vwrite_PIN+0xda>
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	6a 95       	dec	r22
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_vwrite_PIN+0xd6>
     3e8:	ba 01       	movw	r22, r20
     3ea:	60 95       	com	r22
     3ec:	62 23       	and	r22, r18
     3ee:	65 bb       	out	0x15, r22	; 21
     3f0:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (value ==1){
     3f2:	41 30       	cpi	r20, 0x01	; 1
     3f4:	69 f4       	brne	.+26     	; 0x410 <GPIO_vwrite_PIN+0x106>
				SET_BIT(myPORTD , pinnum);
     3f6:	22 b3       	in	r18, 0x12	; 18
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	ac 01       	movw	r20, r24
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <GPIO_vwrite_PIN+0xfa>
     400:	44 0f       	add	r20, r20
     402:	55 1f       	adc	r21, r21
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <GPIO_vwrite_PIN+0xf6>
     408:	ba 01       	movw	r22, r20
     40a:	62 2b       	or	r22, r18
     40c:	62 bb       	out	0x12, r22	; 18
     40e:	08 95       	ret
			}else {
				CLR_BIT(myPORTD , pinnum);
     410:	22 b3       	in	r18, 0x12	; 18
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	ac 01       	movw	r20, r24
     418:	02 c0       	rjmp	.+4      	; 0x41e <GPIO_vwrite_PIN+0x114>
     41a:	44 0f       	add	r20, r20
     41c:	55 1f       	adc	r21, r21
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <GPIO_vwrite_PIN+0x110>
     422:	ba 01       	movw	r22, r20
     424:	60 95       	com	r22
     426:	62 23       	and	r22, r18
     428:	62 bb       	out	0x12, r22	; 18
     42a:	08 95       	ret

0000042c <GPIO_u8read_PIN>:
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
     42c:	84 34       	cpi	r24, 0x44	; 68
     42e:	09 f4       	brne	.+2      	; 0x432 <GPIO_u8read_PIN+0x6>
     430:	4e c0       	rjmp	.+156    	; 0x4ce <GPIO_u8read_PIN+0xa2>
     432:	85 34       	cpi	r24, 0x45	; 69
     434:	40 f4       	brcc	.+16     	; 0x446 <GPIO_u8read_PIN+0x1a>
     436:	82 34       	cpi	r24, 0x42	; 66
     438:	31 f1       	breq	.+76     	; 0x486 <GPIO_u8read_PIN+0x5a>
     43a:	83 34       	cpi	r24, 0x43	; 67
     43c:	b0 f5       	brcc	.+108    	; 0x4aa <GPIO_u8read_PIN+0x7e>
     43e:	81 34       	cpi	r24, 0x41	; 65
     440:	09 f0       	breq	.+2      	; 0x444 <GPIO_u8read_PIN+0x18>
     442:	57 c0       	rjmp	.+174    	; 0x4f2 <GPIO_u8read_PIN+0xc6>
     444:	0e c0       	rjmp	.+28     	; 0x462 <GPIO_u8read_PIN+0x36>
     446:	82 36       	cpi	r24, 0x62	; 98
     448:	f1 f0       	breq	.+60     	; 0x486 <GPIO_u8read_PIN+0x5a>
     44a:	83 36       	cpi	r24, 0x63	; 99
     44c:	20 f4       	brcc	.+8      	; 0x456 <GPIO_u8read_PIN+0x2a>
     44e:	81 36       	cpi	r24, 0x61	; 97
     450:	09 f0       	breq	.+2      	; 0x454 <GPIO_u8read_PIN+0x28>
     452:	4f c0       	rjmp	.+158    	; 0x4f2 <GPIO_u8read_PIN+0xc6>
     454:	06 c0       	rjmp	.+12     	; 0x462 <GPIO_u8read_PIN+0x36>
     456:	83 36       	cpi	r24, 0x63	; 99
     458:	41 f1       	breq	.+80     	; 0x4aa <GPIO_u8read_PIN+0x7e>
     45a:	84 36       	cpi	r24, 0x64	; 100
     45c:	09 f0       	breq	.+2      	; 0x460 <GPIO_u8read_PIN+0x34>
     45e:	49 c0       	rjmp	.+146    	; 0x4f2 <GPIO_u8read_PIN+0xc6>
     460:	36 c0       	rjmp	.+108    	; 0x4ce <GPIO_u8read_PIN+0xa2>
		case 'A':
		case 'a':
			x= READ_BIT(myPINA, pinnum);
     462:	29 b3       	in	r18, 0x19	; 25
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	06 2e       	mov	r0, r22
     46a:	02 c0       	rjmp	.+4      	; 0x470 <GPIO_u8read_PIN+0x44>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <GPIO_u8read_PIN+0x40>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	82 23       	and	r24, r18
     478:	93 23       	and	r25, r19
     47a:	02 c0       	rjmp	.+4      	; 0x480 <GPIO_u8read_PIN+0x54>
     47c:	95 95       	asr	r25
     47e:	87 95       	ror	r24
     480:	6a 95       	dec	r22
     482:	e2 f7       	brpl	.-8      	; 0x47c <GPIO_u8read_PIN+0x50>
			break;
     484:	08 95       	ret
		case 'B':
		case 'b':
			x= READ_BIT(myPINB , pinnum);
     486:	26 b3       	in	r18, 0x16	; 22
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	06 2e       	mov	r0, r22
     48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_u8read_PIN+0x68>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_u8read_PIN+0x64>
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	82 23       	and	r24, r18
     49c:	93 23       	and	r25, r19
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <GPIO_u8read_PIN+0x78>
     4a0:	95 95       	asr	r25
     4a2:	87 95       	ror	r24
     4a4:	6a 95       	dec	r22
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <GPIO_u8read_PIN+0x74>
			break;
     4a8:	08 95       	ret
		case 'C':
		case 'c':
			x= READ_BIT(myPINC , pinnum);
     4aa:	23 b3       	in	r18, 0x13	; 19
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	06 2e       	mov	r0, r22
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <GPIO_u8read_PIN+0x8c>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <GPIO_u8read_PIN+0x88>
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	82 23       	and	r24, r18
     4c0:	93 23       	and	r25, r19
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <GPIO_u8read_PIN+0x9c>
     4c4:	95 95       	asr	r25
     4c6:	87 95       	ror	r24
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <GPIO_u8read_PIN+0x98>
			break;
     4cc:	08 95       	ret
		case 'D':
		case 'd':
			x= READ_BIT(myPIND, pinnum);
     4ce:	20 b3       	in	r18, 0x10	; 16
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	06 2e       	mov	r0, r22
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <GPIO_u8read_PIN+0xb0>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <GPIO_u8read_PIN+0xac>
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	82 23       	and	r24, r18
     4e4:	93 23       	and	r25, r19
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_u8read_PIN+0xc0>
     4e8:	95 95       	asr	r25
     4ea:	87 95       	ror	r24
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_u8read_PIN+0xbc>
			break;
     4f0:	08 95       	ret
		default: break;
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
			x= READ_BIT(myPIND, pinnum);
			break;
		default: break;
	}
	return x;
}
     4f4:	08 95       	ret

000004f6 <GPIO_vtoggle_PIN>:

void GPIO_vtoggle_PIN(u8 portnum, u8 pinnum){
	switch (portnum){
     4f6:	84 34       	cpi	r24, 0x44	; 68
     4f8:	09 f4       	brne	.+2      	; 0x4fc <GPIO_vtoggle_PIN+0x6>
     4fa:	3d c0       	rjmp	.+122    	; 0x576 <GPIO_vtoggle_PIN+0x80>
     4fc:	85 34       	cpi	r24, 0x45	; 69
     4fe:	40 f4       	brcc	.+16     	; 0x510 <GPIO_vtoggle_PIN+0x1a>
     500:	82 34       	cpi	r24, 0x42	; 66
     502:	f9 f0       	breq	.+62     	; 0x542 <GPIO_vtoggle_PIN+0x4c>
     504:	83 34       	cpi	r24, 0x43	; 67
     506:	50 f5       	brcc	.+84     	; 0x55c <GPIO_vtoggle_PIN+0x66>
     508:	81 34       	cpi	r24, 0x41	; 65
     50a:	09 f0       	breq	.+2      	; 0x50e <GPIO_vtoggle_PIN+0x18>
     50c:	40 c0       	rjmp	.+128    	; 0x58e <GPIO_vtoggle_PIN+0x98>
     50e:	0c c0       	rjmp	.+24     	; 0x528 <GPIO_vtoggle_PIN+0x32>
     510:	82 36       	cpi	r24, 0x62	; 98
     512:	b9 f0       	breq	.+46     	; 0x542 <GPIO_vtoggle_PIN+0x4c>
     514:	83 36       	cpi	r24, 0x63	; 99
     516:	18 f4       	brcc	.+6      	; 0x51e <GPIO_vtoggle_PIN+0x28>
     518:	81 36       	cpi	r24, 0x61	; 97
     51a:	c9 f5       	brne	.+114    	; 0x58e <GPIO_vtoggle_PIN+0x98>
     51c:	05 c0       	rjmp	.+10     	; 0x528 <GPIO_vtoggle_PIN+0x32>
     51e:	83 36       	cpi	r24, 0x63	; 99
     520:	e9 f0       	breq	.+58     	; 0x55c <GPIO_vtoggle_PIN+0x66>
     522:	84 36       	cpi	r24, 0x64	; 100
     524:	a1 f5       	brne	.+104    	; 0x58e <GPIO_vtoggle_PIN+0x98>
     526:	27 c0       	rjmp	.+78     	; 0x576 <GPIO_vtoggle_PIN+0x80>
		case 'a' :
		case 'A' :
			TOGGLE_BIT(myPORTA, pinnum);
     528:	2b b3       	in	r18, 0x1b	; 27
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	ac 01       	movw	r20, r24
     530:	02 c0       	rjmp	.+4      	; 0x536 <GPIO_vtoggle_PIN+0x40>
     532:	44 0f       	add	r20, r20
     534:	55 1f       	adc	r21, r21
     536:	6a 95       	dec	r22
     538:	e2 f7       	brpl	.-8      	; 0x532 <GPIO_vtoggle_PIN+0x3c>
     53a:	ba 01       	movw	r22, r20
     53c:	62 27       	eor	r22, r18
     53e:	6b bb       	out	0x1b, r22	; 27
			break;
     540:	08 95       	ret
		case 'b' :
		case 'B' :
			TOGGLE_BIT(myPORTB, pinnum);
     542:	28 b3       	in	r18, 0x18	; 24
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	ac 01       	movw	r20, r24
     54a:	02 c0       	rjmp	.+4      	; 0x550 <GPIO_vtoggle_PIN+0x5a>
     54c:	44 0f       	add	r20, r20
     54e:	55 1f       	adc	r21, r21
     550:	6a 95       	dec	r22
     552:	e2 f7       	brpl	.-8      	; 0x54c <GPIO_vtoggle_PIN+0x56>
     554:	ba 01       	movw	r22, r20
     556:	62 27       	eor	r22, r18
     558:	68 bb       	out	0x18, r22	; 24
			break;
     55a:	08 95       	ret
		case 'c' :
		case 'C' :
			TOGGLE_BIT(myPORTC, pinnum);
     55c:	25 b3       	in	r18, 0x15	; 21
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	ac 01       	movw	r20, r24
     564:	02 c0       	rjmp	.+4      	; 0x56a <GPIO_vtoggle_PIN+0x74>
     566:	44 0f       	add	r20, r20
     568:	55 1f       	adc	r21, r21
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <GPIO_vtoggle_PIN+0x70>
     56e:	ba 01       	movw	r22, r20
     570:	62 27       	eor	r22, r18
     572:	65 bb       	out	0x15, r22	; 21
			break;
     574:	08 95       	ret
		case 'd' :
		case 'D' :
			TOGGLE_BIT(myPORTD, pinnum);
     576:	22 b3       	in	r18, 0x12	; 18
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	ac 01       	movw	r20, r24
     57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_vtoggle_PIN+0x8e>
     580:	44 0f       	add	r20, r20
     582:	55 1f       	adc	r21, r21
     584:	6a 95       	dec	r22
     586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_vtoggle_PIN+0x8a>
     588:	ba 01       	movw	r22, r20
     58a:	62 27       	eor	r22, r18
     58c:	62 bb       	out	0x12, r22	; 18
     58e:	08 95       	ret

00000590 <GPIO_vconnectpullup>:
		default: break;
	}
}

void GPIO_vconnectpullup( u8 port, u8 pin , u8 connect_pullup ){
	switch (port){
     590:	84 34       	cpi	r24, 0x44	; 68
     592:	09 f4       	brne	.+2      	; 0x596 <GPIO_vconnectpullup+0x6>
     594:	7a c0       	rjmp	.+244    	; 0x68a <GPIO_vconnectpullup+0xfa>
     596:	85 34       	cpi	r24, 0x45	; 69
     598:	48 f4       	brcc	.+18     	; 0x5ac <GPIO_vconnectpullup+0x1c>
     59a:	82 34       	cpi	r24, 0x42	; 66
     59c:	b1 f1       	breq	.+108    	; 0x60a <GPIO_vconnectpullup+0x7a>
     59e:	83 34       	cpi	r24, 0x43	; 67
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <GPIO_vconnectpullup+0x14>
     5a2:	53 c0       	rjmp	.+166    	; 0x64a <GPIO_vconnectpullup+0xba>
     5a4:	81 34       	cpi	r24, 0x41	; 65
     5a6:	09 f0       	breq	.+2      	; 0x5aa <GPIO_vconnectpullup+0x1a>
     5a8:	8f c0       	rjmp	.+286    	; 0x6c8 <GPIO_vconnectpullup+0x138>
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <GPIO_vconnectpullup+0x3a>
     5ac:	82 36       	cpi	r24, 0x62	; 98
     5ae:	69 f1       	breq	.+90     	; 0x60a <GPIO_vconnectpullup+0x7a>
     5b0:	83 36       	cpi	r24, 0x63	; 99
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <GPIO_vconnectpullup+0x2c>
     5b4:	81 36       	cpi	r24, 0x61	; 97
     5b6:	09 f0       	breq	.+2      	; 0x5ba <GPIO_vconnectpullup+0x2a>
     5b8:	87 c0       	rjmp	.+270    	; 0x6c8 <GPIO_vconnectpullup+0x138>
     5ba:	07 c0       	rjmp	.+14     	; 0x5ca <GPIO_vconnectpullup+0x3a>
     5bc:	83 36       	cpi	r24, 0x63	; 99
     5be:	09 f4       	brne	.+2      	; 0x5c2 <GPIO_vconnectpullup+0x32>
     5c0:	44 c0       	rjmp	.+136    	; 0x64a <GPIO_vconnectpullup+0xba>
     5c2:	84 36       	cpi	r24, 0x64	; 100
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <GPIO_vconnectpullup+0x38>
     5c6:	80 c0       	rjmp	.+256    	; 0x6c8 <GPIO_vconnectpullup+0x138>
     5c8:	60 c0       	rjmp	.+192    	; 0x68a <GPIO_vconnectpullup+0xfa>
		case 'A' :
		case 'a' :
			if (Connect==connect_pullup){
     5ca:	41 30       	cpi	r20, 0x01	; 1
     5cc:	81 f4       	brne	.+32     	; 0x5ee <GPIO_vconnectpullup+0x5e>
				SET_BIT(myPORTA,pin);
     5ce:	2b b3       	in	r18, 0x1b	; 27
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	ac 01       	movw	r20, r24
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPIO_vconnectpullup+0x4c>
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <GPIO_vconnectpullup+0x48>
     5e0:	ba 01       	movw	r22, r20
     5e2:	62 2b       	or	r22, r18
     5e4:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
     5e6:	80 b7       	in	r24, 0x30	; 48
     5e8:	8b 7f       	andi	r24, 0xFB	; 251
     5ea:	80 bf       	out	0x30, r24	; 48
     5ec:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pin);
     5ee:	2b b3       	in	r18, 0x1b	; 27
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	ac 01       	movw	r20, r24
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <GPIO_vconnectpullup+0x6c>
     5f8:	44 0f       	add	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	6a 95       	dec	r22
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <GPIO_vconnectpullup+0x68>
     600:	ba 01       	movw	r22, r20
     602:	60 95       	com	r22
     604:	62 23       	and	r22, r18
     606:	6b bb       	out	0x1b, r22	; 27
     608:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect==connect_pullup){
     60a:	41 30       	cpi	r20, 0x01	; 1
     60c:	81 f4       	brne	.+32     	; 0x62e <GPIO_vconnectpullup+0x9e>
				SET_BIT(myPORTB,pin);
     60e:	28 b3       	in	r18, 0x18	; 24
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	ac 01       	movw	r20, r24
     616:	02 c0       	rjmp	.+4      	; 0x61c <GPIO_vconnectpullup+0x8c>
     618:	44 0f       	add	r20, r20
     61a:	55 1f       	adc	r21, r21
     61c:	6a 95       	dec	r22
     61e:	e2 f7       	brpl	.-8      	; 0x618 <GPIO_vconnectpullup+0x88>
     620:	ba 01       	movw	r22, r20
     622:	62 2b       	or	r22, r18
     624:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
     626:	80 b7       	in	r24, 0x30	; 48
     628:	8b 7f       	andi	r24, 0xFB	; 251
     62a:	80 bf       	out	0x30, r24	; 48
     62c:	08 95       	ret
			}else{
				CLR_BIT(myPORTB,pin);
     62e:	28 b3       	in	r18, 0x18	; 24
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ac 01       	movw	r20, r24
     636:	02 c0       	rjmp	.+4      	; 0x63c <GPIO_vconnectpullup+0xac>
     638:	44 0f       	add	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <GPIO_vconnectpullup+0xa8>
     640:	ba 01       	movw	r22, r20
     642:	60 95       	com	r22
     644:	62 23       	and	r22, r18
     646:	68 bb       	out	0x18, r22	; 24
     648:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect==connect_pullup){
     64a:	41 30       	cpi	r20, 0x01	; 1
     64c:	81 f4       	brne	.+32     	; 0x66e <GPIO_vconnectpullup+0xde>
				SET_BIT(myPORTC,pin);
     64e:	25 b3       	in	r18, 0x15	; 21
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	ac 01       	movw	r20, r24
     656:	02 c0       	rjmp	.+4      	; 0x65c <GPIO_vconnectpullup+0xcc>
     658:	44 0f       	add	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	6a 95       	dec	r22
     65e:	e2 f7       	brpl	.-8      	; 0x658 <GPIO_vconnectpullup+0xc8>
     660:	ba 01       	movw	r22, r20
     662:	62 2b       	or	r22, r18
     664:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
     666:	80 b7       	in	r24, 0x30	; 48
     668:	8b 7f       	andi	r24, 0xFB	; 251
     66a:	80 bf       	out	0x30, r24	; 48
     66c:	08 95       	ret
			}else{
				CLR_BIT(myPORTC,pin);
     66e:	25 b3       	in	r18, 0x15	; 21
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	ac 01       	movw	r20, r24
     676:	02 c0       	rjmp	.+4      	; 0x67c <GPIO_vconnectpullup+0xec>
     678:	44 0f       	add	r20, r20
     67a:	55 1f       	adc	r21, r21
     67c:	6a 95       	dec	r22
     67e:	e2 f7       	brpl	.-8      	; 0x678 <GPIO_vconnectpullup+0xe8>
     680:	ba 01       	movw	r22, r20
     682:	60 95       	com	r22
     684:	62 23       	and	r22, r18
     686:	65 bb       	out	0x15, r22	; 21
     688:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect==connect_pullup){
     68a:	41 30       	cpi	r20, 0x01	; 1
     68c:	81 f4       	brne	.+32     	; 0x6ae <GPIO_vconnectpullup+0x11e>
				SET_BIT(myPORTD,pin);
     68e:	22 b3       	in	r18, 0x12	; 18
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	ac 01       	movw	r20, r24
     696:	02 c0       	rjmp	.+4      	; 0x69c <GPIO_vconnectpullup+0x10c>
     698:	44 0f       	add	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	6a 95       	dec	r22
     69e:	e2 f7       	brpl	.-8      	; 0x698 <GPIO_vconnectpullup+0x108>
     6a0:	ba 01       	movw	r22, r20
     6a2:	62 2b       	or	r22, r18
     6a4:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
     6a6:	80 b7       	in	r24, 0x30	; 48
     6a8:	8b 7f       	andi	r24, 0xFB	; 251
     6aa:	80 bf       	out	0x30, r24	; 48
     6ac:	08 95       	ret
			}else{
				CLR_BIT(myPORTD,pin);
     6ae:	22 b3       	in	r18, 0x12	; 18
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	ac 01       	movw	r20, r24
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <GPIO_vconnectpullup+0x12c>
     6b8:	44 0f       	add	r20, r20
     6ba:	55 1f       	adc	r21, r21
     6bc:	6a 95       	dec	r22
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <GPIO_vconnectpullup+0x128>
     6c0:	ba 01       	movw	r22, r20
     6c2:	60 95       	com	r22
     6c4:	62 23       	and	r22, r18
     6c6:	62 bb       	out	0x12, r22	; 18
     6c8:	08 95       	ret

000006ca <GPIO_vset_PORT_DIR>:
}

//==================================PORT=============================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
     6ca:	84 34       	cpi	r24, 0x44	; 68
     6cc:	d9 f0       	breq	.+54     	; 0x704 <GPIO_vset_PORT_DIR+0x3a>
     6ce:	85 34       	cpi	r24, 0x45	; 69
     6d0:	38 f4       	brcc	.+14     	; 0x6e0 <GPIO_vset_PORT_DIR+0x16>
     6d2:	82 34       	cpi	r24, 0x42	; 66
     6d4:	99 f0       	breq	.+38     	; 0x6fc <GPIO_vset_PORT_DIR+0x32>
     6d6:	83 34       	cpi	r24, 0x43	; 67
     6d8:	98 f4       	brcc	.+38     	; 0x700 <GPIO_vset_PORT_DIR+0x36>
     6da:	81 34       	cpi	r24, 0x41	; 65
     6dc:	a1 f4       	brne	.+40     	; 0x706 <GPIO_vset_PORT_DIR+0x3c>
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <GPIO_vset_PORT_DIR+0x2e>
     6e0:	82 36       	cpi	r24, 0x62	; 98
     6e2:	61 f0       	breq	.+24     	; 0x6fc <GPIO_vset_PORT_DIR+0x32>
     6e4:	83 36       	cpi	r24, 0x63	; 99
     6e6:	18 f4       	brcc	.+6      	; 0x6ee <GPIO_vset_PORT_DIR+0x24>
     6e8:	81 36       	cpi	r24, 0x61	; 97
     6ea:	69 f4       	brne	.+26     	; 0x706 <GPIO_vset_PORT_DIR+0x3c>
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <GPIO_vset_PORT_DIR+0x2e>
     6ee:	83 36       	cpi	r24, 0x63	; 99
     6f0:	39 f0       	breq	.+14     	; 0x700 <GPIO_vset_PORT_DIR+0x36>
     6f2:	84 36       	cpi	r24, 0x64	; 100
     6f4:	41 f4       	brne	.+16     	; 0x706 <GPIO_vset_PORT_DIR+0x3c>
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <GPIO_vset_PORT_DIR+0x3a>
		case 'A' :
		case 'a' :
			myDDRA = dir;
     6f8:	6a bb       	out	0x1a, r22	; 26
			break;
     6fa:	08 95       	ret
		case 'b' :
		case 'B' :
			myDDRB = dir;
     6fc:	67 bb       	out	0x17, r22	; 23
			break;
     6fe:	08 95       	ret
		case 'c' :
		case 'C' :
			myDDRC = dir;
     700:	64 bb       	out	0x14, r22	; 20
			break;
     702:	08 95       	ret
		case 'd' :
		case 'D' :
			myDDRD = dir;
     704:	61 bb       	out	0x11, r22	; 17
     706:	08 95       	ret

00000708 <GPIO_vwrite_PORT>:
		default: break;
	}
}

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
     708:	84 34       	cpi	r24, 0x44	; 68
     70a:	d9 f0       	breq	.+54     	; 0x742 <GPIO_vwrite_PORT+0x3a>
     70c:	85 34       	cpi	r24, 0x45	; 69
     70e:	38 f4       	brcc	.+14     	; 0x71e <GPIO_vwrite_PORT+0x16>
     710:	82 34       	cpi	r24, 0x42	; 66
     712:	99 f0       	breq	.+38     	; 0x73a <GPIO_vwrite_PORT+0x32>
     714:	83 34       	cpi	r24, 0x43	; 67
     716:	98 f4       	brcc	.+38     	; 0x73e <GPIO_vwrite_PORT+0x36>
     718:	81 34       	cpi	r24, 0x41	; 65
     71a:	a1 f4       	brne	.+40     	; 0x744 <GPIO_vwrite_PORT+0x3c>
     71c:	0c c0       	rjmp	.+24     	; 0x736 <GPIO_vwrite_PORT+0x2e>
     71e:	82 36       	cpi	r24, 0x62	; 98
     720:	61 f0       	breq	.+24     	; 0x73a <GPIO_vwrite_PORT+0x32>
     722:	83 36       	cpi	r24, 0x63	; 99
     724:	18 f4       	brcc	.+6      	; 0x72c <GPIO_vwrite_PORT+0x24>
     726:	81 36       	cpi	r24, 0x61	; 97
     728:	69 f4       	brne	.+26     	; 0x744 <GPIO_vwrite_PORT+0x3c>
     72a:	05 c0       	rjmp	.+10     	; 0x736 <GPIO_vwrite_PORT+0x2e>
     72c:	83 36       	cpi	r24, 0x63	; 99
     72e:	39 f0       	breq	.+14     	; 0x73e <GPIO_vwrite_PORT+0x36>
     730:	84 36       	cpi	r24, 0x64	; 100
     732:	41 f4       	brne	.+16     	; 0x744 <GPIO_vwrite_PORT+0x3c>
     734:	06 c0       	rjmp	.+12     	; 0x742 <GPIO_vwrite_PORT+0x3a>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
     736:	6b bb       	out	0x1b, r22	; 27
			break;
     738:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
     73a:	68 bb       	out	0x18, r22	; 24
			break;
     73c:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
     73e:	65 bb       	out	0x15, r22	; 21
			break;
     740:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
     742:	62 bb       	out	0x12, r22	; 18
     744:	08 95       	ret

00000746 <GPIO_vtoggle_PORT>:
		default: break;
	}
}

void GPIO_vtoggle_PORT(u8 portnum){
	switch (portnum){
     746:	84 34       	cpi	r24, 0x44	; 68
     748:	09 f1       	breq	.+66     	; 0x78c <GPIO_vtoggle_PORT+0x46>
     74a:	85 34       	cpi	r24, 0x45	; 69
     74c:	38 f4       	brcc	.+14     	; 0x75c <GPIO_vtoggle_PORT+0x16>
     74e:	82 34       	cpi	r24, 0x42	; 66
     750:	a9 f0       	breq	.+42     	; 0x77c <GPIO_vtoggle_PORT+0x36>
     752:	83 34       	cpi	r24, 0x43	; 67
     754:	b8 f4       	brcc	.+46     	; 0x784 <GPIO_vtoggle_PORT+0x3e>
     756:	81 34       	cpi	r24, 0x41	; 65
     758:	e1 f4       	brne	.+56     	; 0x792 <GPIO_vtoggle_PORT+0x4c>
     75a:	0c c0       	rjmp	.+24     	; 0x774 <GPIO_vtoggle_PORT+0x2e>
     75c:	82 36       	cpi	r24, 0x62	; 98
     75e:	71 f0       	breq	.+28     	; 0x77c <GPIO_vtoggle_PORT+0x36>
     760:	83 36       	cpi	r24, 0x63	; 99
     762:	18 f4       	brcc	.+6      	; 0x76a <GPIO_vtoggle_PORT+0x24>
     764:	81 36       	cpi	r24, 0x61	; 97
     766:	a9 f4       	brne	.+42     	; 0x792 <GPIO_vtoggle_PORT+0x4c>
     768:	05 c0       	rjmp	.+10     	; 0x774 <GPIO_vtoggle_PORT+0x2e>
     76a:	83 36       	cpi	r24, 0x63	; 99
     76c:	59 f0       	breq	.+22     	; 0x784 <GPIO_vtoggle_PORT+0x3e>
     76e:	84 36       	cpi	r24, 0x64	; 100
     770:	81 f4       	brne	.+32     	; 0x792 <GPIO_vtoggle_PORT+0x4c>
     772:	0c c0       	rjmp	.+24     	; 0x78c <GPIO_vtoggle_PORT+0x46>
		case 'A' :
		case 'a' :
			myPORTA = ~myPORTA;
     774:	8b b3       	in	r24, 0x1b	; 27
     776:	80 95       	com	r24
     778:	8b bb       	out	0x1b, r24	; 27
			break;
     77a:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = ~myPORTB;
     77c:	88 b3       	in	r24, 0x18	; 24
     77e:	80 95       	com	r24
     780:	88 bb       	out	0x18, r24	; 24
			break;
     782:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = ~myPORTC;
     784:	85 b3       	in	r24, 0x15	; 21
     786:	80 95       	com	r24
     788:	85 bb       	out	0x15, r24	; 21
			break;
     78a:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = ~myPORTD;
     78c:	82 b3       	in	r24, 0x12	; 18
     78e:	80 95       	com	r24
     790:	82 bb       	out	0x12, r24	; 18
     792:	08 95       	ret

00000794 <GPIO_read_PORT>:
			break;
		default: break;
	}
}
u8 GPIO_read_PORT(u8 portnum){
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	0f 92       	push	r0
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
	volatile u8 val=0;
     79e:	19 82       	std	Y+1, r1	; 0x01
	switch (portnum){
     7a0:	84 34       	cpi	r24, 0x44	; 68
     7a2:	f1 f0       	breq	.+60     	; 0x7e0 <GPIO_read_PORT+0x4c>
     7a4:	85 34       	cpi	r24, 0x45	; 69
     7a6:	38 f4       	brcc	.+14     	; 0x7b6 <GPIO_read_PORT+0x22>
     7a8:	82 34       	cpi	r24, 0x42	; 66
     7aa:	a1 f0       	breq	.+40     	; 0x7d4 <GPIO_read_PORT+0x40>
     7ac:	83 34       	cpi	r24, 0x43	; 67
     7ae:	a8 f4       	brcc	.+42     	; 0x7da <GPIO_read_PORT+0x46>
     7b0:	81 34       	cpi	r24, 0x41	; 65
     7b2:	c1 f4       	brne	.+48     	; 0x7e4 <GPIO_read_PORT+0x50>
     7b4:	0c c0       	rjmp	.+24     	; 0x7ce <GPIO_read_PORT+0x3a>
     7b6:	82 36       	cpi	r24, 0x62	; 98
     7b8:	69 f0       	breq	.+26     	; 0x7d4 <GPIO_read_PORT+0x40>
     7ba:	83 36       	cpi	r24, 0x63	; 99
     7bc:	18 f4       	brcc	.+6      	; 0x7c4 <GPIO_read_PORT+0x30>
     7be:	81 36       	cpi	r24, 0x61	; 97
     7c0:	89 f4       	brne	.+34     	; 0x7e4 <GPIO_read_PORT+0x50>
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <GPIO_read_PORT+0x3a>
     7c4:	83 36       	cpi	r24, 0x63	; 99
     7c6:	49 f0       	breq	.+18     	; 0x7da <GPIO_read_PORT+0x46>
     7c8:	84 36       	cpi	r24, 0x64	; 100
     7ca:	61 f4       	brne	.+24     	; 0x7e4 <GPIO_read_PORT+0x50>
     7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <GPIO_read_PORT+0x4c>
		case 'a' :
		case 'A' :
			val = myPINA;
     7ce:	89 b3       	in	r24, 0x19	; 25
     7d0:	89 83       	std	Y+1, r24	; 0x01
			break;
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <GPIO_read_PORT+0x50>
		case 'b' :
		case 'B' :
			val = myPINB;
     7d4:	86 b3       	in	r24, 0x16	; 22
     7d6:	89 83       	std	Y+1, r24	; 0x01
			break;
     7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <GPIO_read_PORT+0x50>
		case 'c' :
		case 'C' :
			val = myPINC;
     7da:	83 b3       	in	r24, 0x13	; 19
     7dc:	89 83       	std	Y+1, r24	; 0x01
			break;
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <GPIO_read_PORT+0x50>
		case 'd' :
		case 'D' :
			val = myPIND;
     7e0:	80 b3       	in	r24, 0x10	; 16
     7e2:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
}
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <GPIO_High_Nibble_vset_dir>:
//=====================================================================================

//==================================Nibble=============================================

//==================================High Nibble========================================
void GPIO_High_Nibble_vset_dir(u8 port,u8 dir){
     7ec:	cf 93       	push	r28
     7ee:	c8 2f       	mov	r28, r24
	if (1==dir){
     7f0:	61 30       	cpi	r22, 0x01	; 1
     7f2:	a1 f4       	brne	.+40     	; 0x81c <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
     7f4:	64 e0       	ldi	r22, 0x04	; 4
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
     7fc:	8c 2f       	mov	r24, r28
     7fe:	65 e0       	ldi	r22, 0x05	; 5
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
     806:	8c 2f       	mov	r24, r28
     808:	66 e0       	ldi	r22, 0x06	; 6
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
     810:	8c 2f       	mov	r24, r28
     812:	67 e0       	ldi	r22, 0x07	; 7
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
     81a:	13 c0       	rjmp	.+38     	; 0x842 <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
     81c:	64 e0       	ldi	r22, 0x04	; 4
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
     824:	8c 2f       	mov	r24, r28
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
     82e:	8c 2f       	mov	r24, r28
     830:	66 e0       	ldi	r22, 0x06	; 6
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
     838:	8c 2f       	mov	r24, r28
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
	}
	
}
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <GPIO_High_Nibble_vwrite>:

void GPIO_High_Nibble_vwrite( u8 port , u8 value ){
	value <<= 4;   
     846:	62 95       	swap	r22
     848:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){    
     84a:	84 34       	cpi	r24, 0x44	; 68
     84c:	51 f1       	breq	.+84     	; 0x8a2 <__stack+0x43>
     84e:	85 34       	cpi	r24, 0x45	; 69
     850:	38 f4       	brcc	.+14     	; 0x860 <__stack+0x1>
     852:	82 34       	cpi	r24, 0x42	; 66
     854:	c1 f0       	breq	.+48     	; 0x886 <__stack+0x27>
     856:	83 34       	cpi	r24, 0x43	; 67
     858:	e8 f4       	brcc	.+58     	; 0x894 <__stack+0x35>
     85a:	81 34       	cpi	r24, 0x41	; 65
     85c:	41 f5       	brne	.+80     	; 0x8ae <__stack+0x4f>
     85e:	0c c0       	rjmp	.+24     	; 0x878 <__stack+0x19>
     860:	82 36       	cpi	r24, 0x62	; 98
     862:	89 f0       	breq	.+34     	; 0x886 <__stack+0x27>
     864:	83 36       	cpi	r24, 0x63	; 99
     866:	18 f4       	brcc	.+6      	; 0x86e <__stack+0xf>
     868:	81 36       	cpi	r24, 0x61	; 97
     86a:	09 f5       	brne	.+66     	; 0x8ae <__stack+0x4f>
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	83 36       	cpi	r24, 0x63	; 99
     870:	89 f0       	breq	.+34     	; 0x894 <__stack+0x35>
     872:	84 36       	cpi	r24, 0x64	; 100
     874:	e1 f4       	brne	.+56     	; 0x8ae <__stack+0x4f>
     876:	15 c0       	rjmp	.+42     	; 0x8a2 <__stack+0x43>
		case 'A':
		case 'a':			
			myPORTA &=0x0f; 
     878:	8b b3       	in	r24, 0x1b	; 27
     87a:	8f 70       	andi	r24, 0x0F	; 15
     87c:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     87e:	8b b3       	in	r24, 0x1b	; 27
     880:	68 2b       	or	r22, r24
     882:	6b bb       	out	0x1b, r22	; 27
			break;				
     884:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0x0f;
     886:	88 b3       	in	r24, 0x18	; 24
     888:	8f 70       	andi	r24, 0x0F	; 15
     88a:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     88c:	88 b3       	in	r24, 0x18	; 24
     88e:	68 2b       	or	r22, r24
     890:	68 bb       	out	0x18, r22	; 24
			break;
     892:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0x0f;
     894:	85 b3       	in	r24, 0x15	; 21
     896:	8f 70       	andi	r24, 0x0F	; 15
     898:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     89a:	85 b3       	in	r24, 0x15	; 21
     89c:	68 2b       	or	r22, r24
     89e:	65 bb       	out	0x15, r22	; 21
			break;
     8a0:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0x0f;
     8a2:	82 b3       	in	r24, 0x12	; 18
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     8a8:	82 b3       	in	r24, 0x12	; 18
     8aa:	68 2b       	or	r22, r24
     8ac:	62 bb       	out	0x12, r22	; 18
     8ae:	08 95       	ret

000008b0 <GPIO_Low_Nibble_vset_dir>:
		default: break;
	}
}

//==================================Low Nibble========================================
void GPIO_Low_Nibble_vset_dir(u8 port,u8 dir){
     8b0:	cf 93       	push	r28
     8b2:	c8 2f       	mov	r28, r24
	if (1==dir){
     8b4:	61 30       	cpi	r22, 0x01	; 1
     8b6:	a1 f4       	brne	.+40     	; 0x8e0 <GPIO_Low_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,0,1);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
     8c0:	8c 2f       	mov	r24, r28
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
     8ca:	8c 2f       	mov	r24, r28
     8cc:	62 e0       	ldi	r22, 0x02	; 2
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
     8d4:	8c 2f       	mov	r24, r28
     8d6:	63 e0       	ldi	r22, 0x03	; 3
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
     8de:	13 c0       	rjmp	.+38     	; 0x906 <GPIO_Low_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,0,0);
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
     8e8:	8c 2f       	mov	r24, r28
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
     8f2:	8c 2f       	mov	r24, r28
     8f4:	62 e0       	ldi	r22, 0x02	; 2
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
     8fc:	8c 2f       	mov	r24, r28
     8fe:	63 e0       	ldi	r22, 0x03	; 3
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
	}
}
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <GPIO_Low_Nibble_vwrite>:

void GPIO_Low_Nibble_vwrite( u8 port , u8 value ){
	value &=0x0f;
     90a:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
     90c:	84 34       	cpi	r24, 0x44	; 68
     90e:	51 f1       	breq	.+84     	; 0x964 <GPIO_Low_Nibble_vwrite+0x5a>
     910:	85 34       	cpi	r24, 0x45	; 69
     912:	38 f4       	brcc	.+14     	; 0x922 <GPIO_Low_Nibble_vwrite+0x18>
     914:	82 34       	cpi	r24, 0x42	; 66
     916:	c1 f0       	breq	.+48     	; 0x948 <GPIO_Low_Nibble_vwrite+0x3e>
     918:	83 34       	cpi	r24, 0x43	; 67
     91a:	e8 f4       	brcc	.+58     	; 0x956 <GPIO_Low_Nibble_vwrite+0x4c>
     91c:	81 34       	cpi	r24, 0x41	; 65
     91e:	41 f5       	brne	.+80     	; 0x970 <GPIO_Low_Nibble_vwrite+0x66>
     920:	0c c0       	rjmp	.+24     	; 0x93a <GPIO_Low_Nibble_vwrite+0x30>
     922:	82 36       	cpi	r24, 0x62	; 98
     924:	89 f0       	breq	.+34     	; 0x948 <GPIO_Low_Nibble_vwrite+0x3e>
     926:	83 36       	cpi	r24, 0x63	; 99
     928:	18 f4       	brcc	.+6      	; 0x930 <GPIO_Low_Nibble_vwrite+0x26>
     92a:	81 36       	cpi	r24, 0x61	; 97
     92c:	09 f5       	brne	.+66     	; 0x970 <GPIO_Low_Nibble_vwrite+0x66>
     92e:	05 c0       	rjmp	.+10     	; 0x93a <GPIO_Low_Nibble_vwrite+0x30>
     930:	83 36       	cpi	r24, 0x63	; 99
     932:	89 f0       	breq	.+34     	; 0x956 <GPIO_Low_Nibble_vwrite+0x4c>
     934:	84 36       	cpi	r24, 0x64	; 100
     936:	e1 f4       	brne	.+56     	; 0x970 <GPIO_Low_Nibble_vwrite+0x66>
     938:	15 c0       	rjmp	.+42     	; 0x964 <GPIO_Low_Nibble_vwrite+0x5a>
		case 'A':
		case 'a':
			myPORTA &=0xf0;
     93a:	8b b3       	in	r24, 0x1b	; 27
     93c:	80 7f       	andi	r24, 0xF0	; 240
     93e:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     940:	8b b3       	in	r24, 0x1b	; 27
     942:	68 2b       	or	r22, r24
     944:	6b bb       	out	0x1b, r22	; 27
			break;
     946:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0xf0;
     948:	88 b3       	in	r24, 0x18	; 24
     94a:	80 7f       	andi	r24, 0xF0	; 240
     94c:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     94e:	88 b3       	in	r24, 0x18	; 24
     950:	68 2b       	or	r22, r24
     952:	68 bb       	out	0x18, r22	; 24
			break;
     954:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0xf0;
     956:	85 b3       	in	r24, 0x15	; 21
     958:	80 7f       	andi	r24, 0xF0	; 240
     95a:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     95c:	85 b3       	in	r24, 0x15	; 21
     95e:	68 2b       	or	r22, r24
     960:	65 bb       	out	0x15, r22	; 21
			break;
     962:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0xf0;
     964:	82 b3       	in	r24, 0x12	; 18
     966:	80 7f       	andi	r24, 0xF0	; 240
     968:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     96a:	82 b3       	in	r24, 0x12	; 18
     96c:	68 2b       	or	r22, r24
     96e:	62 bb       	out	0x12, r22	; 18
     970:	08 95       	ret

00000972 <send_falling_edge>:
			_delay_ms(1);
		}
	}
}

  static void send_falling_edge(u8 EN_port,u8 EN_pin){
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	d8 2f       	mov	r29, r24
     978:	c6 2f       	mov	r28, r22
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
     97a:	41 e0       	ldi	r20, 0x01	; 1
     97c:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     980:	8f e9       	ldi	r24, 0x9F	; 159
     982:	9f e0       	ldi	r25, 0x0F	; 15
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <send_falling_edge+0x12>
     988:	00 c0       	rjmp	.+0      	; 0x98a <send_falling_edge+0x18>
     98a:	00 00       	nop
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
     98c:	8d 2f       	mov	r24, r29
     98e:	6c 2f       	mov	r22, r28
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <LCD_vsend_cmd>:
			_delay_ms(1);
		}
	}
}

void LCD_vsend_cmd(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 cmd,u8 EN_port,u8 EN_pin){
     99c:	af 92       	push	r10
     99e:	cf 92       	push	r12
     9a0:	ef 92       	push	r14
     9a2:	0f 93       	push	r16
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	c4 2f       	mov	r28, r20
     9aa:	d2 2f       	mov	r29, r18
	if(1==Mode){
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	71 f4       	brne	.+28     	; 0x9cc <LCD_vsend_cmd+0x30>
		GPIO_vwrite_PORT(port,cmd);
     9b0:	84 2f       	mov	r24, r20
     9b2:	6e 2d       	mov	r22, r14
     9b4:	0e 94 84 03 	call	0x708	; 0x708 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9b8:	8d 2f       	mov	r24, r29
     9ba:	60 2f       	mov	r22, r16
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     9c2:	8c 2d       	mov	r24, r12
     9c4:	6a 2d       	mov	r22, r10
     9c6:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
     9ca:	47 c0       	rjmp	.+142    	; 0xa5a <LCD_vsend_cmd+0xbe>
	}else {
		if (1==Nibble){
     9cc:	61 30       	cpi	r22, 0x01	; 1
     9ce:	19 f5       	brne	.+70     	; 0xa16 <LCD_vsend_cmd+0x7a>
			GPIO_High_Nibble_vwrite(port,cmd>>4);     
     9d0:	6e 2d       	mov	r22, r14
     9d2:	62 95       	swap	r22
     9d4:	6f 70       	andi	r22, 0x0F	; 15
     9d6:	84 2f       	mov	r24, r20
     9d8:	0e 94 23 04 	call	0x846	; 0x846 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9dc:	8d 2f       	mov	r24, r29
     9de:	60 2f       	mov	r22, r16
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     9e6:	8c 2d       	mov	r24, r12
     9e8:	6a 2d       	mov	r22, r10
     9ea:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,cmd);
     9ee:	8c 2f       	mov	r24, r28
     9f0:	6e 2d       	mov	r22, r14
     9f2:	0e 94 23 04 	call	0x846	; 0x846 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9f6:	8d 2f       	mov	r24, r29
     9f8:	60 2f       	mov	r22, r16
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a00:	8c 2d       	mov	r24, r12
     a02:	6a 2d       	mov	r22, r10
     a04:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
     a08:	8f ec       	ldi	r24, 0xCF	; 207
     a0a:	97 e0       	ldi	r25, 0x07	; 7
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCD_vsend_cmd+0x70>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_vsend_cmd+0x76>
     a12:	00 00       	nop
     a14:	22 c0       	rjmp	.+68     	; 0xa5a <LCD_vsend_cmd+0xbe>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,cmd>>4);   
     a16:	6e 2d       	mov	r22, r14
     a18:	62 95       	swap	r22
     a1a:	6f 70       	andi	r22, 0x0F	; 15
     a1c:	84 2f       	mov	r24, r20
     a1e:	0e 94 85 04 	call	0x90a	; 0x90a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a22:	8d 2f       	mov	r24, r29
     a24:	60 2f       	mov	r22, r16
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a2c:	8c 2d       	mov	r24, r12
     a2e:	6a 2d       	mov	r22, r10
     a30:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,cmd);
     a34:	8c 2f       	mov	r24, r28
     a36:	6e 2d       	mov	r22, r14
     a38:	0e 94 85 04 	call	0x90a	; 0x90a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a3c:	8d 2f       	mov	r24, r29
     a3e:	60 2f       	mov	r22, r16
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a46:	8c 2d       	mov	r24, r12
     a48:	6a 2d       	mov	r22, r10
     a4a:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
     a4e:	8f ec       	ldi	r24, 0xCF	; 207
     a50:	97 e0       	ldi	r25, 0x07	; 7
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <LCD_vsend_cmd+0xb6>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <LCD_vsend_cmd+0xbc>
     a58:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	0f 91       	pop	r16
     a60:	ef 90       	pop	r14
     a62:	cf 90       	pop	r12
     a64:	af 90       	pop	r10
     a66:	08 95       	ret

00000a68 <LCD_vInit>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

void LCD_vInit(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin, u8 RW_port, u8 RW_pin,u8 EN_port,u8 EN_pin){
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	18 2f       	mov	r17, r24
     a88:	f6 2e       	mov	r15, r22
     a8a:	74 2e       	mov	r7, r20
     a8c:	92 2e       	mov	r9, r18
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	91 ee       	ldi	r25, 0xE1	; 225
     a92:	a4 e0       	ldi	r26, 0x04	; 4
     a94:	81 50       	subi	r24, 0x01	; 1
     a96:	90 40       	sbci	r25, 0x00	; 0
     a98:	a0 40       	sbci	r26, 0x00	; 0
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <LCD_vInit+0x2c>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <LCD_vInit+0x36>
     a9e:	00 00       	nop
	_delay_ms(200);
	GPIO_vsetPIN_DIR(RS_port,RS_pin,1);
     aa0:	82 2f       	mov	r24, r18
     aa2:	60 2f       	mov	r22, r16
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(RW_port,RW_pin,1);
     aaa:	8e 2d       	mov	r24, r14
     aac:	6c 2d       	mov	r22, r12
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(EN_port,EN_pin,1);
     ab4:	8a 2d       	mov	r24, r10
     ab6:	68 2d       	mov	r22, r8
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
	if (1==Mode){
     abe:	11 30       	cpi	r17, 0x01	; 1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <LCD_vInit+0x5c>
     ac2:	50 c0       	rjmp	.+160    	; 0xb64 <LCD_vInit+0xfc>
		GPIO_vset_PORT_DIR(port,0xff);
     ac4:	87 2d       	mov	r24, r7
     ac6:	6f ef       	ldi	r22, 0xFF	; 255
     ac8:	0e 94 65 03 	call	0x6ca	; 0x6ca <GPIO_vset_PORT_DIR>
		GPIO_vwrite_PIN(RW_port,RW_pin,0);
     acc:	8e 2d       	mov	r24, r14
     ace:	6c 2d       	mov	r22, r12
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
     ad6:	af e2       	ldi	r26, 0x2F	; 47
     ad8:	b5 e7       	ldi	r27, 0x75	; 117
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <LCD_vInit+0x72>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <LCD_vInit+0x78>
     ae0:	00 00       	nop
		_delay_ms(15);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_8BIT_2Lines,EN_port,EN_pin);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	6f 2d       	mov	r22, r15
     ae6:	47 2d       	mov	r20, r7
     ae8:	29 2d       	mov	r18, r9
     aea:	0f 2e       	mov	r0, r31
     aec:	f8 e3       	ldi	r31, 0x38	; 56
     aee:	ef 2e       	mov	r14, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	ca 2c       	mov	r12, r10
     af4:	a8 2c       	mov	r10, r8
     af6:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     afa:	8f ec       	ldi	r24, 0xCF	; 207
     afc:	97 e0       	ldi	r25, 0x07	; 7
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <LCD_vInit+0x96>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <LCD_vInit+0x9c>
     b04:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	6f 2d       	mov	r22, r15
     b0a:	47 2d       	mov	r20, r7
     b0c:	29 2d       	mov	r18, r9
     b0e:	0f 2e       	mov	r0, r31
     b10:	fe e0       	ldi	r31, 0x0E	; 14
     b12:	ef 2e       	mov	r14, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     b1a:	af ec       	ldi	r26, 0xCF	; 207
     b1c:	b7 e0       	ldi	r27, 0x07	; 7
     b1e:	11 97       	sbiw	r26, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <LCD_vInit+0xb6>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <LCD_vInit+0xbc>
     b24:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	6f 2d       	mov	r22, r15
     b2a:	47 2d       	mov	r20, r7
     b2c:	29 2d       	mov	r18, r9
     b2e:	ee 24       	eor	r14, r14
     b30:	e3 94       	inc	r14
     b32:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     b36:	8f e1       	ldi	r24, 0x1F	; 31
     b38:	9e e4       	ldi	r25, 0x4E	; 78
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <LCD_vInit+0xd2>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <LCD_vInit+0xd8>
     b40:	00 00       	nop
		_delay_ms(10);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	6f 2d       	mov	r22, r15
     b46:	47 2d       	mov	r20, r7
     b48:	29 2d       	mov	r18, r9
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f6 e0       	ldi	r31, 0x06	; 6
     b4e:	ef 2e       	mov	r14, r31
     b50:	f0 2d       	mov	r31, r0
     b52:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     b56:	af ec       	ldi	r26, 0xCF	; 207
     b58:	b7 e0       	ldi	r27, 0x07	; 7
     b5a:	11 97       	sbiw	r26, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <LCD_vInit+0xf2>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <LCD_vInit+0xf8>
     b60:	00 00       	nop
     b62:	b5 c0       	rjmp	.+362    	; 0xcce <LCD_vInit+0x266>
		_delay_ms(1);
		
	}else{
		if (1==Nibble){
     b64:	b1 e0       	ldi	r27, 0x01	; 1
     b66:	fb 16       	cp	r15, r27
     b68:	09 f0       	breq	.+2      	; 0xb6c <LCD_vInit+0x104>
     b6a:	59 c0       	rjmp	.+178    	; 0xc1e <LCD_vInit+0x1b6>
			GPIO_High_Nibble_vset_dir(port,1);
     b6c:	87 2d       	mov	r24, r7
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 f6 03 	call	0x7ec	; 0x7ec <GPIO_High_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     b74:	8e 2d       	mov	r24, r14
     b76:	6c 2d       	mov	r22, r12
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     b7e:	81 2f       	mov	r24, r17
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	47 2d       	mov	r20, r7
     b84:	29 2d       	mov	r18, r9
     b86:	ee 24       	eor	r14, r14
     b88:	68 94       	set
     b8a:	e1 f8       	bld	r14, 1
     b8c:	ca 2c       	mov	r12, r10
     b8e:	a8 2c       	mov	r10, r8
     b90:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     b94:	8f e2       	ldi	r24, 0x2F	; 47
     b96:	95 e7       	ldi	r25, 0x75	; 117
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <LCD_vInit+0x130>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <LCD_vInit+0x136>
     b9e:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     ba0:	81 2f       	mov	r24, r17
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	47 2d       	mov	r20, r7
     ba6:	29 2d       	mov	r18, r9
     ba8:	0f 2e       	mov	r0, r31
     baa:	f8 e2       	ldi	r31, 0x28	; 40
     bac:	ef 2e       	mov	r14, r31
     bae:	f0 2d       	mov	r31, r0
     bb0:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     bb4:	af ec       	ldi	r26, 0xCF	; 207
     bb6:	b7 e0       	ldi	r27, 0x07	; 7
     bb8:	11 97       	sbiw	r26, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <LCD_vInit+0x150>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <LCD_vInit+0x156>
     bbe:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     bc0:	81 2f       	mov	r24, r17
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	47 2d       	mov	r20, r7
     bc6:	29 2d       	mov	r18, r9
     bc8:	0f 2e       	mov	r0, r31
     bca:	fe e0       	ldi	r31, 0x0E	; 14
     bcc:	ef 2e       	mov	r14, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     bd4:	8f ec       	ldi	r24, 0xCF	; 207
     bd6:	97 e0       	ldi	r25, 0x07	; 7
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <LCD_vInit+0x170>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <LCD_vInit+0x176>
     bde:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     be0:	81 2f       	mov	r24, r17
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	47 2d       	mov	r20, r7
     be6:	29 2d       	mov	r18, r9
     be8:	ee 24       	eor	r14, r14
     bea:	e3 94       	inc	r14
     bec:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     bf0:	af e1       	ldi	r26, 0x1F	; 31
     bf2:	be e4       	ldi	r27, 0x4E	; 78
     bf4:	11 97       	sbiw	r26, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <LCD_vInit+0x18c>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <LCD_vInit+0x192>
     bfa:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     bfc:	81 2f       	mov	r24, r17
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	47 2d       	mov	r20, r7
     c02:	29 2d       	mov	r18, r9
     c04:	0f 2e       	mov	r0, r31
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	ef 2e       	mov	r14, r31
     c0a:	f0 2d       	mov	r31, r0
     c0c:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     c10:	8f ec       	ldi	r24, 0xCF	; 207
     c12:	97 e0       	ldi	r25, 0x07	; 7
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_vInit+0x1ac>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <LCD_vInit+0x1b2>
     c1a:	00 00       	nop
     c1c:	58 c0       	rjmp	.+176    	; 0xcce <LCD_vInit+0x266>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vset_dir(port,1);
     c1e:	87 2d       	mov	r24, r7
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	0e 94 58 04 	call	0x8b0	; 0x8b0 <GPIO_Low_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     c26:	8e 2d       	mov	r24, r14
     c28:	6c 2d       	mov	r22, r12
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     c30:	81 2f       	mov	r24, r17
     c32:	6f 2d       	mov	r22, r15
     c34:	47 2d       	mov	r20, r7
     c36:	29 2d       	mov	r18, r9
     c38:	ee 24       	eor	r14, r14
     c3a:	68 94       	set
     c3c:	e1 f8       	bld	r14, 1
     c3e:	ca 2c       	mov	r12, r10
     c40:	a8 2c       	mov	r10, r8
     c42:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     c46:	af e2       	ldi	r26, 0x2F	; 47
     c48:	b5 e7       	ldi	r27, 0x75	; 117
     c4a:	11 97       	sbiw	r26, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCD_vInit+0x1e2>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <LCD_vInit+0x1e8>
     c50:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     c52:	81 2f       	mov	r24, r17
     c54:	6f 2d       	mov	r22, r15
     c56:	47 2d       	mov	r20, r7
     c58:	29 2d       	mov	r18, r9
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f8 e2       	ldi	r31, 0x28	; 40
     c5e:	ef 2e       	mov	r14, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     c66:	8f ec       	ldi	r24, 0xCF	; 207
     c68:	97 e0       	ldi	r25, 0x07	; 7
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <LCD_vInit+0x202>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <LCD_vInit+0x208>
     c70:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     c72:	81 2f       	mov	r24, r17
     c74:	6f 2d       	mov	r22, r15
     c76:	47 2d       	mov	r20, r7
     c78:	29 2d       	mov	r18, r9
     c7a:	0f 2e       	mov	r0, r31
     c7c:	fe e0       	ldi	r31, 0x0E	; 14
     c7e:	ef 2e       	mov	r14, r31
     c80:	f0 2d       	mov	r31, r0
     c82:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     c86:	af ec       	ldi	r26, 0xCF	; 207
     c88:	b7 e0       	ldi	r27, 0x07	; 7
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_vInit+0x222>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <LCD_vInit+0x228>
     c90:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     c92:	81 2f       	mov	r24, r17
     c94:	6f 2d       	mov	r22, r15
     c96:	47 2d       	mov	r20, r7
     c98:	29 2d       	mov	r18, r9
     c9a:	ee 24       	eor	r14, r14
     c9c:	e3 94       	inc	r14
     c9e:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     ca2:	8f e1       	ldi	r24, 0x1F	; 31
     ca4:	9e e4       	ldi	r25, 0x4E	; 78
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <LCD_vInit+0x23e>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <LCD_vInit+0x244>
     cac:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     cae:	81 2f       	mov	r24, r17
     cb0:	6f 2d       	mov	r22, r15
     cb2:	47 2d       	mov	r20, r7
     cb4:	29 2d       	mov	r18, r9
     cb6:	0f 2e       	mov	r0, r31
     cb8:	f6 e0       	ldi	r31, 0x06	; 6
     cba:	ef 2e       	mov	r14, r31
     cbc:	f0 2d       	mov	r31, r0
     cbe:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     cc2:	af ec       	ldi	r26, 0xCF	; 207
     cc4:	b7 e0       	ldi	r27, 0x07	; 7
     cc6:	11 97       	sbiw	r26, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCD_vInit+0x25e>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <LCD_vInit+0x264>
     ccc:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	7f 90       	pop	r7
     ce8:	08 95       	ret

00000cea <LCD_clear_screen>:
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
}

void LCD_clear_screen(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin){
     cea:	af 92       	push	r10
     cec:	cf 92       	push	r12
     cee:	ef 92       	push	r14
     cf0:	0f 93       	push	r16
     cf2:	9e 2d       	mov	r25, r14
     cf4:	ac 2c       	mov	r10, r12
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     cf6:	ee 24       	eor	r14, r14
     cf8:	e3 94       	inc	r14
     cfa:	c9 2e       	mov	r12, r25
     cfc:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     d00:	8f e1       	ldi	r24, 0x1F	; 31
     d02:	9e e4       	ldi	r25, 0x4E	; 78
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <LCD_clear_screen+0x1a>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <LCD_clear_screen+0x20>
     d0a:	00 00       	nop
	_delay_ms(10);
}
     d0c:	0f 91       	pop	r16
     d0e:	ef 90       	pop	r14
     d10:	cf 90       	pop	r12
     d12:	af 90       	pop	r10
     d14:	08 95       	ret

00000d16 <LCD_Move_Cursor>:

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
     d16:	8f 92       	push	r8
     d18:	af 92       	push	r10
     d1a:	cf 92       	push	r12
     d1c:	ef 92       	push	r14
     d1e:	0f 93       	push	r16
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	3e 2d       	mov	r19, r14
     d2a:	9c 2d       	mov	r25, r12
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
     d2c:	7a 2d       	mov	r23, r10
     d2e:	71 50       	subi	r23, 0x01	; 1
     d30:	73 30       	cpi	r23, 0x03	; 3
     d32:	88 f4       	brcc	.+34     	; 0xd56 <LCD_Move_Cursor+0x40>
     d34:	70 e1       	ldi	r23, 0x10	; 16
     d36:	78 15       	cp	r23, r8
     d38:	80 f0       	brcs	.+32     	; 0xd5a <LCD_Move_Cursor+0x44>
     d3a:	88 20       	and	r8, r8
     d3c:	81 f0       	breq	.+32     	; 0xd5e <LCD_Move_Cursor+0x48>
		data = 0x80;
	}else if (1 == line ){
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	a7 16       	cp	r10, r23
     d42:	19 f4       	brne	.+6      	; 0xd4a <LCD_Move_Cursor+0x34>
		data = 0x80 + (position - 1);         
     d44:	58 2d       	mov	r21, r8
     d46:	51 58       	subi	r21, 0x81	; 129
     d48:	0b c0       	rjmp	.+22     	; 0xd60 <LCD_Move_Cursor+0x4a>
	}else if (2 == line){
     d4a:	72 e0       	ldi	r23, 0x02	; 2
     d4c:	a7 16       	cp	r10, r23
     d4e:	41 f4       	brne	.+16     	; 0xd60 <LCD_Move_Cursor+0x4a>
		data = 0xC0 + (position - 1);  
     d50:	58 2d       	mov	r21, r8
     d52:	51 54       	subi	r21, 0x41	; 65
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <LCD_Move_Cursor+0x4a>
}

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
		data = 0x80;
     d56:	50 e8       	ldi	r21, 0x80	; 128
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <LCD_Move_Cursor+0x4a>
     d5a:	50 e8       	ldi	r21, 0x80	; 128
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <LCD_Move_Cursor+0x4a>
     d5e:	50 e8       	ldi	r21, 0x80	; 128
	}else if (1 == line ){
		data = 0x80 + (position - 1);         
	}else if (2 == line){
		data = 0xC0 + (position - 1);  
	}
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,data,EN_port,EN_pin);
     d60:	e5 2e       	mov	r14, r21
     d62:	c3 2e       	mov	r12, r19
     d64:	a9 2e       	mov	r10, r25
     d66:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_vsend_cmd>
     d6a:	8f ec       	ldi	r24, 0xCF	; 207
     d6c:	97 e0       	ldi	r25, 0x07	; 7
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <LCD_Move_Cursor+0x58>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <LCD_Move_Cursor+0x5e>
     d74:	00 00       	nop
	_delay_ms(1);
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	0f 91       	pop	r16
     d7c:	ef 90       	pop	r14
     d7e:	cf 90       	pop	r12
     d80:	af 90       	pop	r10
     d82:	8f 90       	pop	r8
     d84:	08 95       	ret

00000d86 <LCD_vsend_char>:

void LCD_vsend_char(u8 Mood , u8 Nibble,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 data){
     d86:	af 92       	push	r10
     d88:	cf 92       	push	r12
     d8a:	ef 92       	push	r14
     d8c:	0f 93       	push	r16
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	c4 2f       	mov	r28, r20
     d94:	d2 2f       	mov	r29, r18
	if (1==Mood){
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	a1 f4       	brne	.+40     	; 0xdc2 <LCD_vsend_char+0x3c>
		GPIO_vwrite_PORT(port,data);
     d9a:	84 2f       	mov	r24, r20
     d9c:	6a 2d       	mov	r22, r10
     d9e:	0e 94 84 03 	call	0x708	; 0x708 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,1);
     da2:	8d 2f       	mov	r24, r29
     da4:	60 2f       	mov	r22, r16
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     dac:	8e 2d       	mov	r24, r14
     dae:	6c 2d       	mov	r22, r12
     db0:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
     db4:	8f ec       	ldi	r24, 0xCF	; 207
     db6:	97 e0       	ldi	r25, 0x07	; 7
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <LCD_vsend_char+0x32>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <LCD_vsend_char+0x38>
     dbe:	00 00       	nop
     dc0:	47 c0       	rjmp	.+142    	; 0xe50 <LCD_vsend_char+0xca>
		_delay_ms(1);
	}else{
		if (1==Nibble){
     dc2:	61 30       	cpi	r22, 0x01	; 1
     dc4:	19 f5       	brne	.+70     	; 0xe0c <LCD_vsend_char+0x86>
			GPIO_High_Nibble_vwrite(port,data>>4);
     dc6:	6a 2d       	mov	r22, r10
     dc8:	62 95       	swap	r22
     dca:	6f 70       	andi	r22, 0x0F	; 15
     dcc:	84 2f       	mov	r24, r20
     dce:	0e 94 23 04 	call	0x846	; 0x846 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     dd2:	8d 2f       	mov	r24, r29
     dd4:	60 2f       	mov	r22, r16
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     ddc:	8e 2d       	mov	r24, r14
     dde:	6c 2d       	mov	r22, r12
     de0:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,data);
     de4:	8c 2f       	mov	r24, r28
     de6:	6a 2d       	mov	r22, r10
     de8:	0e 94 23 04 	call	0x846	; 0x846 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     dec:	8d 2f       	mov	r24, r29
     dee:	60 2f       	mov	r22, r16
     df0:	41 e0       	ldi	r20, 0x01	; 1
     df2:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     df6:	8e 2d       	mov	r24, r14
     df8:	6c 2d       	mov	r22, r12
     dfa:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
     dfe:	8f ec       	ldi	r24, 0xCF	; 207
     e00:	97 e0       	ldi	r25, 0x07	; 7
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <LCD_vsend_char+0x7c>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <LCD_vsend_char+0x82>
     e08:	00 00       	nop
     e0a:	22 c0       	rjmp	.+68     	; 0xe50 <LCD_vsend_char+0xca>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,data>>4);
     e0c:	6a 2d       	mov	r22, r10
     e0e:	62 95       	swap	r22
     e10:	6f 70       	andi	r22, 0x0F	; 15
     e12:	84 2f       	mov	r24, r20
     e14:	0e 94 85 04 	call	0x90a	; 0x90a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e18:	8d 2f       	mov	r24, r29
     e1a:	60 2f       	mov	r22, r16
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e22:	8e 2d       	mov	r24, r14
     e24:	6c 2d       	mov	r22, r12
     e26:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,data);
     e2a:	8c 2f       	mov	r24, r28
     e2c:	6a 2d       	mov	r22, r10
     e2e:	0e 94 85 04 	call	0x90a	; 0x90a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e32:	8d 2f       	mov	r24, r29
     e34:	60 2f       	mov	r22, r16
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e3c:	8e 2d       	mov	r24, r14
     e3e:	6c 2d       	mov	r22, r12
     e40:	0e 94 b9 04 	call	0x972	; 0x972 <send_falling_edge>
     e44:	8f ec       	ldi	r24, 0xCF	; 207
     e46:	97 e0       	ldi	r25, 0x07	; 7
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <LCD_vsend_char+0xc2>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <LCD_vsend_char+0xc8>
     e4e:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	0f 91       	pop	r16
     e56:	ef 90       	pop	r14
     e58:	cf 90       	pop	r12
     e5a:	af 90       	pop	r10
     e5c:	08 95       	ret

00000e5e <LCD_vsend_string>:
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     e5e:	6f 92       	push	r6
     e60:	7f 92       	push	r7
     e62:	8f 92       	push	r8
     e64:	9f 92       	push	r9
     e66:	af 92       	push	r10
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	68 2e       	mov	r6, r24
     e7c:	76 2e       	mov	r7, r22
     e7e:	84 2e       	mov	r8, r20
     e80:	92 2e       	mov	r9, r18
     e82:	d0 2e       	mov	r13, r16
     e84:	fe 2c       	mov	r15, r14
     e86:	1c 2d       	mov	r17, r12
     e88:	e5 01       	movw	r28, r10
	while((*data)!='\0'){
     e8a:	a8 80       	ld	r10, Y
     e8c:	aa 20       	and	r10, r10
     e8e:	69 f0       	breq	.+26     	; 0xeaa <LCD_vsend_string+0x4c>
			_delay_ms(1);
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     e90:	21 96       	adiw	r28, 0x01	; 1
	while((*data)!='\0'){
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
     e92:	86 2d       	mov	r24, r6
     e94:	67 2d       	mov	r22, r7
     e96:	48 2d       	mov	r20, r8
     e98:	29 2d       	mov	r18, r9
     e9a:	0d 2d       	mov	r16, r13
     e9c:	ef 2c       	mov	r14, r15
     e9e:	c1 2e       	mov	r12, r17
     ea0:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_vsend_char>
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
	while((*data)!='\0'){
     ea4:	a9 90       	ld	r10, Y+
     ea6:	aa 20       	and	r10, r10
     ea8:	a1 f7       	brne	.-24     	; 0xe92 <LCD_vsend_string+0x34>
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
		data++;
	}
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	08 95       	ret

00000ec8 <LCD_display_number>:

void LCD_display_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u32 Number){
     ec8:	7f 92       	push	r7
     eca:	8f 92       	push	r8
     ecc:	9f 92       	push	r9
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	27 97       	sbiw	r28, 0x07	; 7
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	18 2f       	mov	r17, r24
     ef4:	f6 2e       	mov	r15, r22
     ef6:	d4 2e       	mov	r13, r20
     ef8:	72 2e       	mov	r7, r18
     efa:	d5 01       	movw	r26, r10
     efc:	c4 01       	movw	r24, r8
	u8 str[7]; 
	sprintf(str,"%d",Number);
     efe:	2d b7       	in	r18, 0x3d	; 61
     f00:	3e b7       	in	r19, 0x3e	; 62
     f02:	28 50       	subi	r18, 0x08	; 8
     f04:	30 40       	sbci	r19, 0x00	; 0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	3e bf       	out	0x3e, r19	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	2d bf       	out	0x3d, r18	; 61
     f10:	4d b7       	in	r20, 0x3d	; 61
     f12:	5e b7       	in	r21, 0x3e	; 62
     f14:	4f 5f       	subi	r20, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	5e 01       	movw	r10, r28
     f1a:	08 94       	sec
     f1c:	a1 1c       	adc	r10, r1
     f1e:	b1 1c       	adc	r11, r1
     f20:	ed b7       	in	r30, 0x3d	; 61
     f22:	fe b7       	in	r31, 0x3e	; 62
     f24:	b2 82       	std	Z+2, r11	; 0x02
     f26:	a1 82       	std	Z+1, r10	; 0x01
     f28:	28 e6       	ldi	r18, 0x68	; 104
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	fa 01       	movw	r30, r20
     f2e:	33 83       	std	Z+3, r19	; 0x03
     f30:	22 83       	std	Z+2, r18	; 0x02
     f32:	84 83       	std	Z+4, r24	; 0x04
     f34:	95 83       	std	Z+5, r25	; 0x05
     f36:	a6 83       	std	Z+6, r26	; 0x06
     f38:	b7 83       	std	Z+7, r27	; 0x07
     f3a:	0e 94 a7 0a 	call	0x154e	; 0x154e <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
     f3e:	2d b7       	in	r18, 0x3d	; 61
     f40:	3e b7       	in	r19, 0x3e	; 62
     f42:	28 5f       	subi	r18, 0xF8	; 248
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	3e bf       	out	0x3e, r19	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	2d bf       	out	0x3d, r18	; 61
     f50:	81 2f       	mov	r24, r17
     f52:	6f 2d       	mov	r22, r15
     f54:	4d 2d       	mov	r20, r13
     f56:	27 2d       	mov	r18, r7
     f58:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_vsend_string>
}
     f5c:	27 96       	adiw	r28, 0x07	; 7
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	7f 90       	pop	r7
     f82:	08 95       	ret

00000f84 <LCD_display_real_number>:

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
     f84:	2f 92       	push	r2
     f86:	3f 92       	push	r3
     f88:	4f 92       	push	r4
     f8a:	5f 92       	push	r5
     f8c:	6f 92       	push	r6
     f8e:	7f 92       	push	r7
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	62 97       	sbiw	r28, 0x12	; 18
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	18 2f       	mov	r17, r24
     fb8:	f6 2e       	mov	r15, r22
     fba:	d4 2e       	mov	r13, r20
     fbc:	92 2e       	mov	r9, r18
     fbe:	2e a1       	lds	r18, 0x4e
     fc0:	3f a1       	lds	r19, 0x4f
     fc2:	48 a5       	lds	r20, 0x68
     fc4:	59 a5       	lds	r21, 0x69
     fc6:	6a a5       	lds	r22, 0x6a
     fc8:	7b a5       	lds	r23, 0x6b
     fca:	8c a5       	lds	r24, 0x6c
     fcc:	9d a5       	lds	r25, 0x6d
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
     fce:	99 23       	and	r25, r25
     fd0:	2c f0       	brlt	.+10     	; 0xfdc <LCD_display_real_number+0x58>
     fd2:	ed e6       	ldi	r30, 0x6D	; 109
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	fa 8b       	std	Y+18, r31	; 0x12
     fd8:	e9 8b       	std	Y+17, r30	; 0x11
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <LCD_display_real_number+0x60>
     fdc:	eb e6       	ldi	r30, 0x6B	; 107
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	fa 8b       	std	Y+18, r31	; 0x12
     fe2:	e9 8b       	std	Y+17, r30	; 0x11
	f32 tmpval = (Number < 0) ? -Number : Number;
     fe4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatdisf>
     fe8:	2b 01       	movw	r4, r22
     fea:	3c 01       	movw	r6, r24
     fec:	e8 94       	clt
     fee:	77 f8       	bld	r7, 7
	s32 tmpInt1 = tmpval;
     ff0:	c3 01       	movw	r24, r6
     ff2:	b2 01       	movw	r22, r4
     ff4:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixsfsi>
	f32 tmpFrac = tmpval - tmpInt1;
	s32 tmpInt2 = tmpFrac * 10000;
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
     ff8:	2d b7       	in	r18, 0x3d	; 61
     ffa:	3e b7       	in	r19, 0x3e	; 62
     ffc:	2e 50       	subi	r18, 0x0E	; 14
     ffe:	30 40       	sbci	r19, 0x00	; 0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	3e bf       	out	0x3e, r19	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	2d bf       	out	0x3d, r18	; 61
    100a:	ad b6       	in	r10, 0x3d	; 61
    100c:	be b6       	in	r11, 0x3e	; 62
    100e:	08 94       	sec
    1010:	a1 1c       	adc	r10, r1
    1012:	b1 1c       	adc	r11, r1
    1014:	1e 01       	movw	r2, r28
    1016:	08 94       	sec
    1018:	21 1c       	adc	r2, r1
    101a:	31 1c       	adc	r3, r1
    101c:	ed b7       	in	r30, 0x3d	; 61
    101e:	fe b7       	in	r31, 0x3e	; 62
    1020:	32 82       	std	Z+2, r3	; 0x02
    1022:	21 82       	std	Z+1, r2	; 0x01
    1024:	2e e6       	ldi	r18, 0x6E	; 110
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f5 01       	movw	r30, r10
    102a:	33 83       	std	Z+3, r19	; 0x03
    102c:	22 83       	std	Z+2, r18	; 0x02
    102e:	29 89       	ldd	r18, Y+17	; 0x11
    1030:	3a 89       	ldd	r19, Y+18	; 0x12
    1032:	35 83       	std	Z+5, r19	; 0x05
    1034:	24 83       	std	Z+4, r18	; 0x04
    1036:	66 83       	std	Z+6, r22	; 0x06
    1038:	77 83       	std	Z+7, r23	; 0x07
    103a:	80 87       	std	Z+8, r24	; 0x08
    103c:	91 87       	std	Z+9, r25	; 0x09
void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
	f32 tmpFrac = tmpval - tmpInt1;
    103e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	c3 01       	movw	r24, r6
    1048:	b2 01       	movw	r22, r4
    104a:	0e 94 ce 08 	call	0x119c	; 0x119c <__subsf3>
	s32 tmpInt2 = tmpFrac * 10000;
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e4       	ldi	r19, 0x40	; 64
    1052:	4c e1       	ldi	r20, 0x1C	; 28
    1054:	56 e4       	ldi	r21, 0x46	; 70
    1056:	0e 94 44 0a 	call	0x1488	; 0x1488 <__mulsf3>
    105a:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixsfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    1062:	f5 01       	movw	r30, r10
    1064:	82 87       	std	Z+10, r24	; 0x0a
    1066:	93 87       	std	Z+11, r25	; 0x0b
    1068:	a4 87       	std	Z+12, r26	; 0x0c
    106a:	b5 87       	std	Z+13, r27	; 0x0d
    106c:	0e 94 a7 0a 	call	0x154e	; 0x154e <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
    1070:	2d b7       	in	r18, 0x3d	; 61
    1072:	3e b7       	in	r19, 0x3e	; 62
    1074:	22 5f       	subi	r18, 0xF2	; 242
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	3e bf       	out	0x3e, r19	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	2d bf       	out	0x3d, r18	; 61
    1082:	81 2f       	mov	r24, r17
    1084:	6f 2d       	mov	r22, r15
    1086:	4d 2d       	mov	r20, r13
    1088:	29 2d       	mov	r18, r9
    108a:	51 01       	movw	r10, r2
    108c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_vsend_string>
    1090:	62 96       	adiw	r28, 0x12	; 18
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	7f 90       	pop	r7
    10b4:	6f 90       	pop	r6
    10b6:	5f 90       	pop	r5
    10b8:	4f 90       	pop	r4
    10ba:	3f 90       	pop	r3
    10bc:	2f 90       	pop	r2
    10be:	08 95       	ret

000010c0 <LED_vintialize>:
 * It is in ECU abstraction layer 
 */

#include "GPIO_MCAL.h"
void LED_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vsetPIN_DIR>
}
    10c6:	08 95       	ret

000010c8 <LED_vTurnon>:
void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
}
    10ce:	08 95       	ret

000010d0 <LED_vTurnoff>:
void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	0e 94 85 01 	call	0x30a	; 0x30a <GPIO_vwrite_PIN>
}
    10d6:	08 95       	ret

000010d8 <LED_vtoggle>:
void LED_vtoggle(u8 port, u8 pin){
	GPIO_vtoggle_PIN(port,pin);
    10d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_vtoggle_PIN>
    10dc:	08 95       	ret

000010de <Seven_Segment_Init>:
#define  Eight_bit 1
#define  High_Nibble 1
#define  LOW_Nibble 0

void Seven_Segment_Init(u8 Mode,u8 port ,u8 Nibble){
	if (0 == Mode){
    10de:	88 23       	and	r24, r24
    10e0:	71 f4       	brne	.+28     	; 0x10fe <Seven_Segment_Init+0x20>
		if (0==Nibble){
    10e2:	44 23       	and	r20, r20
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <Seven_Segment_Init+0x12>
			GPIO_Low_Nibble_vset_dir(port,1);
    10e6:	86 2f       	mov	r24, r22
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	0e 94 58 04 	call	0x8b0	; 0x8b0 <GPIO_Low_Nibble_vset_dir>
    10ee:	08 95       	ret
		}else if (1==Nibble){
    10f0:	41 30       	cpi	r20, 0x01	; 1
    10f2:	59 f4       	brne	.+22     	; 0x110a <Seven_Segment_Init+0x2c>
			GPIO_High_Nibble_vset_dir(port,1);
    10f4:	86 2f       	mov	r24, r22
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <GPIO_High_Nibble_vset_dir>
    10fc:	08 95       	ret
		}
		else{
			
		}
	}else if (1==Mode){
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	21 f4       	brne	.+8      	; 0x110a <Seven_Segment_Init+0x2c>
		GPIO_vset_PORT_DIR(port,0xff);
    1102:	86 2f       	mov	r24, r22
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	0e 94 65 03 	call	0x6ca	; 0x6ca <GPIO_vset_PORT_DIR>
    110a:	08 95       	ret

0000110c <Seven_segment_Display>:
		
	}
}


void Seven_segment_Display(u8 Mode,u8 Nibble , u8 port, u8 value){
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	2a 97       	sbiw	r28, 0x0a	; 10
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
	if (0 == Mode){
    1120:	88 23       	and	r24, r24
    1122:	71 f4       	brne	.+28     	; 0x1140 <Seven_segment_Display+0x34>
		if (0==Nibble){
    1124:	66 23       	and	r22, r22
    1126:	29 f4       	brne	.+10     	; 0x1132 <Seven_segment_Display+0x26>
			GPIO_Low_Nibble_vwrite(port,value);
    1128:	84 2f       	mov	r24, r20
    112a:	62 2f       	mov	r22, r18
    112c:	0e 94 85 04 	call	0x90a	; 0x90a <GPIO_Low_Nibble_vwrite>
    1130:	2c c0       	rjmp	.+88     	; 0x118a <Seven_segment_Display+0x7e>
		}else if (1==Nibble){
    1132:	61 30       	cpi	r22, 0x01	; 1
    1134:	51 f5       	brne	.+84     	; 0x118a <Seven_segment_Display+0x7e>
			GPIO_High_Nibble_vwrite(port,value);
    1136:	84 2f       	mov	r24, r20
    1138:	62 2f       	mov	r22, r18
    113a:	0e 94 23 04 	call	0x846	; 0x846 <GPIO_High_Nibble_vwrite>
    113e:	25 c0       	rjmp	.+74     	; 0x118a <Seven_segment_Display+0x7e>
		}
		else{
			
		}
	}else if (1==Mode){
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	19 f5       	brne	.+70     	; 0x118a <Seven_segment_Display+0x7e>
		if (value >=0 && value <=9)
    1144:	2a 30       	cpi	r18, 0x0A	; 10
    1146:	88 f4       	brcc	.+34     	; 0x116a <Seven_segment_Display+0x5e>
		{
			u8 arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    1148:	de 01       	movw	r26, r28
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	e8 e7       	ldi	r30, 0x78	; 120
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a e0       	ldi	r24, 0x0A	; 10
    1152:	01 90       	ld	r0, Z+
    1154:	0d 92       	st	X+, r0
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	e1 f7       	brne	.-8      	; 0x1152 <Seven_segment_Display+0x46>
			GPIO_vwrite_PORT(port,arr[value]);
    115a:	fe 01       	movw	r30, r28
    115c:	e2 0f       	add	r30, r18
    115e:	f1 1d       	adc	r31, r1
    1160:	84 2f       	mov	r24, r20
    1162:	61 81       	ldd	r22, Z+1	; 0x01
    1164:	0e 94 84 03 	call	0x708	; 0x708 <GPIO_vwrite_PORT>
    1168:	10 c0       	rjmp	.+32     	; 0x118a <Seven_segment_Display+0x7e>
			#define B 1
			#define C 2
			#define D 3
			#define E 4
			#define F 5
			u8 arr1[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
    116a:	de 01       	movw	r26, r28
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	e2 e8       	ldi	r30, 0x82	; 130
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	01 90       	ld	r0, Z+
    1176:	0d 92       	st	X+, r0
    1178:	81 50       	subi	r24, 0x01	; 1
    117a:	e1 f7       	brne	.-8      	; 0x1174 <Seven_segment_Display+0x68>
			GPIO_vwrite_PORT(port,arr1[value]);
    117c:	fe 01       	movw	r30, r28
    117e:	e2 0f       	add	r30, r18
    1180:	f1 1d       	adc	r31, r1
    1182:	84 2f       	mov	r24, r20
    1184:	61 81       	ldd	r22, Z+1	; 0x01
    1186:	0e 94 84 03 	call	0x708	; 0x708 <GPIO_vwrite_PORT>
		}
	}
	else{
		
	}
    118a:	2a 96       	adiw	r28, 0x0a	; 10
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <__subsf3>:
    119c:	50 58       	subi	r21, 0x80	; 128

0000119e <__addsf3>:
    119e:	bb 27       	eor	r27, r27
    11a0:	aa 27       	eor	r26, r26
    11a2:	0e d0       	rcall	.+28     	; 0x11c0 <__addsf3x>
    11a4:	37 c1       	rjmp	.+622    	; 0x1414 <__fp_round>
    11a6:	28 d1       	rcall	.+592    	; 0x13f8 <__fp_pscA>
    11a8:	30 f0       	brcs	.+12     	; 0x11b6 <__addsf3+0x18>
    11aa:	2d d1       	rcall	.+602    	; 0x1406 <__fp_pscB>
    11ac:	20 f0       	brcs	.+8      	; 0x11b6 <__addsf3+0x18>
    11ae:	31 f4       	brne	.+12     	; 0x11bc <__addsf3+0x1e>
    11b0:	9f 3f       	cpi	r25, 0xFF	; 255
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <__addsf3+0x1a>
    11b4:	1e f4       	brtc	.+6      	; 0x11bc <__addsf3+0x1e>
    11b6:	0d c1       	rjmp	.+538    	; 0x13d2 <__fp_nan>
    11b8:	0e f4       	brtc	.+2      	; 0x11bc <__addsf3+0x1e>
    11ba:	e0 95       	com	r30
    11bc:	e7 fb       	bst	r30, 7
    11be:	03 c1       	rjmp	.+518    	; 0x13c6 <__fp_inf>

000011c0 <__addsf3x>:
    11c0:	e9 2f       	mov	r30, r25
    11c2:	39 d1       	rcall	.+626    	; 0x1436 <__fp_split3>
    11c4:	80 f3       	brcs	.-32     	; 0x11a6 <__addsf3+0x8>
    11c6:	ba 17       	cp	r27, r26
    11c8:	62 07       	cpc	r22, r18
    11ca:	73 07       	cpc	r23, r19
    11cc:	84 07       	cpc	r24, r20
    11ce:	95 07       	cpc	r25, r21
    11d0:	18 f0       	brcs	.+6      	; 0x11d8 <__addsf3x+0x18>
    11d2:	71 f4       	brne	.+28     	; 0x11f0 <__addsf3x+0x30>
    11d4:	9e f5       	brtc	.+102    	; 0x123c <__addsf3x+0x7c>
    11d6:	51 c1       	rjmp	.+674    	; 0x147a <__fp_zero>
    11d8:	0e f4       	brtc	.+2      	; 0x11dc <__addsf3x+0x1c>
    11da:	e0 95       	com	r30
    11dc:	0b 2e       	mov	r0, r27
    11de:	ba 2f       	mov	r27, r26
    11e0:	a0 2d       	mov	r26, r0
    11e2:	0b 01       	movw	r0, r22
    11e4:	b9 01       	movw	r22, r18
    11e6:	90 01       	movw	r18, r0
    11e8:	0c 01       	movw	r0, r24
    11ea:	ca 01       	movw	r24, r20
    11ec:	a0 01       	movw	r20, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	ff 27       	eor	r31, r31
    11f2:	59 1b       	sub	r21, r25
    11f4:	99 f0       	breq	.+38     	; 0x121c <__addsf3x+0x5c>
    11f6:	59 3f       	cpi	r21, 0xF9	; 249
    11f8:	50 f4       	brcc	.+20     	; 0x120e <__addsf3x+0x4e>
    11fa:	50 3e       	cpi	r21, 0xE0	; 224
    11fc:	68 f1       	brcs	.+90     	; 0x1258 <__addsf3x+0x98>
    11fe:	1a 16       	cp	r1, r26
    1200:	f0 40       	sbci	r31, 0x00	; 0
    1202:	a2 2f       	mov	r26, r18
    1204:	23 2f       	mov	r18, r19
    1206:	34 2f       	mov	r19, r20
    1208:	44 27       	eor	r20, r20
    120a:	58 5f       	subi	r21, 0xF8	; 248
    120c:	f3 cf       	rjmp	.-26     	; 0x11f4 <__addsf3x+0x34>
    120e:	46 95       	lsr	r20
    1210:	37 95       	ror	r19
    1212:	27 95       	ror	r18
    1214:	a7 95       	ror	r26
    1216:	f0 40       	sbci	r31, 0x00	; 0
    1218:	53 95       	inc	r21
    121a:	c9 f7       	brne	.-14     	; 0x120e <__addsf3x+0x4e>
    121c:	7e f4       	brtc	.+30     	; 0x123c <__addsf3x+0x7c>
    121e:	1f 16       	cp	r1, r31
    1220:	ba 0b       	sbc	r27, r26
    1222:	62 0b       	sbc	r22, r18
    1224:	73 0b       	sbc	r23, r19
    1226:	84 0b       	sbc	r24, r20
    1228:	ba f0       	brmi	.+46     	; 0x1258 <__addsf3x+0x98>
    122a:	91 50       	subi	r25, 0x01	; 1
    122c:	a1 f0       	breq	.+40     	; 0x1256 <__addsf3x+0x96>
    122e:	ff 0f       	add	r31, r31
    1230:	bb 1f       	adc	r27, r27
    1232:	66 1f       	adc	r22, r22
    1234:	77 1f       	adc	r23, r23
    1236:	88 1f       	adc	r24, r24
    1238:	c2 f7       	brpl	.-16     	; 0x122a <__addsf3x+0x6a>
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <__addsf3x+0x98>
    123c:	ba 0f       	add	r27, r26
    123e:	62 1f       	adc	r22, r18
    1240:	73 1f       	adc	r23, r19
    1242:	84 1f       	adc	r24, r20
    1244:	48 f4       	brcc	.+18     	; 0x1258 <__addsf3x+0x98>
    1246:	87 95       	ror	r24
    1248:	77 95       	ror	r23
    124a:	67 95       	ror	r22
    124c:	b7 95       	ror	r27
    124e:	f7 95       	ror	r31
    1250:	9e 3f       	cpi	r25, 0xFE	; 254
    1252:	08 f0       	brcs	.+2      	; 0x1256 <__addsf3x+0x96>
    1254:	b3 cf       	rjmp	.-154    	; 0x11bc <__addsf3+0x1e>
    1256:	93 95       	inc	r25
    1258:	88 0f       	add	r24, r24
    125a:	08 f0       	brcs	.+2      	; 0x125e <__addsf3x+0x9e>
    125c:	99 27       	eor	r25, r25
    125e:	ee 0f       	add	r30, r30
    1260:	97 95       	ror	r25
    1262:	87 95       	ror	r24
    1264:	08 95       	ret

00001266 <__fixsfsi>:
    1266:	04 d0       	rcall	.+8      	; 0x1270 <__fixunssfsi>
    1268:	68 94       	set
    126a:	b1 11       	cpse	r27, r1
    126c:	07 c1       	rjmp	.+526    	; 0x147c <__fp_szero>
    126e:	08 95       	ret

00001270 <__fixunssfsi>:
    1270:	ea d0       	rcall	.+468    	; 0x1446 <__fp_splitA>
    1272:	88 f0       	brcs	.+34     	; 0x1296 <__fixunssfsi+0x26>
    1274:	9f 57       	subi	r25, 0x7F	; 127
    1276:	90 f0       	brcs	.+36     	; 0x129c <__fixunssfsi+0x2c>
    1278:	b9 2f       	mov	r27, r25
    127a:	99 27       	eor	r25, r25
    127c:	b7 51       	subi	r27, 0x17	; 23
    127e:	a0 f0       	brcs	.+40     	; 0x12a8 <__fixunssfsi+0x38>
    1280:	d1 f0       	breq	.+52     	; 0x12b6 <__fixunssfsi+0x46>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	1a f0       	brmi	.+6      	; 0x1292 <__fixunssfsi+0x22>
    128c:	ba 95       	dec	r27
    128e:	c9 f7       	brne	.-14     	; 0x1282 <__fixunssfsi+0x12>
    1290:	12 c0       	rjmp	.+36     	; 0x12b6 <__fixunssfsi+0x46>
    1292:	b1 30       	cpi	r27, 0x01	; 1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <__fixunssfsi+0x46>
    1296:	f1 d0       	rcall	.+482    	; 0x147a <__fp_zero>
    1298:	b1 e0       	ldi	r27, 0x01	; 1
    129a:	08 95       	ret
    129c:	ee c0       	rjmp	.+476    	; 0x147a <__fp_zero>
    129e:	67 2f       	mov	r22, r23
    12a0:	78 2f       	mov	r23, r24
    12a2:	88 27       	eor	r24, r24
    12a4:	b8 5f       	subi	r27, 0xF8	; 248
    12a6:	39 f0       	breq	.+14     	; 0x12b6 <__fixunssfsi+0x46>
    12a8:	b9 3f       	cpi	r27, 0xF9	; 249
    12aa:	cc f3       	brlt	.-14     	; 0x129e <__fixunssfsi+0x2e>
    12ac:	86 95       	lsr	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b3 95       	inc	r27
    12b4:	d9 f7       	brne	.-10     	; 0x12ac <__fixunssfsi+0x3c>
    12b6:	3e f4       	brtc	.+14     	; 0x12c6 <__fixunssfsi+0x56>
    12b8:	90 95       	com	r25
    12ba:	80 95       	com	r24
    12bc:	70 95       	com	r23
    12be:	61 95       	neg	r22
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	08 95       	ret

000012c8 <__floatdisf>:
    12c8:	97 fb       	bst	r25, 7
    12ca:	0e f4       	brtc	.+2      	; 0x12ce <__floatdisf+0x6>
    12cc:	85 d0       	rcall	.+266    	; 0x13d8 <__fp_negdi>
    12ce:	3e c0       	rjmp	.+124    	; 0x134c <__fp_di2sf>

000012d0 <__floatunsisf>:
    12d0:	e8 94       	clt
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <__floatsisf+0x12>

000012d4 <__floatsisf>:
    12d4:	97 fb       	bst	r25, 7
    12d6:	3e f4       	brtc	.+14     	; 0x12e6 <__floatsisf+0x12>
    12d8:	90 95       	com	r25
    12da:	80 95       	com	r24
    12dc:	70 95       	com	r23
    12de:	61 95       	neg	r22
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	8f 4f       	sbci	r24, 0xFF	; 255
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	99 23       	and	r25, r25
    12e8:	a9 f0       	breq	.+42     	; 0x1314 <__floatsisf+0x40>
    12ea:	f9 2f       	mov	r31, r25
    12ec:	96 e9       	ldi	r25, 0x96	; 150
    12ee:	bb 27       	eor	r27, r27
    12f0:	93 95       	inc	r25
    12f2:	f6 95       	lsr	r31
    12f4:	87 95       	ror	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f1 11       	cpse	r31, r1
    12fe:	f8 cf       	rjmp	.-16     	; 0x12f0 <__floatsisf+0x1c>
    1300:	fa f4       	brpl	.+62     	; 0x1340 <__floatsisf+0x6c>
    1302:	bb 0f       	add	r27, r27
    1304:	11 f4       	brne	.+4      	; 0x130a <__floatsisf+0x36>
    1306:	60 ff       	sbrs	r22, 0
    1308:	1b c0       	rjmp	.+54     	; 0x1340 <__floatsisf+0x6c>
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <__floatsisf+0x6c>
    1314:	88 23       	and	r24, r24
    1316:	11 f0       	breq	.+4      	; 0x131c <__floatsisf+0x48>
    1318:	96 e9       	ldi	r25, 0x96	; 150
    131a:	11 c0       	rjmp	.+34     	; 0x133e <__floatsisf+0x6a>
    131c:	77 23       	and	r23, r23
    131e:	21 f0       	breq	.+8      	; 0x1328 <__floatsisf+0x54>
    1320:	9e e8       	ldi	r25, 0x8E	; 142
    1322:	87 2f       	mov	r24, r23
    1324:	76 2f       	mov	r23, r22
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <__floatsisf+0x5e>
    1328:	66 23       	and	r22, r22
    132a:	71 f0       	breq	.+28     	; 0x1348 <__floatsisf+0x74>
    132c:	96 e8       	ldi	r25, 0x86	; 134
    132e:	86 2f       	mov	r24, r22
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	2a f0       	brmi	.+10     	; 0x1340 <__floatsisf+0x6c>
    1336:	9a 95       	dec	r25
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	da f7       	brpl	.-10     	; 0x1336 <__floatsisf+0x62>
    1340:	88 0f       	add	r24, r24
    1342:	96 95       	lsr	r25
    1344:	87 95       	ror	r24
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret

0000134a <__floatundisf>:
    134a:	e8 94       	clt

0000134c <__fp_di2sf>:
    134c:	f9 2f       	mov	r31, r25
    134e:	96 eb       	ldi	r25, 0xB6	; 182
    1350:	ff 23       	and	r31, r31
    1352:	81 f0       	breq	.+32     	; 0x1374 <__fp_di2sf+0x28>
    1354:	12 16       	cp	r1, r18
    1356:	13 06       	cpc	r1, r19
    1358:	14 06       	cpc	r1, r20
    135a:	44 0b       	sbc	r20, r20
    135c:	93 95       	inc	r25
    135e:	f6 95       	lsr	r31
    1360:	87 95       	ror	r24
    1362:	77 95       	ror	r23
    1364:	67 95       	ror	r22
    1366:	57 95       	ror	r21
    1368:	40 40       	sbci	r20, 0x00	; 0
    136a:	ff 23       	and	r31, r31
    136c:	b9 f7       	brne	.-18     	; 0x135c <__fp_di2sf+0x10>
    136e:	1b c0       	rjmp	.+54     	; 0x13a6 <__fp_di2sf+0x5a>
    1370:	99 27       	eor	r25, r25
    1372:	08 95       	ret
    1374:	88 23       	and	r24, r24
    1376:	51 f4       	brne	.+20     	; 0x138c <__fp_di2sf+0x40>
    1378:	98 50       	subi	r25, 0x08	; 8
    137a:	d2 f7       	brpl	.-12     	; 0x1370 <__fp_di2sf+0x24>
    137c:	87 2b       	or	r24, r23
    137e:	76 2f       	mov	r23, r22
    1380:	65 2f       	mov	r22, r21
    1382:	54 2f       	mov	r21, r20
    1384:	43 2f       	mov	r20, r19
    1386:	32 2f       	mov	r19, r18
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	b1 f3       	breq	.-20     	; 0x1378 <__fp_di2sf+0x2c>
    138c:	12 16       	cp	r1, r18
    138e:	13 06       	cpc	r1, r19
    1390:	14 06       	cpc	r1, r20
    1392:	44 0b       	sbc	r20, r20
    1394:	88 23       	and	r24, r24
    1396:	3a f0       	brmi	.+14     	; 0x13a6 <__fp_di2sf+0x5a>
    1398:	9a 95       	dec	r25
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	ca f7       	brpl	.-14     	; 0x1398 <__fp_di2sf+0x4c>
    13a6:	55 23       	and	r21, r21
    13a8:	4a f4       	brpl	.+18     	; 0x13bc <__fp_di2sf+0x70>
    13aa:	44 0f       	add	r20, r20
    13ac:	55 1f       	adc	r21, r21
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <__fp_di2sf+0x68>
    13b0:	60 ff       	sbrs	r22, 0
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <__fp_di2sf+0x70>
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	88 0f       	add	r24, r24
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret

000013c6 <__fp_inf>:
    13c6:	97 f9       	bld	r25, 7
    13c8:	9f 67       	ori	r25, 0x7F	; 127
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	08 95       	ret

000013d2 <__fp_nan>:
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	80 ec       	ldi	r24, 0xC0	; 192
    13d6:	08 95       	ret

000013d8 <__fp_negdi>:
    13d8:	90 95       	com	r25
    13da:	80 95       	com	r24
    13dc:	70 95       	com	r23
    13de:	60 95       	com	r22
    13e0:	50 95       	com	r21
    13e2:	40 95       	com	r20
    13e4:	30 95       	com	r19
    13e6:	21 95       	neg	r18
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	4f 4f       	sbci	r20, 0xFF	; 255
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	8f 4f       	sbci	r24, 0xFF	; 255
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	08 95       	ret

000013f8 <__fp_pscA>:
    13f8:	00 24       	eor	r0, r0
    13fa:	0a 94       	dec	r0
    13fc:	16 16       	cp	r1, r22
    13fe:	17 06       	cpc	r1, r23
    1400:	18 06       	cpc	r1, r24
    1402:	09 06       	cpc	r0, r25
    1404:	08 95       	ret

00001406 <__fp_pscB>:
    1406:	00 24       	eor	r0, r0
    1408:	0a 94       	dec	r0
    140a:	12 16       	cp	r1, r18
    140c:	13 06       	cpc	r1, r19
    140e:	14 06       	cpc	r1, r20
    1410:	05 06       	cpc	r0, r21
    1412:	08 95       	ret

00001414 <__fp_round>:
    1414:	09 2e       	mov	r0, r25
    1416:	03 94       	inc	r0
    1418:	00 0c       	add	r0, r0
    141a:	11 f4       	brne	.+4      	; 0x1420 <__fp_round+0xc>
    141c:	88 23       	and	r24, r24
    141e:	52 f0       	brmi	.+20     	; 0x1434 <__fp_round+0x20>
    1420:	bb 0f       	add	r27, r27
    1422:	40 f4       	brcc	.+16     	; 0x1434 <__fp_round+0x20>
    1424:	bf 2b       	or	r27, r31
    1426:	11 f4       	brne	.+4      	; 0x142c <__fp_round+0x18>
    1428:	60 ff       	sbrs	r22, 0
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <__fp_round+0x20>
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	8f 4f       	sbci	r24, 0xFF	; 255
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	08 95       	ret

00001436 <__fp_split3>:
    1436:	57 fd       	sbrc	r21, 7
    1438:	90 58       	subi	r25, 0x80	; 128
    143a:	44 0f       	add	r20, r20
    143c:	55 1f       	adc	r21, r21
    143e:	59 f0       	breq	.+22     	; 0x1456 <__fp_splitA+0x10>
    1440:	5f 3f       	cpi	r21, 0xFF	; 255
    1442:	71 f0       	breq	.+28     	; 0x1460 <__fp_splitA+0x1a>
    1444:	47 95       	ror	r20

00001446 <__fp_splitA>:
    1446:	88 0f       	add	r24, r24
    1448:	97 fb       	bst	r25, 7
    144a:	99 1f       	adc	r25, r25
    144c:	61 f0       	breq	.+24     	; 0x1466 <__fp_splitA+0x20>
    144e:	9f 3f       	cpi	r25, 0xFF	; 255
    1450:	79 f0       	breq	.+30     	; 0x1470 <__fp_splitA+0x2a>
    1452:	87 95       	ror	r24
    1454:	08 95       	ret
    1456:	12 16       	cp	r1, r18
    1458:	13 06       	cpc	r1, r19
    145a:	14 06       	cpc	r1, r20
    145c:	55 1f       	adc	r21, r21
    145e:	f2 cf       	rjmp	.-28     	; 0x1444 <__fp_split3+0xe>
    1460:	46 95       	lsr	r20
    1462:	f1 df       	rcall	.-30     	; 0x1446 <__fp_splitA>
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <__fp_splitA+0x30>
    1466:	16 16       	cp	r1, r22
    1468:	17 06       	cpc	r1, r23
    146a:	18 06       	cpc	r1, r24
    146c:	99 1f       	adc	r25, r25
    146e:	f1 cf       	rjmp	.-30     	; 0x1452 <__fp_splitA+0xc>
    1470:	86 95       	lsr	r24
    1472:	71 05       	cpc	r23, r1
    1474:	61 05       	cpc	r22, r1
    1476:	08 94       	sec
    1478:	08 95       	ret

0000147a <__fp_zero>:
    147a:	e8 94       	clt

0000147c <__fp_szero>:
    147c:	bb 27       	eor	r27, r27
    147e:	66 27       	eor	r22, r22
    1480:	77 27       	eor	r23, r23
    1482:	cb 01       	movw	r24, r22
    1484:	97 f9       	bld	r25, 7
    1486:	08 95       	ret

00001488 <__mulsf3>:
    1488:	0b d0       	rcall	.+22     	; 0x14a0 <__mulsf3x>
    148a:	c4 cf       	rjmp	.-120    	; 0x1414 <__fp_round>
    148c:	b5 df       	rcall	.-150    	; 0x13f8 <__fp_pscA>
    148e:	28 f0       	brcs	.+10     	; 0x149a <__mulsf3+0x12>
    1490:	ba df       	rcall	.-140    	; 0x1406 <__fp_pscB>
    1492:	18 f0       	brcs	.+6      	; 0x149a <__mulsf3+0x12>
    1494:	95 23       	and	r25, r21
    1496:	09 f0       	breq	.+2      	; 0x149a <__mulsf3+0x12>
    1498:	96 cf       	rjmp	.-212    	; 0x13c6 <__fp_inf>
    149a:	9b cf       	rjmp	.-202    	; 0x13d2 <__fp_nan>
    149c:	11 24       	eor	r1, r1
    149e:	ee cf       	rjmp	.-36     	; 0x147c <__fp_szero>

000014a0 <__mulsf3x>:
    14a0:	ca df       	rcall	.-108    	; 0x1436 <__fp_split3>
    14a2:	a0 f3       	brcs	.-24     	; 0x148c <__mulsf3+0x4>

000014a4 <__mulsf3_pse>:
    14a4:	95 9f       	mul	r25, r21
    14a6:	d1 f3       	breq	.-12     	; 0x149c <__mulsf3+0x14>
    14a8:	95 0f       	add	r25, r21
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	55 1f       	adc	r21, r21
    14ae:	62 9f       	mul	r22, r18
    14b0:	f0 01       	movw	r30, r0
    14b2:	72 9f       	mul	r23, r18
    14b4:	bb 27       	eor	r27, r27
    14b6:	f0 0d       	add	r31, r0
    14b8:	b1 1d       	adc	r27, r1
    14ba:	63 9f       	mul	r22, r19
    14bc:	aa 27       	eor	r26, r26
    14be:	f0 0d       	add	r31, r0
    14c0:	b1 1d       	adc	r27, r1
    14c2:	aa 1f       	adc	r26, r26
    14c4:	64 9f       	mul	r22, r20
    14c6:	66 27       	eor	r22, r22
    14c8:	b0 0d       	add	r27, r0
    14ca:	a1 1d       	adc	r26, r1
    14cc:	66 1f       	adc	r22, r22
    14ce:	82 9f       	mul	r24, r18
    14d0:	22 27       	eor	r18, r18
    14d2:	b0 0d       	add	r27, r0
    14d4:	a1 1d       	adc	r26, r1
    14d6:	62 1f       	adc	r22, r18
    14d8:	73 9f       	mul	r23, r19
    14da:	b0 0d       	add	r27, r0
    14dc:	a1 1d       	adc	r26, r1
    14de:	62 1f       	adc	r22, r18
    14e0:	83 9f       	mul	r24, r19
    14e2:	a0 0d       	add	r26, r0
    14e4:	61 1d       	adc	r22, r1
    14e6:	22 1f       	adc	r18, r18
    14e8:	74 9f       	mul	r23, r20
    14ea:	33 27       	eor	r19, r19
    14ec:	a0 0d       	add	r26, r0
    14ee:	61 1d       	adc	r22, r1
    14f0:	23 1f       	adc	r18, r19
    14f2:	84 9f       	mul	r24, r20
    14f4:	60 0d       	add	r22, r0
    14f6:	21 1d       	adc	r18, r1
    14f8:	82 2f       	mov	r24, r18
    14fa:	76 2f       	mov	r23, r22
    14fc:	6a 2f       	mov	r22, r26
    14fe:	11 24       	eor	r1, r1
    1500:	9f 57       	subi	r25, 0x7F	; 127
    1502:	50 40       	sbci	r21, 0x00	; 0
    1504:	8a f0       	brmi	.+34     	; 0x1528 <__mulsf3_pse+0x84>
    1506:	e1 f0       	breq	.+56     	; 0x1540 <__mulsf3_pse+0x9c>
    1508:	88 23       	and	r24, r24
    150a:	4a f0       	brmi	.+18     	; 0x151e <__mulsf3_pse+0x7a>
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	bb 1f       	adc	r27, r27
    1512:	66 1f       	adc	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	91 50       	subi	r25, 0x01	; 1
    151a:	50 40       	sbci	r21, 0x00	; 0
    151c:	a9 f7       	brne	.-22     	; 0x1508 <__mulsf3_pse+0x64>
    151e:	9e 3f       	cpi	r25, 0xFE	; 254
    1520:	51 05       	cpc	r21, r1
    1522:	70 f0       	brcs	.+28     	; 0x1540 <__mulsf3_pse+0x9c>
    1524:	50 cf       	rjmp	.-352    	; 0x13c6 <__fp_inf>
    1526:	aa cf       	rjmp	.-172    	; 0x147c <__fp_szero>
    1528:	5f 3f       	cpi	r21, 0xFF	; 255
    152a:	ec f3       	brlt	.-6      	; 0x1526 <__mulsf3_pse+0x82>
    152c:	98 3e       	cpi	r25, 0xE8	; 232
    152e:	dc f3       	brlt	.-10     	; 0x1526 <__mulsf3_pse+0x82>
    1530:	86 95       	lsr	r24
    1532:	77 95       	ror	r23
    1534:	67 95       	ror	r22
    1536:	b7 95       	ror	r27
    1538:	f7 95       	ror	r31
    153a:	e7 95       	ror	r30
    153c:	9f 5f       	subi	r25, 0xFF	; 255
    153e:	c1 f7       	brne	.-16     	; 0x1530 <__mulsf3_pse+0x8c>
    1540:	fe 2b       	or	r31, r30
    1542:	88 0f       	add	r24, r24
    1544:	91 1d       	adc	r25, r1
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	97 f9       	bld	r25, 7
    154c:	08 95       	ret

0000154e <sprintf>:
    154e:	ae e0       	ldi	r26, 0x0E	; 14
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ed ea       	ldi	r30, 0xAD	; 173
    1554:	fa e0       	ldi	r31, 0x0A	; 10
    1556:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__prologue_saves__+0x1c>
    155a:	0d 89       	ldd	r16, Y+21	; 0x15
    155c:	1e 89       	ldd	r17, Y+22	; 0x16
    155e:	86 e0       	ldi	r24, 0x06	; 6
    1560:	8c 83       	std	Y+4, r24	; 0x04
    1562:	1a 83       	std	Y+2, r17	; 0x02
    1564:	09 83       	std	Y+1, r16	; 0x01
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	9f e7       	ldi	r25, 0x7F	; 127
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	ae 01       	movw	r20, r28
    1570:	47 5e       	subi	r20, 0xE7	; 231
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	6f 89       	ldd	r22, Y+23	; 0x17
    157a:	78 8d       	ldd	r23, Y+24	; 0x18
    157c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vfprintf>
    1580:	ef 81       	ldd	r30, Y+7	; 0x07
    1582:	f8 85       	ldd	r31, Y+8	; 0x08
    1584:	e0 0f       	add	r30, r16
    1586:	f1 1f       	adc	r31, r17
    1588:	10 82       	st	Z, r1
    158a:	2e 96       	adiw	r28, 0x0e	; 14
    158c:	e4 e0       	ldi	r30, 0x04	; 4
    158e:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__epilogue_restores__+0x1c>

00001592 <vfprintf>:
    1592:	ad e0       	ldi	r26, 0x0D	; 13
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ef ec       	ldi	r30, 0xCF	; 207
    1598:	fa e0       	ldi	r31, 0x0A	; 10
    159a:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__prologue_saves__>
    159e:	3c 01       	movw	r6, r24
    15a0:	7d 87       	std	Y+13, r23	; 0x0d
    15a2:	6c 87       	std	Y+12, r22	; 0x0c
    15a4:	5a 01       	movw	r10, r20
    15a6:	fc 01       	movw	r30, r24
    15a8:	17 82       	std	Z+7, r1	; 0x07
    15aa:	16 82       	std	Z+6, r1	; 0x06
    15ac:	83 81       	ldd	r24, Z+3	; 0x03
    15ae:	81 ff       	sbrs	r24, 1
    15b0:	c8 c1       	rjmp	.+912    	; 0x1942 <vfprintf+0x3b0>
    15b2:	2e 01       	movw	r4, r28
    15b4:	08 94       	sec
    15b6:	41 1c       	adc	r4, r1
    15b8:	51 1c       	adc	r5, r1
    15ba:	f3 01       	movw	r30, r6
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	ec 85       	ldd	r30, Y+12	; 0x0c
    15c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    15c2:	93 fd       	sbrc	r25, 3
    15c4:	85 91       	lpm	r24, Z+
    15c6:	93 ff       	sbrs	r25, 3
    15c8:	81 91       	ld	r24, Z+
    15ca:	fd 87       	std	Y+13, r31	; 0x0d
    15cc:	ec 87       	std	Y+12, r30	; 0x0c
    15ce:	88 23       	and	r24, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <vfprintf+0x42>
    15d2:	b3 c1       	rjmp	.+870    	; 0x193a <vfprintf+0x3a8>
    15d4:	85 32       	cpi	r24, 0x25	; 37
    15d6:	41 f4       	brne	.+16     	; 0x15e8 <vfprintf+0x56>
    15d8:	93 fd       	sbrc	r25, 3
    15da:	85 91       	lpm	r24, Z+
    15dc:	93 ff       	sbrs	r25, 3
    15de:	81 91       	ld	r24, Z+
    15e0:	fd 87       	std	Y+13, r31	; 0x0d
    15e2:	ec 87       	std	Y+12, r30	; 0x0c
    15e4:	85 32       	cpi	r24, 0x25	; 37
    15e6:	29 f4       	brne	.+10     	; 0x15f2 <vfprintf+0x60>
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	b3 01       	movw	r22, r6
    15ec:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    15f0:	e4 cf       	rjmp	.-56     	; 0x15ba <vfprintf+0x28>
    15f2:	ff 24       	eor	r15, r15
    15f4:	ee 24       	eor	r14, r14
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	10 32       	cpi	r17, 0x20	; 32
    15fa:	b0 f4       	brcc	.+44     	; 0x1628 <vfprintf+0x96>
    15fc:	8b 32       	cpi	r24, 0x2B	; 43
    15fe:	69 f0       	breq	.+26     	; 0x161a <vfprintf+0x88>
    1600:	8c 32       	cpi	r24, 0x2C	; 44
    1602:	28 f4       	brcc	.+10     	; 0x160e <vfprintf+0x7c>
    1604:	80 32       	cpi	r24, 0x20	; 32
    1606:	51 f0       	breq	.+20     	; 0x161c <vfprintf+0x8a>
    1608:	83 32       	cpi	r24, 0x23	; 35
    160a:	71 f4       	brne	.+28     	; 0x1628 <vfprintf+0x96>
    160c:	0b c0       	rjmp	.+22     	; 0x1624 <vfprintf+0x92>
    160e:	8d 32       	cpi	r24, 0x2D	; 45
    1610:	39 f0       	breq	.+14     	; 0x1620 <vfprintf+0x8e>
    1612:	80 33       	cpi	r24, 0x30	; 48
    1614:	49 f4       	brne	.+18     	; 0x1628 <vfprintf+0x96>
    1616:	11 60       	ori	r17, 0x01	; 1
    1618:	2c c0       	rjmp	.+88     	; 0x1672 <vfprintf+0xe0>
    161a:	12 60       	ori	r17, 0x02	; 2
    161c:	14 60       	ori	r17, 0x04	; 4
    161e:	29 c0       	rjmp	.+82     	; 0x1672 <vfprintf+0xe0>
    1620:	18 60       	ori	r17, 0x08	; 8
    1622:	27 c0       	rjmp	.+78     	; 0x1672 <vfprintf+0xe0>
    1624:	10 61       	ori	r17, 0x10	; 16
    1626:	25 c0       	rjmp	.+74     	; 0x1672 <vfprintf+0xe0>
    1628:	17 fd       	sbrc	r17, 7
    162a:	2e c0       	rjmp	.+92     	; 0x1688 <vfprintf+0xf6>
    162c:	28 2f       	mov	r18, r24
    162e:	20 53       	subi	r18, 0x30	; 48
    1630:	2a 30       	cpi	r18, 0x0A	; 10
    1632:	98 f4       	brcc	.+38     	; 0x165a <vfprintf+0xc8>
    1634:	16 ff       	sbrs	r17, 6
    1636:	08 c0       	rjmp	.+16     	; 0x1648 <vfprintf+0xb6>
    1638:	8f 2d       	mov	r24, r15
    163a:	88 0f       	add	r24, r24
    163c:	f8 2e       	mov	r15, r24
    163e:	ff 0c       	add	r15, r15
    1640:	ff 0c       	add	r15, r15
    1642:	f8 0e       	add	r15, r24
    1644:	f2 0e       	add	r15, r18
    1646:	15 c0       	rjmp	.+42     	; 0x1672 <vfprintf+0xe0>
    1648:	8e 2d       	mov	r24, r14
    164a:	88 0f       	add	r24, r24
    164c:	e8 2e       	mov	r14, r24
    164e:	ee 0c       	add	r14, r14
    1650:	ee 0c       	add	r14, r14
    1652:	e8 0e       	add	r14, r24
    1654:	e2 0e       	add	r14, r18
    1656:	10 62       	ori	r17, 0x20	; 32
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <vfprintf+0xe0>
    165a:	8e 32       	cpi	r24, 0x2E	; 46
    165c:	21 f4       	brne	.+8      	; 0x1666 <vfprintf+0xd4>
    165e:	16 fd       	sbrc	r17, 6
    1660:	6c c1       	rjmp	.+728    	; 0x193a <vfprintf+0x3a8>
    1662:	10 64       	ori	r17, 0x40	; 64
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <vfprintf+0xe0>
    1666:	8c 36       	cpi	r24, 0x6C	; 108
    1668:	11 f4       	brne	.+4      	; 0x166e <vfprintf+0xdc>
    166a:	10 68       	ori	r17, 0x80	; 128
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0xe0>
    166e:	88 36       	cpi	r24, 0x68	; 104
    1670:	59 f4       	brne	.+22     	; 0x1688 <vfprintf+0xf6>
    1672:	ec 85       	ldd	r30, Y+12	; 0x0c
    1674:	fd 85       	ldd	r31, Y+13	; 0x0d
    1676:	93 fd       	sbrc	r25, 3
    1678:	85 91       	lpm	r24, Z+
    167a:	93 ff       	sbrs	r25, 3
    167c:	81 91       	ld	r24, Z+
    167e:	fd 87       	std	Y+13, r31	; 0x0d
    1680:	ec 87       	std	Y+12, r30	; 0x0c
    1682:	88 23       	and	r24, r24
    1684:	09 f0       	breq	.+2      	; 0x1688 <vfprintf+0xf6>
    1686:	b8 cf       	rjmp	.-144    	; 0x15f8 <vfprintf+0x66>
    1688:	98 2f       	mov	r25, r24
    168a:	95 54       	subi	r25, 0x45	; 69
    168c:	93 30       	cpi	r25, 0x03	; 3
    168e:	18 f0       	brcs	.+6      	; 0x1696 <vfprintf+0x104>
    1690:	90 52       	subi	r25, 0x20	; 32
    1692:	93 30       	cpi	r25, 0x03	; 3
    1694:	38 f4       	brcc	.+14     	; 0x16a4 <vfprintf+0x112>
    1696:	24 e0       	ldi	r18, 0x04	; 4
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	a2 0e       	add	r10, r18
    169c:	b3 1e       	adc	r11, r19
    169e:	3f e3       	ldi	r19, 0x3F	; 63
    16a0:	39 83       	std	Y+1, r19	; 0x01
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <vfprintf+0x130>
    16a4:	83 36       	cpi	r24, 0x63	; 99
    16a6:	31 f0       	breq	.+12     	; 0x16b4 <vfprintf+0x122>
    16a8:	83 37       	cpi	r24, 0x73	; 115
    16aa:	81 f0       	breq	.+32     	; 0x16cc <vfprintf+0x13a>
    16ac:	83 35       	cpi	r24, 0x53	; 83
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <vfprintf+0x120>
    16b0:	5a c0       	rjmp	.+180    	; 0x1766 <vfprintf+0x1d4>
    16b2:	22 c0       	rjmp	.+68     	; 0x16f8 <vfprintf+0x166>
    16b4:	f5 01       	movw	r30, r10
    16b6:	80 81       	ld	r24, Z
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	22 e0       	ldi	r18, 0x02	; 2
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	a2 0e       	add	r10, r18
    16c0:	b3 1e       	adc	r11, r19
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	c2 2e       	mov	r12, r18
    16c6:	d1 2c       	mov	r13, r1
    16c8:	42 01       	movw	r8, r4
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <vfprintf+0x162>
    16cc:	92 e0       	ldi	r25, 0x02	; 2
    16ce:	29 2e       	mov	r2, r25
    16d0:	31 2c       	mov	r3, r1
    16d2:	2a 0c       	add	r2, r10
    16d4:	3b 1c       	adc	r3, r11
    16d6:	f5 01       	movw	r30, r10
    16d8:	80 80       	ld	r8, Z
    16da:	91 80       	ldd	r9, Z+1	; 0x01
    16dc:	16 ff       	sbrs	r17, 6
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <vfprintf+0x154>
    16e0:	6f 2d       	mov	r22, r15
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <vfprintf+0x158>
    16e6:	6f ef       	ldi	r22, 0xFF	; 255
    16e8:	7f ef       	ldi	r23, 0xFF	; 255
    16ea:	c4 01       	movw	r24, r8
    16ec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <strnlen>
    16f0:	6c 01       	movw	r12, r24
    16f2:	51 01       	movw	r10, r2
    16f4:	1f 77       	andi	r17, 0x7F	; 127
    16f6:	15 c0       	rjmp	.+42     	; 0x1722 <vfprintf+0x190>
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	28 2e       	mov	r2, r24
    16fc:	31 2c       	mov	r3, r1
    16fe:	2a 0c       	add	r2, r10
    1700:	3b 1c       	adc	r3, r11
    1702:	f5 01       	movw	r30, r10
    1704:	80 80       	ld	r8, Z
    1706:	91 80       	ldd	r9, Z+1	; 0x01
    1708:	16 ff       	sbrs	r17, 6
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x180>
    170c:	6f 2d       	mov	r22, r15
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <vfprintf+0x184>
    1712:	6f ef       	ldi	r22, 0xFF	; 255
    1714:	7f ef       	ldi	r23, 0xFF	; 255
    1716:	c4 01       	movw	r24, r8
    1718:	0e 94 a7 0c 	call	0x194e	; 0x194e <strnlen_P>
    171c:	6c 01       	movw	r12, r24
    171e:	10 68       	ori	r17, 0x80	; 128
    1720:	51 01       	movw	r10, r2
    1722:	13 fd       	sbrc	r17, 3
    1724:	1c c0       	rjmp	.+56     	; 0x175e <vfprintf+0x1cc>
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <vfprintf+0x1a2>
    1728:	80 e2       	ldi	r24, 0x20	; 32
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	b3 01       	movw	r22, r6
    172e:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    1732:	ea 94       	dec	r14
    1734:	8e 2d       	mov	r24, r14
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	c8 16       	cp	r12, r24
    173a:	d9 06       	cpc	r13, r25
    173c:	a8 f3       	brcs	.-22     	; 0x1728 <vfprintf+0x196>
    173e:	0f c0       	rjmp	.+30     	; 0x175e <vfprintf+0x1cc>
    1740:	f4 01       	movw	r30, r8
    1742:	17 fd       	sbrc	r17, 7
    1744:	85 91       	lpm	r24, Z+
    1746:	17 ff       	sbrs	r17, 7
    1748:	81 91       	ld	r24, Z+
    174a:	4f 01       	movw	r8, r30
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	b3 01       	movw	r22, r6
    1750:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    1754:	e1 10       	cpse	r14, r1
    1756:	ea 94       	dec	r14
    1758:	08 94       	sec
    175a:	c1 08       	sbc	r12, r1
    175c:	d1 08       	sbc	r13, r1
    175e:	c1 14       	cp	r12, r1
    1760:	d1 04       	cpc	r13, r1
    1762:	71 f7       	brne	.-36     	; 0x1740 <vfprintf+0x1ae>
    1764:	e7 c0       	rjmp	.+462    	; 0x1934 <vfprintf+0x3a2>
    1766:	84 36       	cpi	r24, 0x64	; 100
    1768:	11 f0       	breq	.+4      	; 0x176e <vfprintf+0x1dc>
    176a:	89 36       	cpi	r24, 0x69	; 105
    176c:	51 f5       	brne	.+84     	; 0x17c2 <vfprintf+0x230>
    176e:	f5 01       	movw	r30, r10
    1770:	17 ff       	sbrs	r17, 7
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <vfprintf+0x1f0>
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	a2 81       	ldd	r26, Z+2	; 0x02
    177a:	b3 81       	ldd	r27, Z+3	; 0x03
    177c:	24 e0       	ldi	r18, 0x04	; 4
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	08 c0       	rjmp	.+16     	; 0x1792 <vfprintf+0x200>
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	aa 27       	eor	r26, r26
    1788:	97 fd       	sbrc	r25, 7
    178a:	a0 95       	com	r26
    178c:	ba 2f       	mov	r27, r26
    178e:	22 e0       	ldi	r18, 0x02	; 2
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	a2 0e       	add	r10, r18
    1794:	b3 1e       	adc	r11, r19
    1796:	01 2f       	mov	r16, r17
    1798:	0f 76       	andi	r16, 0x6F	; 111
    179a:	b7 ff       	sbrs	r27, 7
    179c:	08 c0       	rjmp	.+16     	; 0x17ae <vfprintf+0x21c>
    179e:	b0 95       	com	r27
    17a0:	a0 95       	com	r26
    17a2:	90 95       	com	r25
    17a4:	81 95       	neg	r24
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	af 4f       	sbci	r26, 0xFF	; 255
    17aa:	bf 4f       	sbci	r27, 0xFF	; 255
    17ac:	00 68       	ori	r16, 0x80	; 128
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	a2 01       	movw	r20, r4
    17b4:	2a e0       	ldi	r18, 0x0A	; 10
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__ultoa_invert>
    17bc:	d8 2e       	mov	r13, r24
    17be:	d4 18       	sub	r13, r4
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <vfprintf+0x2ae>
    17c2:	85 37       	cpi	r24, 0x75	; 117
    17c4:	21 f4       	brne	.+8      	; 0x17ce <vfprintf+0x23c>
    17c6:	1f 7e       	andi	r17, 0xEF	; 239
    17c8:	2a e0       	ldi	r18, 0x0A	; 10
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	20 c0       	rjmp	.+64     	; 0x180e <vfprintf+0x27c>
    17ce:	19 7f       	andi	r17, 0xF9	; 249
    17d0:	8f 36       	cpi	r24, 0x6F	; 111
    17d2:	a9 f0       	breq	.+42     	; 0x17fe <vfprintf+0x26c>
    17d4:	80 37       	cpi	r24, 0x70	; 112
    17d6:	20 f4       	brcc	.+8      	; 0x17e0 <vfprintf+0x24e>
    17d8:	88 35       	cpi	r24, 0x58	; 88
    17da:	09 f0       	breq	.+2      	; 0x17de <vfprintf+0x24c>
    17dc:	ae c0       	rjmp	.+348    	; 0x193a <vfprintf+0x3a8>
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <vfprintf+0x264>
    17e0:	80 37       	cpi	r24, 0x70	; 112
    17e2:	21 f0       	breq	.+8      	; 0x17ec <vfprintf+0x25a>
    17e4:	88 37       	cpi	r24, 0x78	; 120
    17e6:	09 f0       	breq	.+2      	; 0x17ea <vfprintf+0x258>
    17e8:	a8 c0       	rjmp	.+336    	; 0x193a <vfprintf+0x3a8>
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <vfprintf+0x25c>
    17ec:	10 61       	ori	r17, 0x10	; 16
    17ee:	14 ff       	sbrs	r17, 4
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <vfprintf+0x272>
    17f2:	14 60       	ori	r17, 0x04	; 4
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <vfprintf+0x272>
    17f6:	14 ff       	sbrs	r17, 4
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <vfprintf+0x278>
    17fa:	16 60       	ori	r17, 0x06	; 6
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x278>
    17fe:	28 e0       	ldi	r18, 0x08	; 8
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	05 c0       	rjmp	.+10     	; 0x180e <vfprintf+0x27c>
    1804:	20 e1       	ldi	r18, 0x10	; 16
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x27c>
    180a:	20 e1       	ldi	r18, 0x10	; 16
    180c:	32 e0       	ldi	r19, 0x02	; 2
    180e:	f5 01       	movw	r30, r10
    1810:	17 ff       	sbrs	r17, 7
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <vfprintf+0x290>
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	44 e0       	ldi	r20, 0x04	; 4
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	06 c0       	rjmp	.+12     	; 0x182e <vfprintf+0x29c>
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	42 e0       	ldi	r20, 0x02	; 2
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	a4 0e       	add	r10, r20
    1830:	b5 1e       	adc	r11, r21
    1832:	a2 01       	movw	r20, r4
    1834:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__ultoa_invert>
    1838:	d8 2e       	mov	r13, r24
    183a:	d4 18       	sub	r13, r4
    183c:	01 2f       	mov	r16, r17
    183e:	0f 77       	andi	r16, 0x7F	; 127
    1840:	06 ff       	sbrs	r16, 6
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <vfprintf+0x2c4>
    1844:	0e 7f       	andi	r16, 0xFE	; 254
    1846:	df 14       	cp	r13, r15
    1848:	30 f4       	brcc	.+12     	; 0x1856 <vfprintf+0x2c4>
    184a:	04 ff       	sbrs	r16, 4
    184c:	06 c0       	rjmp	.+12     	; 0x185a <vfprintf+0x2c8>
    184e:	02 fd       	sbrc	r16, 2
    1850:	04 c0       	rjmp	.+8      	; 0x185a <vfprintf+0x2c8>
    1852:	0f 7e       	andi	r16, 0xEF	; 239
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x2c8>
    1856:	1d 2d       	mov	r17, r13
    1858:	01 c0       	rjmp	.+2      	; 0x185c <vfprintf+0x2ca>
    185a:	1f 2d       	mov	r17, r15
    185c:	80 2f       	mov	r24, r16
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	04 ff       	sbrs	r16, 4
    1862:	0c c0       	rjmp	.+24     	; 0x187c <vfprintf+0x2ea>
    1864:	fe 01       	movw	r30, r28
    1866:	ed 0d       	add	r30, r13
    1868:	f1 1d       	adc	r31, r1
    186a:	20 81       	ld	r18, Z
    186c:	20 33       	cpi	r18, 0x30	; 48
    186e:	11 f4       	brne	.+4      	; 0x1874 <vfprintf+0x2e2>
    1870:	09 7e       	andi	r16, 0xE9	; 233
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <vfprintf+0x2f4>
    1874:	02 ff       	sbrs	r16, 2
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x2f2>
    1878:	1e 5f       	subi	r17, 0xFE	; 254
    187a:	05 c0       	rjmp	.+10     	; 0x1886 <vfprintf+0x2f4>
    187c:	86 78       	andi	r24, 0x86	; 134
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	09 f0       	breq	.+2      	; 0x1886 <vfprintf+0x2f4>
    1884:	1f 5f       	subi	r17, 0xFF	; 255
    1886:	80 2e       	mov	r8, r16
    1888:	99 24       	eor	r9, r9
    188a:	03 fd       	sbrc	r16, 3
    188c:	12 c0       	rjmp	.+36     	; 0x18b2 <vfprintf+0x320>
    188e:	00 ff       	sbrs	r16, 0
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <vfprintf+0x31a>
    1892:	fd 2c       	mov	r15, r13
    1894:	1e 15       	cp	r17, r14
    1896:	50 f4       	brcc	.+20     	; 0x18ac <vfprintf+0x31a>
    1898:	fe 0c       	add	r15, r14
    189a:	f1 1a       	sub	r15, r17
    189c:	1e 2d       	mov	r17, r14
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x31a>
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	b3 01       	movw	r22, r6
    18a6:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    18aa:	1f 5f       	subi	r17, 0xFF	; 255
    18ac:	1e 15       	cp	r17, r14
    18ae:	c0 f3       	brcs	.-16     	; 0x18a0 <vfprintf+0x30e>
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <vfprintf+0x328>
    18b2:	1e 15       	cp	r17, r14
    18b4:	10 f4       	brcc	.+4      	; 0x18ba <vfprintf+0x328>
    18b6:	e1 1a       	sub	r14, r17
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <vfprintf+0x32a>
    18ba:	ee 24       	eor	r14, r14
    18bc:	84 fe       	sbrs	r8, 4
    18be:	0f c0       	rjmp	.+30     	; 0x18de <vfprintf+0x34c>
    18c0:	80 e3       	ldi	r24, 0x30	; 48
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	b3 01       	movw	r22, r6
    18c6:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    18ca:	82 fe       	sbrs	r8, 2
    18cc:	1f c0       	rjmp	.+62     	; 0x190c <vfprintf+0x37a>
    18ce:	81 fe       	sbrs	r8, 1
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <vfprintf+0x346>
    18d2:	88 e5       	ldi	r24, 0x58	; 88
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	10 c0       	rjmp	.+32     	; 0x18f8 <vfprintf+0x366>
    18d8:	88 e7       	ldi	r24, 0x78	; 120
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0d c0       	rjmp	.+26     	; 0x18f8 <vfprintf+0x366>
    18de:	c4 01       	movw	r24, r8
    18e0:	86 78       	andi	r24, 0x86	; 134
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	91 f0       	breq	.+36     	; 0x190c <vfprintf+0x37a>
    18e8:	81 fc       	sbrc	r8, 1
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x35e>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <vfprintf+0x360>
    18f0:	8b e2       	ldi	r24, 0x2B	; 43
    18f2:	07 fd       	sbrc	r16, 7
    18f4:	8d e2       	ldi	r24, 0x2D	; 45
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	b3 01       	movw	r22, r6
    18fa:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <vfprintf+0x37a>
    1900:	80 e3       	ldi	r24, 0x30	; 48
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b3 01       	movw	r22, r6
    1906:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    190a:	fa 94       	dec	r15
    190c:	df 14       	cp	r13, r15
    190e:	c0 f3       	brcs	.-16     	; 0x1900 <vfprintf+0x36e>
    1910:	da 94       	dec	r13
    1912:	f2 01       	movw	r30, r4
    1914:	ed 0d       	add	r30, r13
    1916:	f1 1d       	adc	r31, r1
    1918:	80 81       	ld	r24, Z
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b3 01       	movw	r22, r6
    191e:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    1922:	dd 20       	and	r13, r13
    1924:	a9 f7       	brne	.-22     	; 0x1910 <vfprintf+0x37e>
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <vfprintf+0x3a2>
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	b3 01       	movw	r22, r6
    192e:	0e 94 bd 0c 	call	0x197a	; 0x197a <fputc>
    1932:	ea 94       	dec	r14
    1934:	ee 20       	and	r14, r14
    1936:	c1 f7       	brne	.-16     	; 0x1928 <vfprintf+0x396>
    1938:	40 ce       	rjmp	.-896    	; 0x15ba <vfprintf+0x28>
    193a:	f3 01       	movw	r30, r6
    193c:	86 81       	ldd	r24, Z+6	; 0x06
    193e:	97 81       	ldd	r25, Z+7	; 0x07
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x3b4>
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	2d 96       	adiw	r28, 0x0d	; 13
    1948:	e2 e1       	ldi	r30, 0x12	; 18
    194a:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__epilogue_restores__>

0000194e <strnlen_P>:
    194e:	fc 01       	movw	r30, r24
    1950:	05 90       	lpm	r0, Z+
    1952:	61 50       	subi	r22, 0x01	; 1
    1954:	70 40       	sbci	r23, 0x00	; 0
    1956:	01 10       	cpse	r0, r1
    1958:	d8 f7       	brcc	.-10     	; 0x1950 <strnlen_P+0x2>
    195a:	80 95       	com	r24
    195c:	90 95       	com	r25
    195e:	8e 0f       	add	r24, r30
    1960:	9f 1f       	adc	r25, r31
    1962:	08 95       	ret

00001964 <strnlen>:
    1964:	fc 01       	movw	r30, r24
    1966:	61 50       	subi	r22, 0x01	; 1
    1968:	70 40       	sbci	r23, 0x00	; 0
    196a:	01 90       	ld	r0, Z+
    196c:	01 10       	cpse	r0, r1
    196e:	d8 f7       	brcc	.-10     	; 0x1966 <strnlen+0x2>
    1970:	80 95       	com	r24
    1972:	90 95       	com	r25
    1974:	8e 0f       	add	r24, r30
    1976:	9f 1f       	adc	r25, r31
    1978:	08 95       	ret

0000197a <fputc>:
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	8c 01       	movw	r16, r24
    1984:	eb 01       	movw	r28, r22
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	81 ff       	sbrs	r24, 1
    198a:	1b c0       	rjmp	.+54     	; 0x19c2 <fputc+0x48>
    198c:	82 ff       	sbrs	r24, 2
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <fputc+0x30>
    1990:	2e 81       	ldd	r18, Y+6	; 0x06
    1992:	3f 81       	ldd	r19, Y+7	; 0x07
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	28 17       	cp	r18, r24
    199a:	39 07       	cpc	r19, r25
    199c:	64 f4       	brge	.+24     	; 0x19b6 <fputc+0x3c>
    199e:	e8 81       	ld	r30, Y
    19a0:	f9 81       	ldd	r31, Y+1	; 0x01
    19a2:	01 93       	st	Z+, r16
    19a4:	f9 83       	std	Y+1, r31	; 0x01
    19a6:	e8 83       	st	Y, r30
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <fputc+0x3c>
    19aa:	e8 85       	ldd	r30, Y+8	; 0x08
    19ac:	f9 85       	ldd	r31, Y+9	; 0x09
    19ae:	80 2f       	mov	r24, r16
    19b0:	09 95       	icall
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	31 f4       	brne	.+12     	; 0x19c2 <fputc+0x48>
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	9f 83       	std	Y+7, r25	; 0x07
    19be:	8e 83       	std	Y+6, r24	; 0x06
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <fputc+0x4c>
    19c2:	0f ef       	ldi	r16, 0xFF	; 255
    19c4:	1f ef       	ldi	r17, 0xFF	; 255
    19c6:	c8 01       	movw	r24, r16
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret

000019d2 <__ultoa_invert>:
    19d2:	fa 01       	movw	r30, r20
    19d4:	aa 27       	eor	r26, r26
    19d6:	28 30       	cpi	r18, 0x08	; 8
    19d8:	51 f1       	breq	.+84     	; 0x1a2e <__ultoa_invert+0x5c>
    19da:	20 31       	cpi	r18, 0x10	; 16
    19dc:	81 f1       	breq	.+96     	; 0x1a3e <__ultoa_invert+0x6c>
    19de:	e8 94       	clt
    19e0:	6f 93       	push	r22
    19e2:	6e 7f       	andi	r22, 0xFE	; 254
    19e4:	6e 5f       	subi	r22, 0xFE	; 254
    19e6:	7f 4f       	sbci	r23, 0xFF	; 255
    19e8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	af 4f       	sbci	r26, 0xFF	; 255
    19ee:	b1 e0       	ldi	r27, 0x01	; 1
    19f0:	3e d0       	rcall	.+124    	; 0x1a6e <__ultoa_invert+0x9c>
    19f2:	b4 e0       	ldi	r27, 0x04	; 4
    19f4:	3c d0       	rcall	.+120    	; 0x1a6e <__ultoa_invert+0x9c>
    19f6:	67 0f       	add	r22, r23
    19f8:	78 1f       	adc	r23, r24
    19fa:	89 1f       	adc	r24, r25
    19fc:	9a 1f       	adc	r25, r26
    19fe:	a1 1d       	adc	r26, r1
    1a00:	68 0f       	add	r22, r24
    1a02:	79 1f       	adc	r23, r25
    1a04:	8a 1f       	adc	r24, r26
    1a06:	91 1d       	adc	r25, r1
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	6a 0f       	add	r22, r26
    1a0c:	71 1d       	adc	r23, r1
    1a0e:	81 1d       	adc	r24, r1
    1a10:	91 1d       	adc	r25, r1
    1a12:	a1 1d       	adc	r26, r1
    1a14:	20 d0       	rcall	.+64     	; 0x1a56 <__ultoa_invert+0x84>
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <__ultoa_invert+0x48>
    1a18:	68 94       	set
    1a1a:	3f 91       	pop	r19
    1a1c:	2a e0       	ldi	r18, 0x0A	; 10
    1a1e:	26 9f       	mul	r18, r22
    1a20:	11 24       	eor	r1, r1
    1a22:	30 19       	sub	r19, r0
    1a24:	30 5d       	subi	r19, 0xD0	; 208
    1a26:	31 93       	st	Z+, r19
    1a28:	de f6       	brtc	.-74     	; 0x19e0 <__ultoa_invert+0xe>
    1a2a:	cf 01       	movw	r24, r30
    1a2c:	08 95       	ret
    1a2e:	46 2f       	mov	r20, r22
    1a30:	47 70       	andi	r20, 0x07	; 7
    1a32:	40 5d       	subi	r20, 0xD0	; 208
    1a34:	41 93       	st	Z+, r20
    1a36:	b3 e0       	ldi	r27, 0x03	; 3
    1a38:	0f d0       	rcall	.+30     	; 0x1a58 <__ultoa_invert+0x86>
    1a3a:	c9 f7       	brne	.-14     	; 0x1a2e <__ultoa_invert+0x5c>
    1a3c:	f6 cf       	rjmp	.-20     	; 0x1a2a <__ultoa_invert+0x58>
    1a3e:	46 2f       	mov	r20, r22
    1a40:	4f 70       	andi	r20, 0x0F	; 15
    1a42:	40 5d       	subi	r20, 0xD0	; 208
    1a44:	4a 33       	cpi	r20, 0x3A	; 58
    1a46:	18 f0       	brcs	.+6      	; 0x1a4e <__ultoa_invert+0x7c>
    1a48:	49 5d       	subi	r20, 0xD9	; 217
    1a4a:	31 fd       	sbrc	r19, 1
    1a4c:	40 52       	subi	r20, 0x20	; 32
    1a4e:	41 93       	st	Z+, r20
    1a50:	02 d0       	rcall	.+4      	; 0x1a56 <__ultoa_invert+0x84>
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <__ultoa_invert+0x6c>
    1a54:	ea cf       	rjmp	.-44     	; 0x1a2a <__ultoa_invert+0x58>
    1a56:	b4 e0       	ldi	r27, 0x04	; 4
    1a58:	a6 95       	lsr	r26
    1a5a:	97 95       	ror	r25
    1a5c:	87 95       	ror	r24
    1a5e:	77 95       	ror	r23
    1a60:	67 95       	ror	r22
    1a62:	ba 95       	dec	r27
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <__ultoa_invert+0x86>
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	61 05       	cpc	r22, r1
    1a6a:	71 05       	cpc	r23, r1
    1a6c:	08 95       	ret
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	0a 2e       	mov	r0, r26
    1a74:	06 94       	lsr	r0
    1a76:	57 95       	ror	r21
    1a78:	47 95       	ror	r20
    1a7a:	37 95       	ror	r19
    1a7c:	27 95       	ror	r18
    1a7e:	ba 95       	dec	r27
    1a80:	c9 f7       	brne	.-14     	; 0x1a74 <__ultoa_invert+0xa2>
    1a82:	62 0f       	add	r22, r18
    1a84:	73 1f       	adc	r23, r19
    1a86:	84 1f       	adc	r24, r20
    1a88:	95 1f       	adc	r25, r21
    1a8a:	a0 1d       	adc	r26, r0
    1a8c:	08 95       	ret

00001a8e <__prologue_saves__>:
    1a8e:	2f 92       	push	r2
    1a90:	3f 92       	push	r3
    1a92:	4f 92       	push	r4
    1a94:	5f 92       	push	r5
    1a96:	6f 92       	push	r6
    1a98:	7f 92       	push	r7
    1a9a:	8f 92       	push	r8
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	ca 1b       	sub	r28, r26
    1ab8:	db 0b       	sbc	r29, r27
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	09 94       	ijmp

00001ac6 <__epilogue_restores__>:
    1ac6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ac8:	39 88       	ldd	r3, Y+17	; 0x11
    1aca:	48 88       	ldd	r4, Y+16	; 0x10
    1acc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ace:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ad0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ad2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ad4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ad6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ad8:	b9 84       	ldd	r11, Y+9	; 0x09
    1ada:	c8 84       	ldd	r12, Y+8	; 0x08
    1adc:	df 80       	ldd	r13, Y+7	; 0x07
    1ade:	ee 80       	ldd	r14, Y+6	; 0x06
    1ae0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ae2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ae6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ae8:	b9 81       	ldd	r27, Y+1	; 0x01
    1aea:	ce 0f       	add	r28, r30
    1aec:	d1 1d       	adc	r29, r1
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	ed 01       	movw	r28, r26
    1afa:	08 95       	ret

00001afc <_exit>:
    1afc:	f8 94       	cli

00001afe <__stop_program>:
    1afe:	ff cf       	rjmp	.-2      	; 0x1afe <__stop_program>
