
driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001b48  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002640  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000843  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00004a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021e1  00000000  00000000  00004c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a58  00000000  00000000  00006e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f50  00000000  00000000  000078a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005ac  00000000  00000000  000087fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000625  00000000  00000000  00008da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000238f  00000000  00000000  000093cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000b75c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
      8a:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_vInit>:
#include "GPIO_MCAL.h"
#define F_CPU 8000000UL
#include "util/delay.h"

void button_vInit( u8 port,u8 pin ){
	GPIO_vsetPIN_DIR(port, pin,0);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
	
}
      98:	08 95       	ret

0000009a <button_u8read>:

u8 button_u8read( u8 port,u8 pin ){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
      9a:	0e 94 c3 01 	call	0x386	; 0x386 <GPIO_u8read_PIN>
	
	return x;
}
      9e:	08 95       	ret

000000a0 <main>:
#include "EEPROM_MCAL.h"
#include "Keypad_ECU.h"
#include <avr/interrupt.h>
int main(void){
	
	LCD_vInit(Eight_bit,High_Nibble,'A','B',2,'B',3,'B',4);
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	41 e4       	ldi	r20, 0x41	; 65
      a6:	22 e4       	ldi	r18, 0x42	; 66
      a8:	02 e0       	ldi	r16, 0x02	; 2
      aa:	0f 2e       	mov	r0, r31
      ac:	f2 e4       	ldi	r31, 0x42	; 66
      ae:	ef 2e       	mov	r14, r31
      b0:	f0 2d       	mov	r31, r0
      b2:	0f 2e       	mov	r0, r31
      b4:	f3 e0       	ldi	r31, 0x03	; 3
      b6:	cf 2e       	mov	r12, r31
      b8:	f0 2d       	mov	r31, r0
      ba:	0f 2e       	mov	r0, r31
      bc:	f2 e4       	ldi	r31, 0x42	; 66
      be:	af 2e       	mov	r10, r31
      c0:	f0 2d       	mov	r31, r0
      c2:	88 24       	eor	r8, r8
      c4:	68 94       	set
      c6:	82 f8       	bld	r8, 2
      c8:	0e 94 58 05 	call	0xab0	; 0xab0 <LCD_vInit>
	keypad_vInit('D');	
      cc:	84 e4       	ldi	r24, 0x44	; 68
      ce:	0e 94 66 04 	call	0x8cc	; 0x8cc <keypad_vInit>
	u8 x ;
	x=keypad_u8check_press('D');
      d2:	84 e4       	ldi	r24, 0x44	; 68
      d4:	0e 94 81 04 	call	0x902	; 0x902 <keypad_u8check_press>
      d8:	a8 2e       	mov	r10, r24
			x=keypad_u8check_press('D');
		}
		
		
		LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,x);
		x = NOTPRESSED;
      da:	cf ef       	ldi	r28, 0xFF	; 255
      dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x46>
	x=keypad_u8check_press('D');
	
	
	while(1){
		while (x==NOTPRESSED){
			x=keypad_u8check_press('D');
      de:	84 e4       	ldi	r24, 0x44	; 68
      e0:	0e 94 81 04 	call	0x902	; 0x902 <keypad_u8check_press>
      e4:	a8 2e       	mov	r10, r24
	u8 x ;
	x=keypad_u8check_press('D');
	
	
	while(1){
		while (x==NOTPRESSED){
      e6:	8f ef       	ldi	r24, 0xFF	; 255
      e8:	a8 16       	cp	r10, r24
      ea:	c9 f3       	breq	.-14     	; 0xde <main+0x3e>
			x=keypad_u8check_press('D');
		}
		
		
		LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,x);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	41 e4       	ldi	r20, 0x41	; 65
      f2:	22 e4       	ldi	r18, 0x42	; 66
      f4:	02 e0       	ldi	r16, 0x02	; 2
      f6:	0f 2e       	mov	r0, r31
      f8:	f2 e4       	ldi	r31, 0x42	; 66
      fa:	ef 2e       	mov	r14, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	cc 24       	eor	r12, r12
     100:	68 94       	set
     102:	c2 f8       	bld	r12, 2
     104:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_vsend_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     108:	8f ef       	ldi	r24, 0xFF	; 255
     10a:	92 e5       	ldi	r25, 0x52	; 82
     10c:	a7 e0       	ldi	r26, 0x07	; 7
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	90 40       	sbci	r25, 0x00	; 0
     112:	a0 40       	sbci	r26, 0x00	; 0
     114:	e1 f7       	brne	.-8      	; 0x10e <main+0x6e>
     116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x78>
     118:	00 00       	nop
		x = NOTPRESSED;
     11a:	ac 2e       	mov	r10, r28
     11c:	e4 cf       	rjmp	.-56     	; 0xe6 <main+0x46>

0000011e <EEPROM_Write>:
 */ 
#include "Register.h"
#include "stdmacros.h"
#include "Data_type.h"
void EEPROM_Write(u16 address , u8 value){
	myEEARL = (u8)address;      
     11e:	8e bb       	out	0x1e, r24	; 30
	myEEARH= (u8)(address>>8);
     120:	9f bb       	out	0x1f, r25	; 31
	myEEDR = value;
     122:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(myEECR , myEEMWE);
     124:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(myEECR , myEEWE);
     126:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(myEECR , myEEWE)==1);
     128:	e1 99       	sbic	0x1c, 1	; 28
     12a:	fe cf       	rjmp	.-4      	; 0x128 <EEPROM_Write+0xa>
}
     12c:	08 95       	ret

0000012e <EEPROM_Read>:



u8 EEPROM_Read(const u16 address){
	myEEARL = (u8)address;
     12e:	8e bb       	out	0x1e, r24	; 30
	myEEARH = (u8)(address>>8);
     130:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(myEECR , myEERE);
     132:	e0 9a       	sbi	0x1c, 0	; 28
	return myEEDR;
     134:	8d b3       	in	r24, 0x1d	; 29
     136:	08 95       	ret

00000138 <GPIO_voidInit>:
#include "GPIO_MCAL.h"

//================================Initialization=======================================
 void GPIO_voidInit(void){
	 /*Comment!: DDR initialization  */
	myDDRA = Init_direction_default;
     138:	1a ba       	out	0x1a, r1	; 26
	myDDRB = Init_direction_default;
     13a:	17 ba       	out	0x17, r1	; 23
	myDDRC = Init_direction_default;
     13c:	14 ba       	out	0x14, r1	; 20
	myDDRD = Init_direction_default;
     13e:	11 ba       	out	0x11, r1	; 17
 }
     140:	08 95       	ret

00000142 <GPIO_vsetPIN_DIR>:
//=====================================================================================

//===================================PIN===============================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir ){
	switch (portnum){
     142:	84 34       	cpi	r24, 0x44	; 68
     144:	09 f4       	brne	.+2      	; 0x148 <GPIO_vsetPIN_DIR+0x6>
     146:	71 c0       	rjmp	.+226    	; 0x22a <GPIO_vsetPIN_DIR+0xe8>
     148:	85 34       	cpi	r24, 0x45	; 69
     14a:	48 f4       	brcc	.+18     	; 0x15e <GPIO_vsetPIN_DIR+0x1c>
     14c:	82 34       	cpi	r24, 0x42	; 66
     14e:	99 f1       	breq	.+102    	; 0x1b6 <GPIO_vsetPIN_DIR+0x74>
     150:	83 34       	cpi	r24, 0x43	; 67
     152:	08 f0       	brcs	.+2      	; 0x156 <GPIO_vsetPIN_DIR+0x14>
     154:	4d c0       	rjmp	.+154    	; 0x1f0 <GPIO_vsetPIN_DIR+0xae>
     156:	81 34       	cpi	r24, 0x41	; 65
     158:	09 f0       	breq	.+2      	; 0x15c <GPIO_vsetPIN_DIR+0x1a>
     15a:	83 c0       	rjmp	.+262    	; 0x262 <GPIO_vsetPIN_DIR+0x120>
     15c:	0f c0       	rjmp	.+30     	; 0x17c <GPIO_vsetPIN_DIR+0x3a>
     15e:	82 36       	cpi	r24, 0x62	; 98
     160:	51 f1       	breq	.+84     	; 0x1b6 <GPIO_vsetPIN_DIR+0x74>
     162:	83 36       	cpi	r24, 0x63	; 99
     164:	20 f4       	brcc	.+8      	; 0x16e <GPIO_vsetPIN_DIR+0x2c>
     166:	81 36       	cpi	r24, 0x61	; 97
     168:	09 f0       	breq	.+2      	; 0x16c <GPIO_vsetPIN_DIR+0x2a>
     16a:	7b c0       	rjmp	.+246    	; 0x262 <GPIO_vsetPIN_DIR+0x120>
     16c:	07 c0       	rjmp	.+14     	; 0x17c <GPIO_vsetPIN_DIR+0x3a>
     16e:	83 36       	cpi	r24, 0x63	; 99
     170:	09 f4       	brne	.+2      	; 0x174 <GPIO_vsetPIN_DIR+0x32>
     172:	3e c0       	rjmp	.+124    	; 0x1f0 <GPIO_vsetPIN_DIR+0xae>
     174:	84 36       	cpi	r24, 0x64	; 100
     176:	09 f0       	breq	.+2      	; 0x17a <GPIO_vsetPIN_DIR+0x38>
     178:	74 c0       	rjmp	.+232    	; 0x262 <GPIO_vsetPIN_DIR+0x120>
     17a:	57 c0       	rjmp	.+174    	; 0x22a <GPIO_vsetPIN_DIR+0xe8>
		case 'A' :
		case 'a' :
			if(dir == 1){
     17c:	41 30       	cpi	r20, 0x01	; 1
     17e:	69 f4       	brne	.+26     	; 0x19a <GPIO_vsetPIN_DIR+0x58>
				SET_BIT(myDDRA , pinnum);
     180:	2a b3       	in	r18, 0x1a	; 26
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	ac 01       	movw	r20, r24
     188:	02 c0       	rjmp	.+4      	; 0x18e <GPIO_vsetPIN_DIR+0x4c>
     18a:	44 0f       	add	r20, r20
     18c:	55 1f       	adc	r21, r21
     18e:	6a 95       	dec	r22
     190:	e2 f7       	brpl	.-8      	; 0x18a <GPIO_vsetPIN_DIR+0x48>
     192:	ba 01       	movw	r22, r20
     194:	62 2b       	or	r22, r18
     196:	6a bb       	out	0x1a, r22	; 26
     198:	08 95       	ret
			}else{
				CLR_BIT(myDDRA , pinnum);
     19a:	2a b3       	in	r18, 0x1a	; 26
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	ac 01       	movw	r20, r24
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <GPIO_vsetPIN_DIR+0x66>
     1a4:	44 0f       	add	r20, r20
     1a6:	55 1f       	adc	r21, r21
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <GPIO_vsetPIN_DIR+0x62>
     1ac:	ba 01       	movw	r22, r20
     1ae:	60 95       	com	r22
     1b0:	62 23       	and	r22, r18
     1b2:	6a bb       	out	0x1a, r22	; 26
     1b4:	08 95       	ret
			}
			break;
		case 'b' :
		case 'B' :
			if(dir == 1){
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	69 f4       	brne	.+26     	; 0x1d4 <GPIO_vsetPIN_DIR+0x92>
				SET_BIT(myDDRB , pinnum);
     1ba:	27 b3       	in	r18, 0x17	; 23
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <GPIO_vsetPIN_DIR+0x86>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <GPIO_vsetPIN_DIR+0x82>
     1cc:	ba 01       	movw	r22, r20
     1ce:	62 2b       	or	r22, r18
     1d0:	67 bb       	out	0x17, r22	; 23
     1d2:	08 95       	ret
			}else{
				CLR_BIT(myDDRB , pinnum);
     1d4:	27 b3       	in	r18, 0x17	; 23
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	ac 01       	movw	r20, r24
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_vsetPIN_DIR+0xa0>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <GPIO_vsetPIN_DIR+0x9c>
     1e6:	ba 01       	movw	r22, r20
     1e8:	60 95       	com	r22
     1ea:	62 23       	and	r22, r18
     1ec:	67 bb       	out	0x17, r22	; 23
     1ee:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
     1f0:	41 30       	cpi	r20, 0x01	; 1
     1f2:	69 f4       	brne	.+26     	; 0x20e <GPIO_vsetPIN_DIR+0xcc>
				SET_BIT(myDDRC , pinnum);
     1f4:	24 b3       	in	r18, 0x14	; 20
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ac 01       	movw	r20, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <GPIO_vsetPIN_DIR+0xc0>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <GPIO_vsetPIN_DIR+0xbc>
     206:	ba 01       	movw	r22, r20
     208:	62 2b       	or	r22, r18
     20a:	64 bb       	out	0x14, r22	; 20
     20c:	08 95       	ret
			}else{
				CLR_BIT(myDDRC , pinnum);
     20e:	24 b3       	in	r18, 0x14	; 20
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_vsetPIN_DIR+0xda>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_vsetPIN_DIR+0xd6>
     220:	ba 01       	movw	r22, r20
     222:	60 95       	com	r22
     224:	62 23       	and	r22, r18
     226:	64 bb       	out	0x14, r22	; 20
     228:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <GPIO_vsetPIN_DIR+0x106>
				SET_BIT(myDDRD , pinnum);
     22e:	21 b3       	in	r18, 0x11	; 17
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <GPIO_vsetPIN_DIR+0xfa>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <GPIO_vsetPIN_DIR+0xf6>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	61 bb       	out	0x11, r22	; 17
     246:	08 95       	ret
			}else{
				CLR_BIT(myDDRD , pinnum);
     248:	21 b3       	in	r18, 0x11	; 17
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <GPIO_vsetPIN_DIR+0x114>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <GPIO_vsetPIN_DIR+0x110>
     25a:	ba 01       	movw	r22, r20
     25c:	60 95       	com	r22
     25e:	62 23       	and	r22, r18
     260:	61 bb       	out	0x11, r22	; 17
     262:	08 95       	ret

00000264 <GPIO_vwrite_PIN>:
	}
	
}

void GPIO_vwrite_PIN(u8 portnum , u8 pinnum , u8 value ){
	switch(portnum){
     264:	84 34       	cpi	r24, 0x44	; 68
     266:	09 f4       	brne	.+2      	; 0x26a <GPIO_vwrite_PIN+0x6>
     268:	71 c0       	rjmp	.+226    	; 0x34c <GPIO_vwrite_PIN+0xe8>
     26a:	85 34       	cpi	r24, 0x45	; 69
     26c:	48 f4       	brcc	.+18     	; 0x280 <GPIO_vwrite_PIN+0x1c>
     26e:	82 34       	cpi	r24, 0x42	; 66
     270:	99 f1       	breq	.+102    	; 0x2d8 <GPIO_vwrite_PIN+0x74>
     272:	83 34       	cpi	r24, 0x43	; 67
     274:	08 f0       	brcs	.+2      	; 0x278 <GPIO_vwrite_PIN+0x14>
     276:	4d c0       	rjmp	.+154    	; 0x312 <GPIO_vwrite_PIN+0xae>
     278:	81 34       	cpi	r24, 0x41	; 65
     27a:	09 f0       	breq	.+2      	; 0x27e <GPIO_vwrite_PIN+0x1a>
     27c:	83 c0       	rjmp	.+262    	; 0x384 <GPIO_vwrite_PIN+0x120>
     27e:	0f c0       	rjmp	.+30     	; 0x29e <GPIO_vwrite_PIN+0x3a>
     280:	82 36       	cpi	r24, 0x62	; 98
     282:	51 f1       	breq	.+84     	; 0x2d8 <GPIO_vwrite_PIN+0x74>
     284:	83 36       	cpi	r24, 0x63	; 99
     286:	20 f4       	brcc	.+8      	; 0x290 <GPIO_vwrite_PIN+0x2c>
     288:	81 36       	cpi	r24, 0x61	; 97
     28a:	09 f0       	breq	.+2      	; 0x28e <GPIO_vwrite_PIN+0x2a>
     28c:	7b c0       	rjmp	.+246    	; 0x384 <GPIO_vwrite_PIN+0x120>
     28e:	07 c0       	rjmp	.+14     	; 0x29e <GPIO_vwrite_PIN+0x3a>
     290:	83 36       	cpi	r24, 0x63	; 99
     292:	09 f4       	brne	.+2      	; 0x296 <GPIO_vwrite_PIN+0x32>
     294:	3e c0       	rjmp	.+124    	; 0x312 <GPIO_vwrite_PIN+0xae>
     296:	84 36       	cpi	r24, 0x64	; 100
     298:	09 f0       	breq	.+2      	; 0x29c <GPIO_vwrite_PIN+0x38>
     29a:	74 c0       	rjmp	.+232    	; 0x384 <GPIO_vwrite_PIN+0x120>
     29c:	57 c0       	rjmp	.+174    	; 0x34c <GPIO_vwrite_PIN+0xe8>
		case 'A':
		case 'a':
			if (value ==1){
     29e:	41 30       	cpi	r20, 0x01	; 1
     2a0:	69 f4       	brne	.+26     	; 0x2bc <GPIO_vwrite_PIN+0x58>
				SET_BIT(myPORTA , pinnum);
     2a2:	2b b3       	in	r18, 0x1b	; 27
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	ac 01       	movw	r20, r24
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <GPIO_vwrite_PIN+0x4c>
     2ac:	44 0f       	add	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <GPIO_vwrite_PIN+0x48>
     2b4:	ba 01       	movw	r22, r20
     2b6:	62 2b       	or	r22, r18
     2b8:	6b bb       	out	0x1b, r22	; 27
     2ba:	08 95       	ret
			}else {
				CLR_BIT(myPORTA , pinnum);
     2bc:	2b b3       	in	r18, 0x1b	; 27
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ac 01       	movw	r20, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_vwrite_PIN+0x66>
     2c6:	44 0f       	add	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_vwrite_PIN+0x62>
     2ce:	ba 01       	movw	r22, r20
     2d0:	60 95       	com	r22
     2d2:	62 23       	and	r22, r18
     2d4:	6b bb       	out	0x1b, r22	; 27
     2d6:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if (value ==1){
     2d8:	41 30       	cpi	r20, 0x01	; 1
     2da:	69 f4       	brne	.+26     	; 0x2f6 <GPIO_vwrite_PIN+0x92>
				SET_BIT(myPORTB , pinnum);
     2dc:	28 b3       	in	r18, 0x18	; 24
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	ac 01       	movw	r20, r24
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GPIO_vwrite_PIN+0x86>
     2e6:	44 0f       	add	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GPIO_vwrite_PIN+0x82>
     2ee:	ba 01       	movw	r22, r20
     2f0:	62 2b       	or	r22, r18
     2f2:	68 bb       	out	0x18, r22	; 24
     2f4:	08 95       	ret
			}else {
				CLR_BIT(myPORTB , pinnum);
     2f6:	28 b3       	in	r18, 0x18	; 24
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	ac 01       	movw	r20, r24
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <GPIO_vwrite_PIN+0xa0>
     300:	44 0f       	add	r20, r20
     302:	55 1f       	adc	r21, r21
     304:	6a 95       	dec	r22
     306:	e2 f7       	brpl	.-8      	; 0x300 <GPIO_vwrite_PIN+0x9c>
     308:	ba 01       	movw	r22, r20
     30a:	60 95       	com	r22
     30c:	62 23       	and	r22, r18
     30e:	68 bb       	out	0x18, r22	; 24
     310:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (value ==1){
     312:	41 30       	cpi	r20, 0x01	; 1
     314:	69 f4       	brne	.+26     	; 0x330 <GPIO_vwrite_PIN+0xcc>
				SET_BIT(myPORTC , pinnum);
     316:	25 b3       	in	r18, 0x15	; 21
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	ac 01       	movw	r20, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <GPIO_vwrite_PIN+0xc0>
     320:	44 0f       	add	r20, r20
     322:	55 1f       	adc	r21, r21
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <GPIO_vwrite_PIN+0xbc>
     328:	ba 01       	movw	r22, r20
     32a:	62 2b       	or	r22, r18
     32c:	65 bb       	out	0x15, r22	; 21
     32e:	08 95       	ret
			}else {
				CLR_BIT(myPORTC , pinnum);
     330:	25 b3       	in	r18, 0x15	; 21
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	ac 01       	movw	r20, r24
     338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_vwrite_PIN+0xda>
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	6a 95       	dec	r22
     340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_vwrite_PIN+0xd6>
     342:	ba 01       	movw	r22, r20
     344:	60 95       	com	r22
     346:	62 23       	and	r22, r18
     348:	65 bb       	out	0x15, r22	; 21
     34a:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (value ==1){
     34c:	41 30       	cpi	r20, 0x01	; 1
     34e:	69 f4       	brne	.+26     	; 0x36a <GPIO_vwrite_PIN+0x106>
				SET_BIT(myPORTD , pinnum);
     350:	22 b3       	in	r18, 0x12	; 18
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	ac 01       	movw	r20, r24
     358:	02 c0       	rjmp	.+4      	; 0x35e <GPIO_vwrite_PIN+0xfa>
     35a:	44 0f       	add	r20, r20
     35c:	55 1f       	adc	r21, r21
     35e:	6a 95       	dec	r22
     360:	e2 f7       	brpl	.-8      	; 0x35a <GPIO_vwrite_PIN+0xf6>
     362:	ba 01       	movw	r22, r20
     364:	62 2b       	or	r22, r18
     366:	62 bb       	out	0x12, r22	; 18
     368:	08 95       	ret
			}else {
				CLR_BIT(myPORTD , pinnum);
     36a:	22 b3       	in	r18, 0x12	; 18
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	ac 01       	movw	r20, r24
     372:	02 c0       	rjmp	.+4      	; 0x378 <GPIO_vwrite_PIN+0x114>
     374:	44 0f       	add	r20, r20
     376:	55 1f       	adc	r21, r21
     378:	6a 95       	dec	r22
     37a:	e2 f7       	brpl	.-8      	; 0x374 <GPIO_vwrite_PIN+0x110>
     37c:	ba 01       	movw	r22, r20
     37e:	60 95       	com	r22
     380:	62 23       	and	r22, r18
     382:	62 bb       	out	0x12, r22	; 18
     384:	08 95       	ret

00000386 <GPIO_u8read_PIN>:
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
     386:	84 34       	cpi	r24, 0x44	; 68
     388:	09 f4       	brne	.+2      	; 0x38c <GPIO_u8read_PIN+0x6>
     38a:	4e c0       	rjmp	.+156    	; 0x428 <GPIO_u8read_PIN+0xa2>
     38c:	85 34       	cpi	r24, 0x45	; 69
     38e:	40 f4       	brcc	.+16     	; 0x3a0 <GPIO_u8read_PIN+0x1a>
     390:	82 34       	cpi	r24, 0x42	; 66
     392:	31 f1       	breq	.+76     	; 0x3e0 <GPIO_u8read_PIN+0x5a>
     394:	83 34       	cpi	r24, 0x43	; 67
     396:	b0 f5       	brcc	.+108    	; 0x404 <GPIO_u8read_PIN+0x7e>
     398:	81 34       	cpi	r24, 0x41	; 65
     39a:	09 f0       	breq	.+2      	; 0x39e <GPIO_u8read_PIN+0x18>
     39c:	57 c0       	rjmp	.+174    	; 0x44c <GPIO_u8read_PIN+0xc6>
     39e:	0e c0       	rjmp	.+28     	; 0x3bc <GPIO_u8read_PIN+0x36>
     3a0:	82 36       	cpi	r24, 0x62	; 98
     3a2:	f1 f0       	breq	.+60     	; 0x3e0 <GPIO_u8read_PIN+0x5a>
     3a4:	83 36       	cpi	r24, 0x63	; 99
     3a6:	20 f4       	brcc	.+8      	; 0x3b0 <GPIO_u8read_PIN+0x2a>
     3a8:	81 36       	cpi	r24, 0x61	; 97
     3aa:	09 f0       	breq	.+2      	; 0x3ae <GPIO_u8read_PIN+0x28>
     3ac:	4f c0       	rjmp	.+158    	; 0x44c <GPIO_u8read_PIN+0xc6>
     3ae:	06 c0       	rjmp	.+12     	; 0x3bc <GPIO_u8read_PIN+0x36>
     3b0:	83 36       	cpi	r24, 0x63	; 99
     3b2:	41 f1       	breq	.+80     	; 0x404 <GPIO_u8read_PIN+0x7e>
     3b4:	84 36       	cpi	r24, 0x64	; 100
     3b6:	09 f0       	breq	.+2      	; 0x3ba <GPIO_u8read_PIN+0x34>
     3b8:	49 c0       	rjmp	.+146    	; 0x44c <GPIO_u8read_PIN+0xc6>
     3ba:	36 c0       	rjmp	.+108    	; 0x428 <GPIO_u8read_PIN+0xa2>
		case 'A':
		case 'a':
			x= READ_BIT(myPINA, pinnum);
     3bc:	29 b3       	in	r18, 0x19	; 25
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 2e       	mov	r0, r22
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_u8read_PIN+0x44>
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	0a 94       	dec	r0
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_u8read_PIN+0x40>
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	82 23       	and	r24, r18
     3d2:	93 23       	and	r25, r19
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <GPIO_u8read_PIN+0x54>
     3d6:	95 95       	asr	r25
     3d8:	87 95       	ror	r24
     3da:	6a 95       	dec	r22
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <GPIO_u8read_PIN+0x50>
			break;
     3de:	08 95       	ret
		case 'B':
		case 'b':
			x= READ_BIT(myPINB , pinnum);
     3e0:	26 b3       	in	r18, 0x16	; 22
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	06 2e       	mov	r0, r22
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <GPIO_u8read_PIN+0x68>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <GPIO_u8read_PIN+0x64>
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	82 23       	and	r24, r18
     3f6:	93 23       	and	r25, r19
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_u8read_PIN+0x78>
     3fa:	95 95       	asr	r25
     3fc:	87 95       	ror	r24
     3fe:	6a 95       	dec	r22
     400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_u8read_PIN+0x74>
			break;
     402:	08 95       	ret
		case 'C':
		case 'c':
			x= READ_BIT(myPINC , pinnum);
     404:	23 b3       	in	r18, 0x13	; 19
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	06 2e       	mov	r0, r22
     40c:	02 c0       	rjmp	.+4      	; 0x412 <GPIO_u8read_PIN+0x8c>
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	0a 94       	dec	r0
     414:	e2 f7       	brpl	.-8      	; 0x40e <GPIO_u8read_PIN+0x88>
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	82 23       	and	r24, r18
     41a:	93 23       	and	r25, r19
     41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_u8read_PIN+0x9c>
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	6a 95       	dec	r22
     424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_u8read_PIN+0x98>
			break;
     426:	08 95       	ret
		case 'D':
		case 'd':
			x= READ_BIT(myPIND, pinnum);
     428:	20 b3       	in	r18, 0x10	; 16
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	06 2e       	mov	r0, r22
     430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_u8read_PIN+0xb0>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_u8read_PIN+0xac>
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	82 23       	and	r24, r18
     43e:	93 23       	and	r25, r19
     440:	02 c0       	rjmp	.+4      	; 0x446 <GPIO_u8read_PIN+0xc0>
     442:	95 95       	asr	r25
     444:	87 95       	ror	r24
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <GPIO_u8read_PIN+0xbc>
			break;
     44a:	08 95       	ret
		default: break;
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
     44c:	80 e0       	ldi	r24, 0x00	; 0
			x= READ_BIT(myPIND, pinnum);
			break;
		default: break;
	}
	return x;
}
     44e:	08 95       	ret

00000450 <GPIO_vtoggle_PIN>:

void GPIO_vtoggle_PIN(u8 portnum, u8 pinnum){
	switch (portnum){
     450:	84 34       	cpi	r24, 0x44	; 68
     452:	09 f4       	brne	.+2      	; 0x456 <GPIO_vtoggle_PIN+0x6>
     454:	3d c0       	rjmp	.+122    	; 0x4d0 <GPIO_vtoggle_PIN+0x80>
     456:	85 34       	cpi	r24, 0x45	; 69
     458:	40 f4       	brcc	.+16     	; 0x46a <GPIO_vtoggle_PIN+0x1a>
     45a:	82 34       	cpi	r24, 0x42	; 66
     45c:	f9 f0       	breq	.+62     	; 0x49c <GPIO_vtoggle_PIN+0x4c>
     45e:	83 34       	cpi	r24, 0x43	; 67
     460:	50 f5       	brcc	.+84     	; 0x4b6 <GPIO_vtoggle_PIN+0x66>
     462:	81 34       	cpi	r24, 0x41	; 65
     464:	09 f0       	breq	.+2      	; 0x468 <GPIO_vtoggle_PIN+0x18>
     466:	40 c0       	rjmp	.+128    	; 0x4e8 <GPIO_vtoggle_PIN+0x98>
     468:	0c c0       	rjmp	.+24     	; 0x482 <GPIO_vtoggle_PIN+0x32>
     46a:	82 36       	cpi	r24, 0x62	; 98
     46c:	b9 f0       	breq	.+46     	; 0x49c <GPIO_vtoggle_PIN+0x4c>
     46e:	83 36       	cpi	r24, 0x63	; 99
     470:	18 f4       	brcc	.+6      	; 0x478 <GPIO_vtoggle_PIN+0x28>
     472:	81 36       	cpi	r24, 0x61	; 97
     474:	c9 f5       	brne	.+114    	; 0x4e8 <GPIO_vtoggle_PIN+0x98>
     476:	05 c0       	rjmp	.+10     	; 0x482 <GPIO_vtoggle_PIN+0x32>
     478:	83 36       	cpi	r24, 0x63	; 99
     47a:	e9 f0       	breq	.+58     	; 0x4b6 <GPIO_vtoggle_PIN+0x66>
     47c:	84 36       	cpi	r24, 0x64	; 100
     47e:	a1 f5       	brne	.+104    	; 0x4e8 <GPIO_vtoggle_PIN+0x98>
     480:	27 c0       	rjmp	.+78     	; 0x4d0 <GPIO_vtoggle_PIN+0x80>
		case 'a' :
		case 'A' :
			TOGGLE_BIT(myPORTA, pinnum);
     482:	2b b3       	in	r18, 0x1b	; 27
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	ac 01       	movw	r20, r24
     48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_vtoggle_PIN+0x40>
     48c:	44 0f       	add	r20, r20
     48e:	55 1f       	adc	r21, r21
     490:	6a 95       	dec	r22
     492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_vtoggle_PIN+0x3c>
     494:	ba 01       	movw	r22, r20
     496:	62 27       	eor	r22, r18
     498:	6b bb       	out	0x1b, r22	; 27
			break;
     49a:	08 95       	ret
		case 'b' :
		case 'B' :
			TOGGLE_BIT(myPORTB, pinnum);
     49c:	28 b3       	in	r18, 0x18	; 24
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	ac 01       	movw	r20, r24
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <GPIO_vtoggle_PIN+0x5a>
     4a6:	44 0f       	add	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	6a 95       	dec	r22
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <GPIO_vtoggle_PIN+0x56>
     4ae:	ba 01       	movw	r22, r20
     4b0:	62 27       	eor	r22, r18
     4b2:	68 bb       	out	0x18, r22	; 24
			break;
     4b4:	08 95       	ret
		case 'c' :
		case 'C' :
			TOGGLE_BIT(myPORTC, pinnum);
     4b6:	25 b3       	in	r18, 0x15	; 21
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ac 01       	movw	r20, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <GPIO_vtoggle_PIN+0x74>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <GPIO_vtoggle_PIN+0x70>
     4c8:	ba 01       	movw	r22, r20
     4ca:	62 27       	eor	r22, r18
     4cc:	65 bb       	out	0x15, r22	; 21
			break;
     4ce:	08 95       	ret
		case 'd' :
		case 'D' :
			TOGGLE_BIT(myPORTD, pinnum);
     4d0:	22 b3       	in	r18, 0x12	; 18
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	ac 01       	movw	r20, r24
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <GPIO_vtoggle_PIN+0x8e>
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	6a 95       	dec	r22
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <GPIO_vtoggle_PIN+0x8a>
     4e2:	ba 01       	movw	r22, r20
     4e4:	62 27       	eor	r22, r18
     4e6:	62 bb       	out	0x12, r22	; 18
     4e8:	08 95       	ret

000004ea <GPIO_vconnectpullup>:
		default: break;
	}
}

void GPIO_vconnectpullup( u8 port, u8 pin , u8 connect_pullup ){
	switch (port){
     4ea:	84 34       	cpi	r24, 0x44	; 68
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <GPIO_vconnectpullup+0x6>
     4ee:	7a c0       	rjmp	.+244    	; 0x5e4 <GPIO_vconnectpullup+0xfa>
     4f0:	85 34       	cpi	r24, 0x45	; 69
     4f2:	48 f4       	brcc	.+18     	; 0x506 <GPIO_vconnectpullup+0x1c>
     4f4:	82 34       	cpi	r24, 0x42	; 66
     4f6:	b1 f1       	breq	.+108    	; 0x564 <GPIO_vconnectpullup+0x7a>
     4f8:	83 34       	cpi	r24, 0x43	; 67
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <GPIO_vconnectpullup+0x14>
     4fc:	53 c0       	rjmp	.+166    	; 0x5a4 <GPIO_vconnectpullup+0xba>
     4fe:	81 34       	cpi	r24, 0x41	; 65
     500:	09 f0       	breq	.+2      	; 0x504 <GPIO_vconnectpullup+0x1a>
     502:	8f c0       	rjmp	.+286    	; 0x622 <GPIO_vconnectpullup+0x138>
     504:	0f c0       	rjmp	.+30     	; 0x524 <GPIO_vconnectpullup+0x3a>
     506:	82 36       	cpi	r24, 0x62	; 98
     508:	69 f1       	breq	.+90     	; 0x564 <GPIO_vconnectpullup+0x7a>
     50a:	83 36       	cpi	r24, 0x63	; 99
     50c:	20 f4       	brcc	.+8      	; 0x516 <GPIO_vconnectpullup+0x2c>
     50e:	81 36       	cpi	r24, 0x61	; 97
     510:	09 f0       	breq	.+2      	; 0x514 <GPIO_vconnectpullup+0x2a>
     512:	87 c0       	rjmp	.+270    	; 0x622 <GPIO_vconnectpullup+0x138>
     514:	07 c0       	rjmp	.+14     	; 0x524 <GPIO_vconnectpullup+0x3a>
     516:	83 36       	cpi	r24, 0x63	; 99
     518:	09 f4       	brne	.+2      	; 0x51c <GPIO_vconnectpullup+0x32>
     51a:	44 c0       	rjmp	.+136    	; 0x5a4 <GPIO_vconnectpullup+0xba>
     51c:	84 36       	cpi	r24, 0x64	; 100
     51e:	09 f0       	breq	.+2      	; 0x522 <GPIO_vconnectpullup+0x38>
     520:	80 c0       	rjmp	.+256    	; 0x622 <GPIO_vconnectpullup+0x138>
     522:	60 c0       	rjmp	.+192    	; 0x5e4 <GPIO_vconnectpullup+0xfa>
		case 'A' :
		case 'a' :
			if (Connect==connect_pullup){
     524:	41 30       	cpi	r20, 0x01	; 1
     526:	81 f4       	brne	.+32     	; 0x548 <GPIO_vconnectpullup+0x5e>
				SET_BIT(myPORTA,pin);
     528:	2b b3       	in	r18, 0x1b	; 27
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	ac 01       	movw	r20, r24
     530:	02 c0       	rjmp	.+4      	; 0x536 <GPIO_vconnectpullup+0x4c>
     532:	44 0f       	add	r20, r20
     534:	55 1f       	adc	r21, r21
     536:	6a 95       	dec	r22
     538:	e2 f7       	brpl	.-8      	; 0x532 <GPIO_vconnectpullup+0x48>
     53a:	ba 01       	movw	r22, r20
     53c:	62 2b       	or	r22, r18
     53e:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
     540:	80 b7       	in	r24, 0x30	; 48
     542:	8b 7f       	andi	r24, 0xFB	; 251
     544:	80 bf       	out	0x30, r24	; 48
     546:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pin);
     548:	2b b3       	in	r18, 0x1b	; 27
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	ac 01       	movw	r20, r24
     550:	02 c0       	rjmp	.+4      	; 0x556 <GPIO_vconnectpullup+0x6c>
     552:	44 0f       	add	r20, r20
     554:	55 1f       	adc	r21, r21
     556:	6a 95       	dec	r22
     558:	e2 f7       	brpl	.-8      	; 0x552 <GPIO_vconnectpullup+0x68>
     55a:	ba 01       	movw	r22, r20
     55c:	60 95       	com	r22
     55e:	62 23       	and	r22, r18
     560:	6b bb       	out	0x1b, r22	; 27
     562:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect==connect_pullup){
     564:	41 30       	cpi	r20, 0x01	; 1
     566:	81 f4       	brne	.+32     	; 0x588 <GPIO_vconnectpullup+0x9e>
				SET_BIT(myPORTB,pin);
     568:	28 b3       	in	r18, 0x18	; 24
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	ac 01       	movw	r20, r24
     570:	02 c0       	rjmp	.+4      	; 0x576 <GPIO_vconnectpullup+0x8c>
     572:	44 0f       	add	r20, r20
     574:	55 1f       	adc	r21, r21
     576:	6a 95       	dec	r22
     578:	e2 f7       	brpl	.-8      	; 0x572 <GPIO_vconnectpullup+0x88>
     57a:	ba 01       	movw	r22, r20
     57c:	62 2b       	or	r22, r18
     57e:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
     580:	80 b7       	in	r24, 0x30	; 48
     582:	8b 7f       	andi	r24, 0xFB	; 251
     584:	80 bf       	out	0x30, r24	; 48
     586:	08 95       	ret
			}else{
				CLR_BIT(myPORTB,pin);
     588:	28 b3       	in	r18, 0x18	; 24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	ac 01       	movw	r20, r24
     590:	02 c0       	rjmp	.+4      	; 0x596 <GPIO_vconnectpullup+0xac>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	6a 95       	dec	r22
     598:	e2 f7       	brpl	.-8      	; 0x592 <GPIO_vconnectpullup+0xa8>
     59a:	ba 01       	movw	r22, r20
     59c:	60 95       	com	r22
     59e:	62 23       	and	r22, r18
     5a0:	68 bb       	out	0x18, r22	; 24
     5a2:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect==connect_pullup){
     5a4:	41 30       	cpi	r20, 0x01	; 1
     5a6:	81 f4       	brne	.+32     	; 0x5c8 <GPIO_vconnectpullup+0xde>
				SET_BIT(myPORTC,pin);
     5a8:	25 b3       	in	r18, 0x15	; 21
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	ac 01       	movw	r20, r24
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <GPIO_vconnectpullup+0xcc>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	6a 95       	dec	r22
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <GPIO_vconnectpullup+0xc8>
     5ba:	ba 01       	movw	r22, r20
     5bc:	62 2b       	or	r22, r18
     5be:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
     5c0:	80 b7       	in	r24, 0x30	; 48
     5c2:	8b 7f       	andi	r24, 0xFB	; 251
     5c4:	80 bf       	out	0x30, r24	; 48
     5c6:	08 95       	ret
			}else{
				CLR_BIT(myPORTC,pin);
     5c8:	25 b3       	in	r18, 0x15	; 21
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	ac 01       	movw	r20, r24
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <GPIO_vconnectpullup+0xec>
     5d2:	44 0f       	add	r20, r20
     5d4:	55 1f       	adc	r21, r21
     5d6:	6a 95       	dec	r22
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <GPIO_vconnectpullup+0xe8>
     5da:	ba 01       	movw	r22, r20
     5dc:	60 95       	com	r22
     5de:	62 23       	and	r22, r18
     5e0:	65 bb       	out	0x15, r22	; 21
     5e2:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect==connect_pullup){
     5e4:	41 30       	cpi	r20, 0x01	; 1
     5e6:	81 f4       	brne	.+32     	; 0x608 <GPIO_vconnectpullup+0x11e>
				SET_BIT(myPORTD,pin);
     5e8:	22 b3       	in	r18, 0x12	; 18
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	ac 01       	movw	r20, r24
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <GPIO_vconnectpullup+0x10c>
     5f2:	44 0f       	add	r20, r20
     5f4:	55 1f       	adc	r21, r21
     5f6:	6a 95       	dec	r22
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <GPIO_vconnectpullup+0x108>
     5fa:	ba 01       	movw	r22, r20
     5fc:	62 2b       	or	r22, r18
     5fe:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
     600:	80 b7       	in	r24, 0x30	; 48
     602:	8b 7f       	andi	r24, 0xFB	; 251
     604:	80 bf       	out	0x30, r24	; 48
     606:	08 95       	ret
			}else{
				CLR_BIT(myPORTD,pin);
     608:	22 b3       	in	r18, 0x12	; 18
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	ac 01       	movw	r20, r24
     610:	02 c0       	rjmp	.+4      	; 0x616 <GPIO_vconnectpullup+0x12c>
     612:	44 0f       	add	r20, r20
     614:	55 1f       	adc	r21, r21
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <GPIO_vconnectpullup+0x128>
     61a:	ba 01       	movw	r22, r20
     61c:	60 95       	com	r22
     61e:	62 23       	and	r22, r18
     620:	62 bb       	out	0x12, r22	; 18
     622:	08 95       	ret

00000624 <GPIO_vset_PORT_DIR>:
}

//==================================PORT=============================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
     624:	84 34       	cpi	r24, 0x44	; 68
     626:	d9 f0       	breq	.+54     	; 0x65e <GPIO_vset_PORT_DIR+0x3a>
     628:	85 34       	cpi	r24, 0x45	; 69
     62a:	38 f4       	brcc	.+14     	; 0x63a <GPIO_vset_PORT_DIR+0x16>
     62c:	82 34       	cpi	r24, 0x42	; 66
     62e:	99 f0       	breq	.+38     	; 0x656 <GPIO_vset_PORT_DIR+0x32>
     630:	83 34       	cpi	r24, 0x43	; 67
     632:	98 f4       	brcc	.+38     	; 0x65a <GPIO_vset_PORT_DIR+0x36>
     634:	81 34       	cpi	r24, 0x41	; 65
     636:	a1 f4       	brne	.+40     	; 0x660 <GPIO_vset_PORT_DIR+0x3c>
     638:	0c c0       	rjmp	.+24     	; 0x652 <GPIO_vset_PORT_DIR+0x2e>
     63a:	82 36       	cpi	r24, 0x62	; 98
     63c:	61 f0       	breq	.+24     	; 0x656 <GPIO_vset_PORT_DIR+0x32>
     63e:	83 36       	cpi	r24, 0x63	; 99
     640:	18 f4       	brcc	.+6      	; 0x648 <GPIO_vset_PORT_DIR+0x24>
     642:	81 36       	cpi	r24, 0x61	; 97
     644:	69 f4       	brne	.+26     	; 0x660 <GPIO_vset_PORT_DIR+0x3c>
     646:	05 c0       	rjmp	.+10     	; 0x652 <GPIO_vset_PORT_DIR+0x2e>
     648:	83 36       	cpi	r24, 0x63	; 99
     64a:	39 f0       	breq	.+14     	; 0x65a <GPIO_vset_PORT_DIR+0x36>
     64c:	84 36       	cpi	r24, 0x64	; 100
     64e:	41 f4       	brne	.+16     	; 0x660 <GPIO_vset_PORT_DIR+0x3c>
     650:	06 c0       	rjmp	.+12     	; 0x65e <GPIO_vset_PORT_DIR+0x3a>
		case 'A' :
		case 'a' :
			myDDRA = dir;
     652:	6a bb       	out	0x1a, r22	; 26
			break;
     654:	08 95       	ret
		case 'b' :
		case 'B' :
			myDDRB = dir;
     656:	67 bb       	out	0x17, r22	; 23
			break;
     658:	08 95       	ret
		case 'c' :
		case 'C' :
			myDDRC = dir;
     65a:	64 bb       	out	0x14, r22	; 20
			break;
     65c:	08 95       	ret
		case 'd' :
		case 'D' :
			myDDRD = dir;
     65e:	61 bb       	out	0x11, r22	; 17
     660:	08 95       	ret

00000662 <GPIO_vwrite_PORT>:
		default: break;
	}
}

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
     662:	84 34       	cpi	r24, 0x44	; 68
     664:	d9 f0       	breq	.+54     	; 0x69c <GPIO_vwrite_PORT+0x3a>
     666:	85 34       	cpi	r24, 0x45	; 69
     668:	38 f4       	brcc	.+14     	; 0x678 <GPIO_vwrite_PORT+0x16>
     66a:	82 34       	cpi	r24, 0x42	; 66
     66c:	99 f0       	breq	.+38     	; 0x694 <GPIO_vwrite_PORT+0x32>
     66e:	83 34       	cpi	r24, 0x43	; 67
     670:	98 f4       	brcc	.+38     	; 0x698 <GPIO_vwrite_PORT+0x36>
     672:	81 34       	cpi	r24, 0x41	; 65
     674:	a1 f4       	brne	.+40     	; 0x69e <GPIO_vwrite_PORT+0x3c>
     676:	0c c0       	rjmp	.+24     	; 0x690 <GPIO_vwrite_PORT+0x2e>
     678:	82 36       	cpi	r24, 0x62	; 98
     67a:	61 f0       	breq	.+24     	; 0x694 <GPIO_vwrite_PORT+0x32>
     67c:	83 36       	cpi	r24, 0x63	; 99
     67e:	18 f4       	brcc	.+6      	; 0x686 <GPIO_vwrite_PORT+0x24>
     680:	81 36       	cpi	r24, 0x61	; 97
     682:	69 f4       	brne	.+26     	; 0x69e <GPIO_vwrite_PORT+0x3c>
     684:	05 c0       	rjmp	.+10     	; 0x690 <GPIO_vwrite_PORT+0x2e>
     686:	83 36       	cpi	r24, 0x63	; 99
     688:	39 f0       	breq	.+14     	; 0x698 <GPIO_vwrite_PORT+0x36>
     68a:	84 36       	cpi	r24, 0x64	; 100
     68c:	41 f4       	brne	.+16     	; 0x69e <GPIO_vwrite_PORT+0x3c>
     68e:	06 c0       	rjmp	.+12     	; 0x69c <GPIO_vwrite_PORT+0x3a>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
     690:	6b bb       	out	0x1b, r22	; 27
			break;
     692:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
     694:	68 bb       	out	0x18, r22	; 24
			break;
     696:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
     698:	65 bb       	out	0x15, r22	; 21
			break;
     69a:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
     69c:	62 bb       	out	0x12, r22	; 18
     69e:	08 95       	ret

000006a0 <GPIO_vtoggle_PORT>:
		default: break;
	}
}

void GPIO_vtoggle_PORT(u8 portnum){
	switch (portnum){
     6a0:	84 34       	cpi	r24, 0x44	; 68
     6a2:	09 f1       	breq	.+66     	; 0x6e6 <GPIO_vtoggle_PORT+0x46>
     6a4:	85 34       	cpi	r24, 0x45	; 69
     6a6:	38 f4       	brcc	.+14     	; 0x6b6 <GPIO_vtoggle_PORT+0x16>
     6a8:	82 34       	cpi	r24, 0x42	; 66
     6aa:	a9 f0       	breq	.+42     	; 0x6d6 <GPIO_vtoggle_PORT+0x36>
     6ac:	83 34       	cpi	r24, 0x43	; 67
     6ae:	b8 f4       	brcc	.+46     	; 0x6de <GPIO_vtoggle_PORT+0x3e>
     6b0:	81 34       	cpi	r24, 0x41	; 65
     6b2:	e1 f4       	brne	.+56     	; 0x6ec <GPIO_vtoggle_PORT+0x4c>
     6b4:	0c c0       	rjmp	.+24     	; 0x6ce <GPIO_vtoggle_PORT+0x2e>
     6b6:	82 36       	cpi	r24, 0x62	; 98
     6b8:	71 f0       	breq	.+28     	; 0x6d6 <GPIO_vtoggle_PORT+0x36>
     6ba:	83 36       	cpi	r24, 0x63	; 99
     6bc:	18 f4       	brcc	.+6      	; 0x6c4 <GPIO_vtoggle_PORT+0x24>
     6be:	81 36       	cpi	r24, 0x61	; 97
     6c0:	a9 f4       	brne	.+42     	; 0x6ec <GPIO_vtoggle_PORT+0x4c>
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <GPIO_vtoggle_PORT+0x2e>
     6c4:	83 36       	cpi	r24, 0x63	; 99
     6c6:	59 f0       	breq	.+22     	; 0x6de <GPIO_vtoggle_PORT+0x3e>
     6c8:	84 36       	cpi	r24, 0x64	; 100
     6ca:	81 f4       	brne	.+32     	; 0x6ec <GPIO_vtoggle_PORT+0x4c>
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <GPIO_vtoggle_PORT+0x46>
		case 'A' :
		case 'a' :
			myPORTA = ~myPORTA;
     6ce:	8b b3       	in	r24, 0x1b	; 27
     6d0:	80 95       	com	r24
     6d2:	8b bb       	out	0x1b, r24	; 27
			break;
     6d4:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = ~myPORTB;
     6d6:	88 b3       	in	r24, 0x18	; 24
     6d8:	80 95       	com	r24
     6da:	88 bb       	out	0x18, r24	; 24
			break;
     6dc:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = ~myPORTC;
     6de:	85 b3       	in	r24, 0x15	; 21
     6e0:	80 95       	com	r24
     6e2:	85 bb       	out	0x15, r24	; 21
			break;
     6e4:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = ~myPORTD;
     6e6:	82 b3       	in	r24, 0x12	; 18
     6e8:	80 95       	com	r24
     6ea:	82 bb       	out	0x12, r24	; 18
     6ec:	08 95       	ret

000006ee <GPIO_read_PORT>:
			break;
		default: break;
	}
}
u8 GPIO_read_PORT(u8 portnum){
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	0f 92       	push	r0
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
	volatile u8 val=0;
     6f8:	19 82       	std	Y+1, r1	; 0x01
	switch (portnum){
     6fa:	84 34       	cpi	r24, 0x44	; 68
     6fc:	f1 f0       	breq	.+60     	; 0x73a <GPIO_read_PORT+0x4c>
     6fe:	85 34       	cpi	r24, 0x45	; 69
     700:	38 f4       	brcc	.+14     	; 0x710 <GPIO_read_PORT+0x22>
     702:	82 34       	cpi	r24, 0x42	; 66
     704:	a1 f0       	breq	.+40     	; 0x72e <GPIO_read_PORT+0x40>
     706:	83 34       	cpi	r24, 0x43	; 67
     708:	a8 f4       	brcc	.+42     	; 0x734 <GPIO_read_PORT+0x46>
     70a:	81 34       	cpi	r24, 0x41	; 65
     70c:	c1 f4       	brne	.+48     	; 0x73e <GPIO_read_PORT+0x50>
     70e:	0c c0       	rjmp	.+24     	; 0x728 <GPIO_read_PORT+0x3a>
     710:	82 36       	cpi	r24, 0x62	; 98
     712:	69 f0       	breq	.+26     	; 0x72e <GPIO_read_PORT+0x40>
     714:	83 36       	cpi	r24, 0x63	; 99
     716:	18 f4       	brcc	.+6      	; 0x71e <GPIO_read_PORT+0x30>
     718:	81 36       	cpi	r24, 0x61	; 97
     71a:	89 f4       	brne	.+34     	; 0x73e <GPIO_read_PORT+0x50>
     71c:	05 c0       	rjmp	.+10     	; 0x728 <GPIO_read_PORT+0x3a>
     71e:	83 36       	cpi	r24, 0x63	; 99
     720:	49 f0       	breq	.+18     	; 0x734 <GPIO_read_PORT+0x46>
     722:	84 36       	cpi	r24, 0x64	; 100
     724:	61 f4       	brne	.+24     	; 0x73e <GPIO_read_PORT+0x50>
     726:	09 c0       	rjmp	.+18     	; 0x73a <GPIO_read_PORT+0x4c>
		case 'a' :
		case 'A' :
			val = myPINA;
     728:	89 b3       	in	r24, 0x19	; 25
     72a:	89 83       	std	Y+1, r24	; 0x01
			break;
     72c:	08 c0       	rjmp	.+16     	; 0x73e <GPIO_read_PORT+0x50>
		case 'b' :
		case 'B' :
			val = myPINB;
     72e:	86 b3       	in	r24, 0x16	; 22
     730:	89 83       	std	Y+1, r24	; 0x01
			break;
     732:	05 c0       	rjmp	.+10     	; 0x73e <GPIO_read_PORT+0x50>
		case 'c' :
		case 'C' :
			val = myPINC;
     734:	83 b3       	in	r24, 0x13	; 19
     736:	89 83       	std	Y+1, r24	; 0x01
			break;
     738:	02 c0       	rjmp	.+4      	; 0x73e <GPIO_read_PORT+0x50>
		case 'd' :
		case 'D' :
			val = myPIND;
     73a:	80 b3       	in	r24, 0x10	; 16
     73c:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
}
     73e:	0f 90       	pop	r0
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <GPIO_High_Nibble_vset_dir>:
//=====================================================================================

//==================================Nibble=============================================

//==================================High Nibble========================================
void GPIO_High_Nibble_vset_dir(u8 port,u8 dir){
     746:	cf 93       	push	r28
     748:	c8 2f       	mov	r28, r24
	if (1==dir){
     74a:	61 30       	cpi	r22, 0x01	; 1
     74c:	a1 f4       	brne	.+40     	; 0x776 <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
     74e:	64 e0       	ldi	r22, 0x04	; 4
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
     756:	8c 2f       	mov	r24, r28
     758:	65 e0       	ldi	r22, 0x05	; 5
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
     760:	8c 2f       	mov	r24, r28
     762:	66 e0       	ldi	r22, 0x06	; 6
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
     76a:	8c 2f       	mov	r24, r28
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
     774:	13 c0       	rjmp	.+38     	; 0x79c <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
     776:	64 e0       	ldi	r22, 0x04	; 4
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
     77e:	8c 2f       	mov	r24, r28
     780:	65 e0       	ldi	r22, 0x05	; 5
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
     788:	8c 2f       	mov	r24, r28
     78a:	66 e0       	ldi	r22, 0x06	; 6
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
     792:	8c 2f       	mov	r24, r28
     794:	67 e0       	ldi	r22, 0x07	; 7
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
	}
	
}
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <GPIO_High_Nibble_vwrite>:

void GPIO_High_Nibble_vwrite( u8 port , u8 value ){
	value <<= 4;   
     7a0:	62 95       	swap	r22
     7a2:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){    
     7a4:	84 34       	cpi	r24, 0x44	; 68
     7a6:	51 f1       	breq	.+84     	; 0x7fc <GPIO_High_Nibble_vwrite+0x5c>
     7a8:	85 34       	cpi	r24, 0x45	; 69
     7aa:	38 f4       	brcc	.+14     	; 0x7ba <GPIO_High_Nibble_vwrite+0x1a>
     7ac:	82 34       	cpi	r24, 0x42	; 66
     7ae:	c1 f0       	breq	.+48     	; 0x7e0 <GPIO_High_Nibble_vwrite+0x40>
     7b0:	83 34       	cpi	r24, 0x43	; 67
     7b2:	e8 f4       	brcc	.+58     	; 0x7ee <GPIO_High_Nibble_vwrite+0x4e>
     7b4:	81 34       	cpi	r24, 0x41	; 65
     7b6:	41 f5       	brne	.+80     	; 0x808 <GPIO_High_Nibble_vwrite+0x68>
     7b8:	0c c0       	rjmp	.+24     	; 0x7d2 <GPIO_High_Nibble_vwrite+0x32>
     7ba:	82 36       	cpi	r24, 0x62	; 98
     7bc:	89 f0       	breq	.+34     	; 0x7e0 <GPIO_High_Nibble_vwrite+0x40>
     7be:	83 36       	cpi	r24, 0x63	; 99
     7c0:	18 f4       	brcc	.+6      	; 0x7c8 <GPIO_High_Nibble_vwrite+0x28>
     7c2:	81 36       	cpi	r24, 0x61	; 97
     7c4:	09 f5       	brne	.+66     	; 0x808 <GPIO_High_Nibble_vwrite+0x68>
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <GPIO_High_Nibble_vwrite+0x32>
     7c8:	83 36       	cpi	r24, 0x63	; 99
     7ca:	89 f0       	breq	.+34     	; 0x7ee <GPIO_High_Nibble_vwrite+0x4e>
     7cc:	84 36       	cpi	r24, 0x64	; 100
     7ce:	e1 f4       	brne	.+56     	; 0x808 <GPIO_High_Nibble_vwrite+0x68>
     7d0:	15 c0       	rjmp	.+42     	; 0x7fc <GPIO_High_Nibble_vwrite+0x5c>
		case 'A':
		case 'a':			
			myPORTA &=0x0f; 
     7d2:	8b b3       	in	r24, 0x1b	; 27
     7d4:	8f 70       	andi	r24, 0x0F	; 15
     7d6:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     7d8:	8b b3       	in	r24, 0x1b	; 27
     7da:	68 2b       	or	r22, r24
     7dc:	6b bb       	out	0x1b, r22	; 27
			break;				
     7de:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0x0f;
     7e0:	88 b3       	in	r24, 0x18	; 24
     7e2:	8f 70       	andi	r24, 0x0F	; 15
     7e4:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     7e6:	88 b3       	in	r24, 0x18	; 24
     7e8:	68 2b       	or	r22, r24
     7ea:	68 bb       	out	0x18, r22	; 24
			break;
     7ec:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0x0f;
     7ee:	85 b3       	in	r24, 0x15	; 21
     7f0:	8f 70       	andi	r24, 0x0F	; 15
     7f2:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     7f4:	85 b3       	in	r24, 0x15	; 21
     7f6:	68 2b       	or	r22, r24
     7f8:	65 bb       	out	0x15, r22	; 21
			break;
     7fa:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0x0f;
     7fc:	82 b3       	in	r24, 0x12	; 18
     7fe:	8f 70       	andi	r24, 0x0F	; 15
     800:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     802:	82 b3       	in	r24, 0x12	; 18
     804:	68 2b       	or	r22, r24
     806:	62 bb       	out	0x12, r22	; 18
     808:	08 95       	ret

0000080a <GPIO_Low_Nibble_vset_dir>:
		default: break;
	}
}

//==================================Low Nibble========================================
void GPIO_Low_Nibble_vset_dir(u8 port,u8 dir){
     80a:	cf 93       	push	r28
     80c:	c8 2f       	mov	r28, r24
	if (1==dir){
     80e:	61 30       	cpi	r22, 0x01	; 1
     810:	a1 f4       	brne	.+40     	; 0x83a <GPIO_Low_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,0,1);
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
     81a:	8c 2f       	mov	r24, r28
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
     824:	8c 2f       	mov	r24, r28
     826:	62 e0       	ldi	r22, 0x02	; 2
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
     82e:	8c 2f       	mov	r24, r28
     830:	63 e0       	ldi	r22, 0x03	; 3
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
     838:	13 c0       	rjmp	.+38     	; 0x860 <__stack+0x1>
	}else{
		GPIO_vsetPIN_DIR(port,0,0);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
     842:	8c 2f       	mov	r24, r28
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
     84c:	8c 2f       	mov	r24, r28
     84e:	62 e0       	ldi	r22, 0x02	; 2
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
     856:	8c 2f       	mov	r24, r28
     858:	63 e0       	ldi	r22, 0x03	; 3
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
	}
}
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <GPIO_Low_Nibble_vwrite>:

void GPIO_Low_Nibble_vwrite( u8 port , u8 value ){
	value &=0x0f;
     864:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
     866:	84 34       	cpi	r24, 0x44	; 68
     868:	51 f1       	breq	.+84     	; 0x8be <GPIO_Low_Nibble_vwrite+0x5a>
     86a:	85 34       	cpi	r24, 0x45	; 69
     86c:	38 f4       	brcc	.+14     	; 0x87c <GPIO_Low_Nibble_vwrite+0x18>
     86e:	82 34       	cpi	r24, 0x42	; 66
     870:	c1 f0       	breq	.+48     	; 0x8a2 <GPIO_Low_Nibble_vwrite+0x3e>
     872:	83 34       	cpi	r24, 0x43	; 67
     874:	e8 f4       	brcc	.+58     	; 0x8b0 <GPIO_Low_Nibble_vwrite+0x4c>
     876:	81 34       	cpi	r24, 0x41	; 65
     878:	41 f5       	brne	.+80     	; 0x8ca <GPIO_Low_Nibble_vwrite+0x66>
     87a:	0c c0       	rjmp	.+24     	; 0x894 <GPIO_Low_Nibble_vwrite+0x30>
     87c:	82 36       	cpi	r24, 0x62	; 98
     87e:	89 f0       	breq	.+34     	; 0x8a2 <GPIO_Low_Nibble_vwrite+0x3e>
     880:	83 36       	cpi	r24, 0x63	; 99
     882:	18 f4       	brcc	.+6      	; 0x88a <GPIO_Low_Nibble_vwrite+0x26>
     884:	81 36       	cpi	r24, 0x61	; 97
     886:	09 f5       	brne	.+66     	; 0x8ca <GPIO_Low_Nibble_vwrite+0x66>
     888:	05 c0       	rjmp	.+10     	; 0x894 <GPIO_Low_Nibble_vwrite+0x30>
     88a:	83 36       	cpi	r24, 0x63	; 99
     88c:	89 f0       	breq	.+34     	; 0x8b0 <GPIO_Low_Nibble_vwrite+0x4c>
     88e:	84 36       	cpi	r24, 0x64	; 100
     890:	e1 f4       	brne	.+56     	; 0x8ca <GPIO_Low_Nibble_vwrite+0x66>
     892:	15 c0       	rjmp	.+42     	; 0x8be <GPIO_Low_Nibble_vwrite+0x5a>
		case 'A':
		case 'a':
			myPORTA &=0xf0;
     894:	8b b3       	in	r24, 0x1b	; 27
     896:	80 7f       	andi	r24, 0xF0	; 240
     898:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     89a:	8b b3       	in	r24, 0x1b	; 27
     89c:	68 2b       	or	r22, r24
     89e:	6b bb       	out	0x1b, r22	; 27
			break;
     8a0:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0xf0;
     8a2:	88 b3       	in	r24, 0x18	; 24
     8a4:	80 7f       	andi	r24, 0xF0	; 240
     8a6:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     8a8:	88 b3       	in	r24, 0x18	; 24
     8aa:	68 2b       	or	r22, r24
     8ac:	68 bb       	out	0x18, r22	; 24
			break;
     8ae:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0xf0;
     8b0:	85 b3       	in	r24, 0x15	; 21
     8b2:	80 7f       	andi	r24, 0xF0	; 240
     8b4:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     8b6:	85 b3       	in	r24, 0x15	; 21
     8b8:	68 2b       	or	r22, r24
     8ba:	65 bb       	out	0x15, r22	; 21
			break;
     8bc:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0xf0;
     8be:	82 b3       	in	r24, 0x12	; 18
     8c0:	80 7f       	andi	r24, 0xF0	; 240
     8c2:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     8c4:	82 b3       	in	r24, 0x12	; 18
     8c6:	68 2b       	or	r22, r24
     8c8:	62 bb       	out	0x12, r22	; 18
     8ca:	08 95       	ret

000008cc <keypad_vInit>:
 * Keypad_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "Keypad_ECU.h"
void keypad_vInit(u8 port){
     8cc:	cf 93       	push	r28
     8ce:	c8 2f       	mov	r28, r24
	
		GPIO_vset_PORT_DIR(port,0x0f);
     8d0:	6f e0       	ldi	r22, 0x0F	; 15
     8d2:	0e 94 12 03 	call	0x624	; 0x624 <GPIO_vset_PORT_DIR>
		GPIO_vconnectpullup(port,4,1);
     8d6:	8c 2f       	mov	r24, r28
     8d8:	64 e0       	ldi	r22, 0x04	; 4
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	0e 94 75 02 	call	0x4ea	; 0x4ea <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,5,1);
     8e0:	8c 2f       	mov	r24, r28
     8e2:	65 e0       	ldi	r22, 0x05	; 5
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	0e 94 75 02 	call	0x4ea	; 0x4ea <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,6,1);
     8ea:	8c 2f       	mov	r24, r28
     8ec:	66 e0       	ldi	r22, 0x06	; 6
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	0e 94 75 02 	call	0x4ea	; 0x4ea <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,7,1);
     8f4:	8c 2f       	mov	r24, r28
     8f6:	67 e0       	ldi	r22, 0x07	; 7
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	0e 94 75 02 	call	0x4ea	; 0x4ea <GPIO_vconnectpullup>
	
}
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <keypad_u8check_press>:

u8 keypad_u8check_press(u8 port){
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	60 97       	sbiw	r28, 0x10	; 16
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	08 2f       	mov	r16, r24
//uint8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
     91e:	de 01       	movw	r26, r28
     920:	11 96       	adiw	r26, 0x01	; 1
     922:	e0 e6       	ldi	r30, 0x60	; 96
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	01 90       	ld	r0, Z+
     92a:	0d 92       	st	X+, r0
     92c:	81 50       	subi	r24, 0x01	; 1
     92e:	e1 f7       	brne	.-8      	; 0x928 <keypad_u8check_press+0x26>
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){
     930:	ff 24       	eor	r15, r15
		GPIO_vwrite_PIN(port,0,1);
     932:	80 2f       	mov	r24, r16
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,1,1);
     93c:	80 2f       	mov	r24, r16
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	41 e0       	ldi	r20, 0x01	; 1
     942:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,2,1);
     946:	80 2f       	mov	r24, r16
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,3,1);
     950:	80 2f       	mov	r24, r16
     952:	63 e0       	ldi	r22, 0x03	; 3
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,row,0);
     95a:	80 2f       	mov	r24, r16
     95c:	6f 2d       	mov	r22, r15
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		
			for (coloumn=0; coloumn < 4; coloumn++){
     964:	10 e0       	ldi	r17, 0x00	; 0
				x=GPIO_u8read_PIN('D',(coloumn+4));
     966:	61 2f       	mov	r22, r17
     968:	6c 5f       	subi	r22, 0xFC	; 252
     96a:	84 e4       	ldi	r24, 0x44	; 68
     96c:	0e 94 c3 01 	call	0x386	; 0x386 <GPIO_u8read_PIN>
				if(0==x){
     970:	88 23       	and	r24, r24
     972:	61 f4       	brne	.+24     	; 0x98c <keypad_u8check_press+0x8a>
					returnval = arr[row][coloumn];
     974:	ef 2d       	mov	r30, r15
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	e1 0f       	add	r30, r17
     982:	f1 1d       	adc	r31, r1
     984:	ec 0f       	add	r30, r28
     986:	fd 1f       	adc	r31, r29
     988:	81 81       	ldd	r24, Z+1	; 0x01
     98a:	04 c0       	rjmp	.+8      	; 0x994 <keypad_u8check_press+0x92>
		GPIO_vwrite_PIN(port,1,1);
		GPIO_vwrite_PIN(port,2,1);
		GPIO_vwrite_PIN(port,3,1);
		GPIO_vwrite_PIN(port,row,0);
		
			for (coloumn=0; coloumn < 4; coloumn++){
     98c:	1f 5f       	subi	r17, 0xFF	; 255
     98e:	14 30       	cpi	r17, 0x04	; 4
     990:	51 f7       	brne	.-44     	; 0x966 <keypad_u8check_press+0x64>
     992:	0c c0       	rjmp	.+24     	; 0x9ac <keypad_u8check_press+0xaa>
		if(0==x){
			break;
		}
	}	
	return returnval;
     994:	60 96       	adiw	r28, 0x10	; 16
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	08 95       	ret
u8 keypad_u8check_press(u8 port){
//uint8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){
     9ac:	f3 94       	inc	r15
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	f8 16       	cp	r15, r24
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <keypad_u8check_press+0xb4>
     9b4:	be cf       	rjmp	.-132    	; 0x932 <keypad_u8check_press+0x30>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	ed cf       	rjmp	.-38     	; 0x994 <keypad_u8check_press+0x92>

000009ba <send_falling_edge>:
			_delay_ms(1);
		}
	}
}

  static void send_falling_edge(u8 EN_port,u8 EN_pin){
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	d8 2f       	mov	r29, r24
     9c0:	c6 2f       	mov	r28, r22
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
     9c8:	8f e9       	ldi	r24, 0x9F	; 159
     9ca:	9f e0       	ldi	r25, 0x0F	; 15
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <send_falling_edge+0x12>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <send_falling_edge+0x18>
     9d2:	00 00       	nop
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
     9d4:	8d 2f       	mov	r24, r29
     9d6:	6c 2f       	mov	r22, r28
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <LCD_vsend_cmd>:
			_delay_ms(1);
		}
	}
}

void LCD_vsend_cmd(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 cmd,u8 EN_port,u8 EN_pin){
     9e4:	af 92       	push	r10
     9e6:	cf 92       	push	r12
     9e8:	ef 92       	push	r14
     9ea:	0f 93       	push	r16
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	c4 2f       	mov	r28, r20
     9f2:	d2 2f       	mov	r29, r18
	if(1==Mode){
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	71 f4       	brne	.+28     	; 0xa14 <LCD_vsend_cmd+0x30>
		GPIO_vwrite_PORT(port,cmd);
     9f8:	84 2f       	mov	r24, r20
     9fa:	6e 2d       	mov	r22, r14
     9fc:	0e 94 31 03 	call	0x662	; 0x662 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a00:	8d 2f       	mov	r24, r29
     a02:	60 2f       	mov	r22, r16
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     a0a:	8c 2d       	mov	r24, r12
     a0c:	6a 2d       	mov	r22, r10
     a0e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
     a12:	47 c0       	rjmp	.+142    	; 0xaa2 <LCD_vsend_cmd+0xbe>
	}else {
		if (1==Nibble){
     a14:	61 30       	cpi	r22, 0x01	; 1
     a16:	19 f5       	brne	.+70     	; 0xa5e <LCD_vsend_cmd+0x7a>
			GPIO_High_Nibble_vwrite(port,cmd>>4);     
     a18:	6e 2d       	mov	r22, r14
     a1a:	62 95       	swap	r22
     a1c:	6f 70       	andi	r22, 0x0F	; 15
     a1e:	84 2f       	mov	r24, r20
     a20:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a24:	8d 2f       	mov	r24, r29
     a26:	60 2f       	mov	r22, r16
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a2e:	8c 2d       	mov	r24, r12
     a30:	6a 2d       	mov	r22, r10
     a32:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,cmd);
     a36:	8c 2f       	mov	r24, r28
     a38:	6e 2d       	mov	r22, r14
     a3a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a3e:	8d 2f       	mov	r24, r29
     a40:	60 2f       	mov	r22, r16
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a48:	8c 2d       	mov	r24, r12
     a4a:	6a 2d       	mov	r22, r10
     a4c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
     a50:	8f ec       	ldi	r24, 0xCF	; 207
     a52:	97 e0       	ldi	r25, 0x07	; 7
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <LCD_vsend_cmd+0x70>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <LCD_vsend_cmd+0x76>
     a5a:	00 00       	nop
     a5c:	22 c0       	rjmp	.+68     	; 0xaa2 <LCD_vsend_cmd+0xbe>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,cmd>>4);   
     a5e:	6e 2d       	mov	r22, r14
     a60:	62 95       	swap	r22
     a62:	6f 70       	andi	r22, 0x0F	; 15
     a64:	84 2f       	mov	r24, r20
     a66:	0e 94 32 04 	call	0x864	; 0x864 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a6a:	8d 2f       	mov	r24, r29
     a6c:	60 2f       	mov	r22, r16
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a74:	8c 2d       	mov	r24, r12
     a76:	6a 2d       	mov	r22, r10
     a78:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,cmd);
     a7c:	8c 2f       	mov	r24, r28
     a7e:	6e 2d       	mov	r22, r14
     a80:	0e 94 32 04 	call	0x864	; 0x864 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a84:	8d 2f       	mov	r24, r29
     a86:	60 2f       	mov	r22, r16
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a8e:	8c 2d       	mov	r24, r12
     a90:	6a 2d       	mov	r22, r10
     a92:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
     a96:	8f ec       	ldi	r24, 0xCF	; 207
     a98:	97 e0       	ldi	r25, 0x07	; 7
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <LCD_vsend_cmd+0xb6>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <LCD_vsend_cmd+0xbc>
     aa0:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	0f 91       	pop	r16
     aa8:	ef 90       	pop	r14
     aaa:	cf 90       	pop	r12
     aac:	af 90       	pop	r10
     aae:	08 95       	ret

00000ab0 <LCD_vInit>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

void LCD_vInit(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin, u8 RW_port, u8 RW_pin,u8 EN_port,u8 EN_pin){
     ab0:	7f 92       	push	r7
     ab2:	8f 92       	push	r8
     ab4:	9f 92       	push	r9
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	18 2f       	mov	r17, r24
     ad0:	f6 2e       	mov	r15, r22
     ad2:	74 2e       	mov	r7, r20
     ad4:	92 2e       	mov	r9, r18
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	91 ee       	ldi	r25, 0xE1	; 225
     ada:	a4 e0       	ldi	r26, 0x04	; 4
     adc:	81 50       	subi	r24, 0x01	; 1
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	a0 40       	sbci	r26, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <LCD_vInit+0x2c>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <LCD_vInit+0x36>
     ae6:	00 00       	nop
	_delay_ms(200);
	GPIO_vsetPIN_DIR(RS_port,RS_pin,1);
     ae8:	82 2f       	mov	r24, r18
     aea:	60 2f       	mov	r22, r16
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(RW_port,RW_pin,1);
     af2:	8e 2d       	mov	r24, r14
     af4:	6c 2d       	mov	r22, r12
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(EN_port,EN_pin,1);
     afc:	8a 2d       	mov	r24, r10
     afe:	68 2d       	mov	r22, r8
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
	if (1==Mode){
     b06:	11 30       	cpi	r17, 0x01	; 1
     b08:	09 f0       	breq	.+2      	; 0xb0c <LCD_vInit+0x5c>
     b0a:	50 c0       	rjmp	.+160    	; 0xbac <LCD_vInit+0xfc>
		GPIO_vset_PORT_DIR(port,0xff);
     b0c:	87 2d       	mov	r24, r7
     b0e:	6f ef       	ldi	r22, 0xFF	; 255
     b10:	0e 94 12 03 	call	0x624	; 0x624 <GPIO_vset_PORT_DIR>
		GPIO_vwrite_PIN(RW_port,RW_pin,0);
     b14:	8e 2d       	mov	r24, r14
     b16:	6c 2d       	mov	r22, r12
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
     b1e:	af e2       	ldi	r26, 0x2F	; 47
     b20:	b5 e7       	ldi	r27, 0x75	; 117
     b22:	11 97       	sbiw	r26, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <LCD_vInit+0x72>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <LCD_vInit+0x78>
     b28:	00 00       	nop
		_delay_ms(15);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_8BIT_2Lines,EN_port,EN_pin);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	6f 2d       	mov	r22, r15
     b2e:	47 2d       	mov	r20, r7
     b30:	29 2d       	mov	r18, r9
     b32:	0f 2e       	mov	r0, r31
     b34:	f8 e3       	ldi	r31, 0x38	; 56
     b36:	ef 2e       	mov	r14, r31
     b38:	f0 2d       	mov	r31, r0
     b3a:	ca 2c       	mov	r12, r10
     b3c:	a8 2c       	mov	r10, r8
     b3e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     b42:	8f ec       	ldi	r24, 0xCF	; 207
     b44:	97 e0       	ldi	r25, 0x07	; 7
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <LCD_vInit+0x96>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <LCD_vInit+0x9c>
     b4c:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	6f 2d       	mov	r22, r15
     b52:	47 2d       	mov	r20, r7
     b54:	29 2d       	mov	r18, r9
     b56:	0f 2e       	mov	r0, r31
     b58:	fe e0       	ldi	r31, 0x0E	; 14
     b5a:	ef 2e       	mov	r14, r31
     b5c:	f0 2d       	mov	r31, r0
     b5e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     b62:	af ec       	ldi	r26, 0xCF	; 207
     b64:	b7 e0       	ldi	r27, 0x07	; 7
     b66:	11 97       	sbiw	r26, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCD_vInit+0xb6>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <LCD_vInit+0xbc>
     b6c:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	6f 2d       	mov	r22, r15
     b72:	47 2d       	mov	r20, r7
     b74:	29 2d       	mov	r18, r9
     b76:	ee 24       	eor	r14, r14
     b78:	e3 94       	inc	r14
     b7a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     b7e:	8f e1       	ldi	r24, 0x1F	; 31
     b80:	9e e4       	ldi	r25, 0x4E	; 78
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCD_vInit+0xd2>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <LCD_vInit+0xd8>
     b88:	00 00       	nop
		_delay_ms(10);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	6f 2d       	mov	r22, r15
     b8e:	47 2d       	mov	r20, r7
     b90:	29 2d       	mov	r18, r9
     b92:	0f 2e       	mov	r0, r31
     b94:	f6 e0       	ldi	r31, 0x06	; 6
     b96:	ef 2e       	mov	r14, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     b9e:	af ec       	ldi	r26, 0xCF	; 207
     ba0:	b7 e0       	ldi	r27, 0x07	; 7
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <LCD_vInit+0xf2>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <LCD_vInit+0xf8>
     ba8:	00 00       	nop
     baa:	b5 c0       	rjmp	.+362    	; 0xd16 <LCD_vInit+0x266>
		_delay_ms(1);
		
	}else{
		if (1==Nibble){
     bac:	b1 e0       	ldi	r27, 0x01	; 1
     bae:	fb 16       	cp	r15, r27
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <LCD_vInit+0x104>
     bb2:	59 c0       	rjmp	.+178    	; 0xc66 <LCD_vInit+0x1b6>
			GPIO_High_Nibble_vset_dir(port,1);
     bb4:	87 2d       	mov	r24, r7
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	0e 94 a3 03 	call	0x746	; 0x746 <GPIO_High_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     bbc:	8e 2d       	mov	r24, r14
     bbe:	6c 2d       	mov	r22, r12
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     bc6:	81 2f       	mov	r24, r17
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	47 2d       	mov	r20, r7
     bcc:	29 2d       	mov	r18, r9
     bce:	ee 24       	eor	r14, r14
     bd0:	68 94       	set
     bd2:	e1 f8       	bld	r14, 1
     bd4:	ca 2c       	mov	r12, r10
     bd6:	a8 2c       	mov	r10, r8
     bd8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     bdc:	8f e2       	ldi	r24, 0x2F	; 47
     bde:	95 e7       	ldi	r25, 0x75	; 117
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <LCD_vInit+0x130>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <LCD_vInit+0x136>
     be6:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     be8:	81 2f       	mov	r24, r17
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	47 2d       	mov	r20, r7
     bee:	29 2d       	mov	r18, r9
     bf0:	0f 2e       	mov	r0, r31
     bf2:	f8 e2       	ldi	r31, 0x28	; 40
     bf4:	ef 2e       	mov	r14, r31
     bf6:	f0 2d       	mov	r31, r0
     bf8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     bfc:	af ec       	ldi	r26, 0xCF	; 207
     bfe:	b7 e0       	ldi	r27, 0x07	; 7
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <LCD_vInit+0x150>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <LCD_vInit+0x156>
     c06:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     c08:	81 2f       	mov	r24, r17
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	47 2d       	mov	r20, r7
     c0e:	29 2d       	mov	r18, r9
     c10:	0f 2e       	mov	r0, r31
     c12:	fe e0       	ldi	r31, 0x0E	; 14
     c14:	ef 2e       	mov	r14, r31
     c16:	f0 2d       	mov	r31, r0
     c18:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     c1c:	8f ec       	ldi	r24, 0xCF	; 207
     c1e:	97 e0       	ldi	r25, 0x07	; 7
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <LCD_vInit+0x170>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <LCD_vInit+0x176>
     c26:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     c28:	81 2f       	mov	r24, r17
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	47 2d       	mov	r20, r7
     c2e:	29 2d       	mov	r18, r9
     c30:	ee 24       	eor	r14, r14
     c32:	e3 94       	inc	r14
     c34:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     c38:	af e1       	ldi	r26, 0x1F	; 31
     c3a:	be e4       	ldi	r27, 0x4E	; 78
     c3c:	11 97       	sbiw	r26, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <LCD_vInit+0x18c>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <LCD_vInit+0x192>
     c42:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     c44:	81 2f       	mov	r24, r17
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	47 2d       	mov	r20, r7
     c4a:	29 2d       	mov	r18, r9
     c4c:	0f 2e       	mov	r0, r31
     c4e:	f6 e0       	ldi	r31, 0x06	; 6
     c50:	ef 2e       	mov	r14, r31
     c52:	f0 2d       	mov	r31, r0
     c54:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     c58:	8f ec       	ldi	r24, 0xCF	; 207
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <LCD_vInit+0x1ac>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <LCD_vInit+0x1b2>
     c62:	00 00       	nop
     c64:	58 c0       	rjmp	.+176    	; 0xd16 <LCD_vInit+0x266>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vset_dir(port,1);
     c66:	87 2d       	mov	r24, r7
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_Low_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     c6e:	8e 2d       	mov	r24, r14
     c70:	6c 2d       	mov	r22, r12
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     c78:	81 2f       	mov	r24, r17
     c7a:	6f 2d       	mov	r22, r15
     c7c:	47 2d       	mov	r20, r7
     c7e:	29 2d       	mov	r18, r9
     c80:	ee 24       	eor	r14, r14
     c82:	68 94       	set
     c84:	e1 f8       	bld	r14, 1
     c86:	ca 2c       	mov	r12, r10
     c88:	a8 2c       	mov	r10, r8
     c8a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     c8e:	af e2       	ldi	r26, 0x2F	; 47
     c90:	b5 e7       	ldi	r27, 0x75	; 117
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <LCD_vInit+0x1e2>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <LCD_vInit+0x1e8>
     c98:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     c9a:	81 2f       	mov	r24, r17
     c9c:	6f 2d       	mov	r22, r15
     c9e:	47 2d       	mov	r20, r7
     ca0:	29 2d       	mov	r18, r9
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f8 e2       	ldi	r31, 0x28	; 40
     ca6:	ef 2e       	mov	r14, r31
     ca8:	f0 2d       	mov	r31, r0
     caa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     cae:	8f ec       	ldi	r24, 0xCF	; 207
     cb0:	97 e0       	ldi	r25, 0x07	; 7
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <LCD_vInit+0x202>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <LCD_vInit+0x208>
     cb8:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     cba:	81 2f       	mov	r24, r17
     cbc:	6f 2d       	mov	r22, r15
     cbe:	47 2d       	mov	r20, r7
     cc0:	29 2d       	mov	r18, r9
     cc2:	0f 2e       	mov	r0, r31
     cc4:	fe e0       	ldi	r31, 0x0E	; 14
     cc6:	ef 2e       	mov	r14, r31
     cc8:	f0 2d       	mov	r31, r0
     cca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     cce:	af ec       	ldi	r26, 0xCF	; 207
     cd0:	b7 e0       	ldi	r27, 0x07	; 7
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <LCD_vInit+0x222>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <LCD_vInit+0x228>
     cd8:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     cda:	81 2f       	mov	r24, r17
     cdc:	6f 2d       	mov	r22, r15
     cde:	47 2d       	mov	r20, r7
     ce0:	29 2d       	mov	r18, r9
     ce2:	ee 24       	eor	r14, r14
     ce4:	e3 94       	inc	r14
     ce6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     cea:	8f e1       	ldi	r24, 0x1F	; 31
     cec:	9e e4       	ldi	r25, 0x4E	; 78
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <LCD_vInit+0x23e>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <LCD_vInit+0x244>
     cf4:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     cf6:	81 2f       	mov	r24, r17
     cf8:	6f 2d       	mov	r22, r15
     cfa:	47 2d       	mov	r20, r7
     cfc:	29 2d       	mov	r18, r9
     cfe:	0f 2e       	mov	r0, r31
     d00:	f6 e0       	ldi	r31, 0x06	; 6
     d02:	ef 2e       	mov	r14, r31
     d04:	f0 2d       	mov	r31, r0
     d06:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     d0a:	af ec       	ldi	r26, 0xCF	; 207
     d0c:	b7 e0       	ldi	r27, 0x07	; 7
     d0e:	11 97       	sbiw	r26, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <LCD_vInit+0x25e>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <LCD_vInit+0x264>
     d14:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	08 95       	ret

00000d32 <LCD_clear_screen>:
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
}

void LCD_clear_screen(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin){
     d32:	af 92       	push	r10
     d34:	cf 92       	push	r12
     d36:	ef 92       	push	r14
     d38:	0f 93       	push	r16
     d3a:	9e 2d       	mov	r25, r14
     d3c:	ac 2c       	mov	r10, r12
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     d3e:	ee 24       	eor	r14, r14
     d40:	e3 94       	inc	r14
     d42:	c9 2e       	mov	r12, r25
     d44:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     d48:	8f e1       	ldi	r24, 0x1F	; 31
     d4a:	9e e4       	ldi	r25, 0x4E	; 78
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <LCD_clear_screen+0x1a>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <LCD_clear_screen+0x20>
     d52:	00 00       	nop
	_delay_ms(10);
}
     d54:	0f 91       	pop	r16
     d56:	ef 90       	pop	r14
     d58:	cf 90       	pop	r12
     d5a:	af 90       	pop	r10
     d5c:	08 95       	ret

00000d5e <LCD_Move_Cursor>:

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
     d5e:	8f 92       	push	r8
     d60:	af 92       	push	r10
     d62:	cf 92       	push	r12
     d64:	ef 92       	push	r14
     d66:	0f 93       	push	r16
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	3e 2d       	mov	r19, r14
     d72:	9c 2d       	mov	r25, r12
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
     d74:	7a 2d       	mov	r23, r10
     d76:	71 50       	subi	r23, 0x01	; 1
     d78:	73 30       	cpi	r23, 0x03	; 3
     d7a:	88 f4       	brcc	.+34     	; 0xd9e <LCD_Move_Cursor+0x40>
     d7c:	70 e1       	ldi	r23, 0x10	; 16
     d7e:	78 15       	cp	r23, r8
     d80:	80 f0       	brcs	.+32     	; 0xda2 <LCD_Move_Cursor+0x44>
     d82:	88 20       	and	r8, r8
     d84:	81 f0       	breq	.+32     	; 0xda6 <LCD_Move_Cursor+0x48>
		data = 0x80;
	}else if (1 == line ){
     d86:	71 e0       	ldi	r23, 0x01	; 1
     d88:	a7 16       	cp	r10, r23
     d8a:	19 f4       	brne	.+6      	; 0xd92 <LCD_Move_Cursor+0x34>
		data = 0x80 + (position - 1);         
     d8c:	58 2d       	mov	r21, r8
     d8e:	51 58       	subi	r21, 0x81	; 129
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <LCD_Move_Cursor+0x4a>
	}else if (2 == line){
     d92:	72 e0       	ldi	r23, 0x02	; 2
     d94:	a7 16       	cp	r10, r23
     d96:	41 f4       	brne	.+16     	; 0xda8 <LCD_Move_Cursor+0x4a>
		data = 0xC0 + (position - 1);  
     d98:	58 2d       	mov	r21, r8
     d9a:	51 54       	subi	r21, 0x41	; 65
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <LCD_Move_Cursor+0x4a>
}

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
		data = 0x80;
     d9e:	50 e8       	ldi	r21, 0x80	; 128
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <LCD_Move_Cursor+0x4a>
     da2:	50 e8       	ldi	r21, 0x80	; 128
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <LCD_Move_Cursor+0x4a>
     da6:	50 e8       	ldi	r21, 0x80	; 128
	}else if (1 == line ){
		data = 0x80 + (position - 1);         
	}else if (2 == line){
		data = 0xC0 + (position - 1);  
	}
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,data,EN_port,EN_pin);
     da8:	e5 2e       	mov	r14, r21
     daa:	c3 2e       	mov	r12, r19
     dac:	a9 2e       	mov	r10, r25
     dae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_vsend_cmd>
     db2:	8f ec       	ldi	r24, 0xCF	; 207
     db4:	97 e0       	ldi	r25, 0x07	; 7
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <LCD_Move_Cursor+0x58>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <LCD_Move_Cursor+0x5e>
     dbc:	00 00       	nop
	_delay_ms(1);
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	0f 91       	pop	r16
     dc4:	ef 90       	pop	r14
     dc6:	cf 90       	pop	r12
     dc8:	af 90       	pop	r10
     dca:	8f 90       	pop	r8
     dcc:	08 95       	ret

00000dce <LCD_vsend_char>:

void LCD_vsend_char(u8 Mood , u8 Nibble,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 data){
     dce:	af 92       	push	r10
     dd0:	cf 92       	push	r12
     dd2:	ef 92       	push	r14
     dd4:	0f 93       	push	r16
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	c4 2f       	mov	r28, r20
     ddc:	d2 2f       	mov	r29, r18
	if (1==Mood){
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <LCD_vsend_char+0x3c>
		GPIO_vwrite_PORT(port,data);
     de2:	84 2f       	mov	r24, r20
     de4:	6a 2d       	mov	r22, r10
     de6:	0e 94 31 03 	call	0x662	; 0x662 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,1);
     dea:	8d 2f       	mov	r24, r29
     dec:	60 2f       	mov	r22, r16
     dee:	41 e0       	ldi	r20, 0x01	; 1
     df0:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     df4:	8e 2d       	mov	r24, r14
     df6:	6c 2d       	mov	r22, r12
     df8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
     dfc:	8f ec       	ldi	r24, 0xCF	; 207
     dfe:	97 e0       	ldi	r25, 0x07	; 7
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <LCD_vsend_char+0x32>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <LCD_vsend_char+0x38>
     e06:	00 00       	nop
     e08:	47 c0       	rjmp	.+142    	; 0xe98 <LCD_vsend_char+0xca>
		_delay_ms(1);
	}else{
		if (1==Nibble){
     e0a:	61 30       	cpi	r22, 0x01	; 1
     e0c:	19 f5       	brne	.+70     	; 0xe54 <LCD_vsend_char+0x86>
			GPIO_High_Nibble_vwrite(port,data>>4);
     e0e:	6a 2d       	mov	r22, r10
     e10:	62 95       	swap	r22
     e12:	6f 70       	andi	r22, 0x0F	; 15
     e14:	84 2f       	mov	r24, r20
     e16:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e1a:	8d 2f       	mov	r24, r29
     e1c:	60 2f       	mov	r22, r16
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e24:	8e 2d       	mov	r24, r14
     e26:	6c 2d       	mov	r22, r12
     e28:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,data);
     e2c:	8c 2f       	mov	r24, r28
     e2e:	6a 2d       	mov	r22, r10
     e30:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e34:	8d 2f       	mov	r24, r29
     e36:	60 2f       	mov	r22, r16
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e3e:	8e 2d       	mov	r24, r14
     e40:	6c 2d       	mov	r22, r12
     e42:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
     e46:	8f ec       	ldi	r24, 0xCF	; 207
     e48:	97 e0       	ldi	r25, 0x07	; 7
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <LCD_vsend_char+0x7c>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <LCD_vsend_char+0x82>
     e50:	00 00       	nop
     e52:	22 c0       	rjmp	.+68     	; 0xe98 <LCD_vsend_char+0xca>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,data>>4);
     e54:	6a 2d       	mov	r22, r10
     e56:	62 95       	swap	r22
     e58:	6f 70       	andi	r22, 0x0F	; 15
     e5a:	84 2f       	mov	r24, r20
     e5c:	0e 94 32 04 	call	0x864	; 0x864 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e60:	8d 2f       	mov	r24, r29
     e62:	60 2f       	mov	r22, r16
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e6a:	8e 2d       	mov	r24, r14
     e6c:	6c 2d       	mov	r22, r12
     e6e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,data);
     e72:	8c 2f       	mov	r24, r28
     e74:	6a 2d       	mov	r22, r10
     e76:	0e 94 32 04 	call	0x864	; 0x864 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e7a:	8d 2f       	mov	r24, r29
     e7c:	60 2f       	mov	r22, r16
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e84:	8e 2d       	mov	r24, r14
     e86:	6c 2d       	mov	r22, r12
     e88:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_falling_edge>
     e8c:	8f ec       	ldi	r24, 0xCF	; 207
     e8e:	97 e0       	ldi	r25, 0x07	; 7
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCD_vsend_char+0xc2>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <LCD_vsend_char+0xc8>
     e96:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	0f 91       	pop	r16
     e9e:	ef 90       	pop	r14
     ea0:	cf 90       	pop	r12
     ea2:	af 90       	pop	r10
     ea4:	08 95       	ret

00000ea6 <LCD_vsend_string>:
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     ea6:	6f 92       	push	r6
     ea8:	7f 92       	push	r7
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	68 2e       	mov	r6, r24
     ec4:	76 2e       	mov	r7, r22
     ec6:	84 2e       	mov	r8, r20
     ec8:	92 2e       	mov	r9, r18
     eca:	d0 2e       	mov	r13, r16
     ecc:	fe 2c       	mov	r15, r14
     ece:	1c 2d       	mov	r17, r12
     ed0:	e5 01       	movw	r28, r10
	while((*data)!='\0'){
     ed2:	a8 80       	ld	r10, Y
     ed4:	aa 20       	and	r10, r10
     ed6:	69 f0       	breq	.+26     	; 0xef2 <LCD_vsend_string+0x4c>
			_delay_ms(1);
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     ed8:	21 96       	adiw	r28, 0x01	; 1
	while((*data)!='\0'){
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
     eda:	86 2d       	mov	r24, r6
     edc:	67 2d       	mov	r22, r7
     ede:	48 2d       	mov	r20, r8
     ee0:	29 2d       	mov	r18, r9
     ee2:	0d 2d       	mov	r16, r13
     ee4:	ef 2c       	mov	r14, r15
     ee6:	c1 2e       	mov	r12, r17
     ee8:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_vsend_char>
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
	while((*data)!='\0'){
     eec:	a9 90       	ld	r10, Y+
     eee:	aa 20       	and	r10, r10
     ef0:	a1 f7       	brne	.-24     	; 0xeda <LCD_vsend_string+0x34>
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
		data++;
	}
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	7f 90       	pop	r7
     f0c:	6f 90       	pop	r6
     f0e:	08 95       	ret

00000f10 <LCD_display_number>:

void LCD_display_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u32 Number){
     f10:	7f 92       	push	r7
     f12:	8f 92       	push	r8
     f14:	9f 92       	push	r9
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	27 97       	sbiw	r28, 0x07	; 7
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	18 2f       	mov	r17, r24
     f3c:	f6 2e       	mov	r15, r22
     f3e:	d4 2e       	mov	r13, r20
     f40:	72 2e       	mov	r7, r18
     f42:	d5 01       	movw	r26, r10
     f44:	c4 01       	movw	r24, r8
	u8 str[7]; 
	sprintf(str,"%d",Number);
     f46:	2d b7       	in	r18, 0x3d	; 61
     f48:	3e b7       	in	r19, 0x3e	; 62
     f4a:	28 50       	subi	r18, 0x08	; 8
     f4c:	30 40       	sbci	r19, 0x00	; 0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	3e bf       	out	0x3e, r19	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	2d bf       	out	0x3d, r18	; 61
     f58:	4d b7       	in	r20, 0x3d	; 61
     f5a:	5e b7       	in	r21, 0x3e	; 62
     f5c:	4f 5f       	subi	r20, 0xFF	; 255
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	5e 01       	movw	r10, r28
     f62:	08 94       	sec
     f64:	a1 1c       	adc	r10, r1
     f66:	b1 1c       	adc	r11, r1
     f68:	ed b7       	in	r30, 0x3d	; 61
     f6a:	fe b7       	in	r31, 0x3e	; 62
     f6c:	b2 82       	std	Z+2, r11	; 0x02
     f6e:	a1 82       	std	Z+1, r10	; 0x01
     f70:	20 e7       	ldi	r18, 0x70	; 112
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	fa 01       	movw	r30, r20
     f76:	33 83       	std	Z+3, r19	; 0x03
     f78:	22 83       	std	Z+2, r18	; 0x02
     f7a:	84 83       	std	Z+4, r24	; 0x04
     f7c:	95 83       	std	Z+5, r25	; 0x05
     f7e:	a6 83       	std	Z+6, r26	; 0x06
     f80:	b7 83       	std	Z+7, r27	; 0x07
     f82:	0e 94 cb 0a 	call	0x1596	; 0x1596 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
     f86:	2d b7       	in	r18, 0x3d	; 61
     f88:	3e b7       	in	r19, 0x3e	; 62
     f8a:	28 5f       	subi	r18, 0xF8	; 248
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	3e bf       	out	0x3e, r19	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	2d bf       	out	0x3d, r18	; 61
     f98:	81 2f       	mov	r24, r17
     f9a:	6f 2d       	mov	r22, r15
     f9c:	4d 2d       	mov	r20, r13
     f9e:	27 2d       	mov	r18, r7
     fa0:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_vsend_string>
}
     fa4:	27 96       	adiw	r28, 0x07	; 7
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	08 95       	ret

00000fcc <LCD_display_real_number>:

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
     fcc:	2f 92       	push	r2
     fce:	3f 92       	push	r3
     fd0:	4f 92       	push	r4
     fd2:	5f 92       	push	r5
     fd4:	6f 92       	push	r6
     fd6:	7f 92       	push	r7
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	62 97       	sbiw	r28, 0x12	; 18
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	18 2f       	mov	r17, r24
    1000:	f6 2e       	mov	r15, r22
    1002:	d4 2e       	mov	r13, r20
    1004:	92 2e       	mov	r9, r18
    1006:	2e a1       	lds	r18, 0x4e
    1008:	3f a1       	lds	r19, 0x4f
    100a:	48 a5       	lds	r20, 0x68
    100c:	59 a5       	lds	r21, 0x69
    100e:	6a a5       	lds	r22, 0x6a
    1010:	7b a5       	lds	r23, 0x6b
    1012:	8c a5       	lds	r24, 0x6c
    1014:	9d a5       	lds	r25, 0x6d
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    1016:	99 23       	and	r25, r25
    1018:	2c f0       	brlt	.+10     	; 0x1024 <LCD_display_real_number+0x58>
    101a:	e5 e7       	ldi	r30, 0x75	; 117
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	fa 8b       	std	Y+18, r31	; 0x12
    1020:	e9 8b       	std	Y+17, r30	; 0x11
    1022:	04 c0       	rjmp	.+8      	; 0x102c <LCD_display_real_number+0x60>
    1024:	e3 e7       	ldi	r30, 0x73	; 115
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	fa 8b       	std	Y+18, r31	; 0x12
    102a:	e9 8b       	std	Y+17, r30	; 0x11
	f32 tmpval = (Number < 0) ? -Number : Number;
    102c:	0e 94 88 09 	call	0x1310	; 0x1310 <__floatdisf>
    1030:	2b 01       	movw	r4, r22
    1032:	3c 01       	movw	r6, r24
    1034:	e8 94       	clt
    1036:	77 f8       	bld	r7, 7
	s32 tmpInt1 = tmpval;
    1038:	c3 01       	movw	r24, r6
    103a:	b2 01       	movw	r22, r4
    103c:	0e 94 57 09 	call	0x12ae	; 0x12ae <__fixsfsi>
	f32 tmpFrac = tmpval - tmpInt1;
	s32 tmpInt2 = tmpFrac * 10000;
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    1040:	2d b7       	in	r18, 0x3d	; 61
    1042:	3e b7       	in	r19, 0x3e	; 62
    1044:	2e 50       	subi	r18, 0x0E	; 14
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	3e bf       	out	0x3e, r19	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	2d bf       	out	0x3d, r18	; 61
    1052:	ad b6       	in	r10, 0x3d	; 61
    1054:	be b6       	in	r11, 0x3e	; 62
    1056:	08 94       	sec
    1058:	a1 1c       	adc	r10, r1
    105a:	b1 1c       	adc	r11, r1
    105c:	1e 01       	movw	r2, r28
    105e:	08 94       	sec
    1060:	21 1c       	adc	r2, r1
    1062:	31 1c       	adc	r3, r1
    1064:	ed b7       	in	r30, 0x3d	; 61
    1066:	fe b7       	in	r31, 0x3e	; 62
    1068:	32 82       	std	Z+2, r3	; 0x02
    106a:	21 82       	std	Z+1, r2	; 0x01
    106c:	26 e7       	ldi	r18, 0x76	; 118
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	f5 01       	movw	r30, r10
    1072:	33 83       	std	Z+3, r19	; 0x03
    1074:	22 83       	std	Z+2, r18	; 0x02
    1076:	29 89       	ldd	r18, Y+17	; 0x11
    1078:	3a 89       	ldd	r19, Y+18	; 0x12
    107a:	35 83       	std	Z+5, r19	; 0x05
    107c:	24 83       	std	Z+4, r18	; 0x04
    107e:	66 83       	std	Z+6, r22	; 0x06
    1080:	77 83       	std	Z+7, r23	; 0x07
    1082:	80 87       	std	Z+8, r24	; 0x08
    1084:	91 87       	std	Z+9, r25	; 0x09
void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
	f32 tmpFrac = tmpval - tmpInt1;
    1086:	0e 94 8e 09 	call	0x131c	; 0x131c <__floatsisf>
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
    108e:	c3 01       	movw	r24, r6
    1090:	b2 01       	movw	r22, r4
    1092:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__subsf3>
	s32 tmpInt2 = tmpFrac * 10000;
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e4       	ldi	r19, 0x40	; 64
    109a:	4c e1       	ldi	r20, 0x1C	; 28
    109c:	56 e4       	ldi	r21, 0x46	; 70
    109e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__mulsf3>
    10a2:	0e 94 57 09 	call	0x12ae	; 0x12ae <__fixsfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    10aa:	f5 01       	movw	r30, r10
    10ac:	82 87       	std	Z+10, r24	; 0x0a
    10ae:	93 87       	std	Z+11, r25	; 0x0b
    10b0:	a4 87       	std	Z+12, r26	; 0x0c
    10b2:	b5 87       	std	Z+13, r27	; 0x0d
    10b4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
    10b8:	2d b7       	in	r18, 0x3d	; 61
    10ba:	3e b7       	in	r19, 0x3e	; 62
    10bc:	22 5f       	subi	r18, 0xF2	; 242
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	3e bf       	out	0x3e, r19	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	2d bf       	out	0x3d, r18	; 61
    10ca:	81 2f       	mov	r24, r17
    10cc:	6f 2d       	mov	r22, r15
    10ce:	4d 2d       	mov	r20, r13
    10d0:	29 2d       	mov	r18, r9
    10d2:	51 01       	movw	r10, r2
    10d4:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_vsend_string>
    10d8:	62 96       	adiw	r28, 0x12	; 18
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	af 90       	pop	r10
    10f8:	9f 90       	pop	r9
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	3f 90       	pop	r3
    1104:	2f 90       	pop	r2
    1106:	08 95       	ret

00001108 <LED_vintialize>:
 * It is in ECU abstraction layer 
 */

#include "GPIO_MCAL.h"
void LED_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_vsetPIN_DIR>
}
    110e:	08 95       	ret

00001110 <LED_vTurnon>:
void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
}
    1116:	08 95       	ret

00001118 <LED_vTurnoff>:
void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_vwrite_PIN>
}
    111e:	08 95       	ret

00001120 <LED_vtoggle>:
void LED_vtoggle(u8 port, u8 pin){
	GPIO_vtoggle_PIN(port,pin);
    1120:	0e 94 28 02 	call	0x450	; 0x450 <GPIO_vtoggle_PIN>
    1124:	08 95       	ret

00001126 <Seven_Segment_Init>:
#define  Eight_bit 1
#define  High_Nibble 1
#define  LOW_Nibble 0

void Seven_Segment_Init(u8 Mode,u8 port ,u8 Nibble){
	if (0 == Mode){
    1126:	88 23       	and	r24, r24
    1128:	71 f4       	brne	.+28     	; 0x1146 <Seven_Segment_Init+0x20>
		if (0==Nibble){
    112a:	44 23       	and	r20, r20
    112c:	29 f4       	brne	.+10     	; 0x1138 <Seven_Segment_Init+0x12>
			GPIO_Low_Nibble_vset_dir(port,1);
    112e:	86 2f       	mov	r24, r22
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_Low_Nibble_vset_dir>
    1136:	08 95       	ret
		}else if (1==Nibble){
    1138:	41 30       	cpi	r20, 0x01	; 1
    113a:	59 f4       	brne	.+22     	; 0x1152 <Seven_Segment_Init+0x2c>
			GPIO_High_Nibble_vset_dir(port,1);
    113c:	86 2f       	mov	r24, r22
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 a3 03 	call	0x746	; 0x746 <GPIO_High_Nibble_vset_dir>
    1144:	08 95       	ret
		}
		else{
			
		}
	}else if (1==Mode){
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	21 f4       	brne	.+8      	; 0x1152 <Seven_Segment_Init+0x2c>
		GPIO_vset_PORT_DIR(port,0xff);
    114a:	86 2f       	mov	r24, r22
    114c:	6f ef       	ldi	r22, 0xFF	; 255
    114e:	0e 94 12 03 	call	0x624	; 0x624 <GPIO_vset_PORT_DIR>
    1152:	08 95       	ret

00001154 <Seven_segment_Display>:
		
	}
}


void Seven_segment_Display(u8 Mode,u8 Nibble , u8 port, u8 value){
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2a 97       	sbiw	r28, 0x0a	; 10
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
	if (0 == Mode){
    1168:	88 23       	and	r24, r24
    116a:	71 f4       	brne	.+28     	; 0x1188 <Seven_segment_Display+0x34>
		if (0==Nibble){
    116c:	66 23       	and	r22, r22
    116e:	29 f4       	brne	.+10     	; 0x117a <Seven_segment_Display+0x26>
			GPIO_Low_Nibble_vwrite(port,value);
    1170:	84 2f       	mov	r24, r20
    1172:	62 2f       	mov	r22, r18
    1174:	0e 94 32 04 	call	0x864	; 0x864 <GPIO_Low_Nibble_vwrite>
    1178:	2c c0       	rjmp	.+88     	; 0x11d2 <Seven_segment_Display+0x7e>
		}else if (1==Nibble){
    117a:	61 30       	cpi	r22, 0x01	; 1
    117c:	51 f5       	brne	.+84     	; 0x11d2 <Seven_segment_Display+0x7e>
			GPIO_High_Nibble_vwrite(port,value);
    117e:	84 2f       	mov	r24, r20
    1180:	62 2f       	mov	r22, r18
    1182:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GPIO_High_Nibble_vwrite>
    1186:	25 c0       	rjmp	.+74     	; 0x11d2 <Seven_segment_Display+0x7e>
		}
		else{
			
		}
	}else if (1==Mode){
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	19 f5       	brne	.+70     	; 0x11d2 <Seven_segment_Display+0x7e>
		if (value >=0 && value <=9)
    118c:	2a 30       	cpi	r18, 0x0A	; 10
    118e:	88 f4       	brcc	.+34     	; 0x11b2 <Seven_segment_Display+0x5e>
		{
			u8 arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    1190:	de 01       	movw	r26, r28
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	e0 e8       	ldi	r30, 0x80	; 128
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	01 90       	ld	r0, Z+
    119c:	0d 92       	st	X+, r0
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	e1 f7       	brne	.-8      	; 0x119a <Seven_segment_Display+0x46>
			GPIO_vwrite_PORT(port,arr[value]);
    11a2:	fe 01       	movw	r30, r28
    11a4:	e2 0f       	add	r30, r18
    11a6:	f1 1d       	adc	r31, r1
    11a8:	84 2f       	mov	r24, r20
    11aa:	61 81       	ldd	r22, Z+1	; 0x01
    11ac:	0e 94 31 03 	call	0x662	; 0x662 <GPIO_vwrite_PORT>
    11b0:	10 c0       	rjmp	.+32     	; 0x11d2 <Seven_segment_Display+0x7e>
			#define B 1
			#define C 2
			#define D 3
			#define E 4
			#define F 5
			u8 arr1[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
    11b2:	de 01       	movw	r26, r28
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	ea e8       	ldi	r30, 0x8A	; 138
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	86 e0       	ldi	r24, 0x06	; 6
    11bc:	01 90       	ld	r0, Z+
    11be:	0d 92       	st	X+, r0
    11c0:	81 50       	subi	r24, 0x01	; 1
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <Seven_segment_Display+0x68>
			GPIO_vwrite_PORT(port,arr1[value]);
    11c4:	fe 01       	movw	r30, r28
    11c6:	e2 0f       	add	r30, r18
    11c8:	f1 1d       	adc	r31, r1
    11ca:	84 2f       	mov	r24, r20
    11cc:	61 81       	ldd	r22, Z+1	; 0x01
    11ce:	0e 94 31 03 	call	0x662	; 0x662 <GPIO_vwrite_PORT>
		}
	}
	else{
		
	}
    11d2:	2a 96       	adiw	r28, 0x0a	; 10
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <__subsf3>:
    11e4:	50 58       	subi	r21, 0x80	; 128

000011e6 <__addsf3>:
    11e6:	bb 27       	eor	r27, r27
    11e8:	aa 27       	eor	r26, r26
    11ea:	0e d0       	rcall	.+28     	; 0x1208 <__addsf3x>
    11ec:	37 c1       	rjmp	.+622    	; 0x145c <__fp_round>
    11ee:	28 d1       	rcall	.+592    	; 0x1440 <__fp_pscA>
    11f0:	30 f0       	brcs	.+12     	; 0x11fe <__addsf3+0x18>
    11f2:	2d d1       	rcall	.+602    	; 0x144e <__fp_pscB>
    11f4:	20 f0       	brcs	.+8      	; 0x11fe <__addsf3+0x18>
    11f6:	31 f4       	brne	.+12     	; 0x1204 <__addsf3+0x1e>
    11f8:	9f 3f       	cpi	r25, 0xFF	; 255
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__addsf3+0x1a>
    11fc:	1e f4       	brtc	.+6      	; 0x1204 <__addsf3+0x1e>
    11fe:	0d c1       	rjmp	.+538    	; 0x141a <__fp_nan>
    1200:	0e f4       	brtc	.+2      	; 0x1204 <__addsf3+0x1e>
    1202:	e0 95       	com	r30
    1204:	e7 fb       	bst	r30, 7
    1206:	03 c1       	rjmp	.+518    	; 0x140e <__fp_inf>

00001208 <__addsf3x>:
    1208:	e9 2f       	mov	r30, r25
    120a:	39 d1       	rcall	.+626    	; 0x147e <__fp_split3>
    120c:	80 f3       	brcs	.-32     	; 0x11ee <__addsf3+0x8>
    120e:	ba 17       	cp	r27, r26
    1210:	62 07       	cpc	r22, r18
    1212:	73 07       	cpc	r23, r19
    1214:	84 07       	cpc	r24, r20
    1216:	95 07       	cpc	r25, r21
    1218:	18 f0       	brcs	.+6      	; 0x1220 <__addsf3x+0x18>
    121a:	71 f4       	brne	.+28     	; 0x1238 <__addsf3x+0x30>
    121c:	9e f5       	brtc	.+102    	; 0x1284 <__addsf3x+0x7c>
    121e:	51 c1       	rjmp	.+674    	; 0x14c2 <__fp_zero>
    1220:	0e f4       	brtc	.+2      	; 0x1224 <__addsf3x+0x1c>
    1222:	e0 95       	com	r30
    1224:	0b 2e       	mov	r0, r27
    1226:	ba 2f       	mov	r27, r26
    1228:	a0 2d       	mov	r26, r0
    122a:	0b 01       	movw	r0, r22
    122c:	b9 01       	movw	r22, r18
    122e:	90 01       	movw	r18, r0
    1230:	0c 01       	movw	r0, r24
    1232:	ca 01       	movw	r24, r20
    1234:	a0 01       	movw	r20, r0
    1236:	11 24       	eor	r1, r1
    1238:	ff 27       	eor	r31, r31
    123a:	59 1b       	sub	r21, r25
    123c:	99 f0       	breq	.+38     	; 0x1264 <__addsf3x+0x5c>
    123e:	59 3f       	cpi	r21, 0xF9	; 249
    1240:	50 f4       	brcc	.+20     	; 0x1256 <__addsf3x+0x4e>
    1242:	50 3e       	cpi	r21, 0xE0	; 224
    1244:	68 f1       	brcs	.+90     	; 0x12a0 <__addsf3x+0x98>
    1246:	1a 16       	cp	r1, r26
    1248:	f0 40       	sbci	r31, 0x00	; 0
    124a:	a2 2f       	mov	r26, r18
    124c:	23 2f       	mov	r18, r19
    124e:	34 2f       	mov	r19, r20
    1250:	44 27       	eor	r20, r20
    1252:	58 5f       	subi	r21, 0xF8	; 248
    1254:	f3 cf       	rjmp	.-26     	; 0x123c <__addsf3x+0x34>
    1256:	46 95       	lsr	r20
    1258:	37 95       	ror	r19
    125a:	27 95       	ror	r18
    125c:	a7 95       	ror	r26
    125e:	f0 40       	sbci	r31, 0x00	; 0
    1260:	53 95       	inc	r21
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__addsf3x+0x4e>
    1264:	7e f4       	brtc	.+30     	; 0x1284 <__addsf3x+0x7c>
    1266:	1f 16       	cp	r1, r31
    1268:	ba 0b       	sbc	r27, r26
    126a:	62 0b       	sbc	r22, r18
    126c:	73 0b       	sbc	r23, r19
    126e:	84 0b       	sbc	r24, r20
    1270:	ba f0       	brmi	.+46     	; 0x12a0 <__addsf3x+0x98>
    1272:	91 50       	subi	r25, 0x01	; 1
    1274:	a1 f0       	breq	.+40     	; 0x129e <__addsf3x+0x96>
    1276:	ff 0f       	add	r31, r31
    1278:	bb 1f       	adc	r27, r27
    127a:	66 1f       	adc	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	c2 f7       	brpl	.-16     	; 0x1272 <__addsf3x+0x6a>
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <__addsf3x+0x98>
    1284:	ba 0f       	add	r27, r26
    1286:	62 1f       	adc	r22, r18
    1288:	73 1f       	adc	r23, r19
    128a:	84 1f       	adc	r24, r20
    128c:	48 f4       	brcc	.+18     	; 0x12a0 <__addsf3x+0x98>
    128e:	87 95       	ror	r24
    1290:	77 95       	ror	r23
    1292:	67 95       	ror	r22
    1294:	b7 95       	ror	r27
    1296:	f7 95       	ror	r31
    1298:	9e 3f       	cpi	r25, 0xFE	; 254
    129a:	08 f0       	brcs	.+2      	; 0x129e <__addsf3x+0x96>
    129c:	b3 cf       	rjmp	.-154    	; 0x1204 <__addsf3+0x1e>
    129e:	93 95       	inc	r25
    12a0:	88 0f       	add	r24, r24
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <__addsf3x+0x9e>
    12a4:	99 27       	eor	r25, r25
    12a6:	ee 0f       	add	r30, r30
    12a8:	97 95       	ror	r25
    12aa:	87 95       	ror	r24
    12ac:	08 95       	ret

000012ae <__fixsfsi>:
    12ae:	04 d0       	rcall	.+8      	; 0x12b8 <__fixunssfsi>
    12b0:	68 94       	set
    12b2:	b1 11       	cpse	r27, r1
    12b4:	07 c1       	rjmp	.+526    	; 0x14c4 <__fp_szero>
    12b6:	08 95       	ret

000012b8 <__fixunssfsi>:
    12b8:	ea d0       	rcall	.+468    	; 0x148e <__fp_splitA>
    12ba:	88 f0       	brcs	.+34     	; 0x12de <__fixunssfsi+0x26>
    12bc:	9f 57       	subi	r25, 0x7F	; 127
    12be:	90 f0       	brcs	.+36     	; 0x12e4 <__fixunssfsi+0x2c>
    12c0:	b9 2f       	mov	r27, r25
    12c2:	99 27       	eor	r25, r25
    12c4:	b7 51       	subi	r27, 0x17	; 23
    12c6:	a0 f0       	brcs	.+40     	; 0x12f0 <__fixunssfsi+0x38>
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <__fixunssfsi+0x46>
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	1a f0       	brmi	.+6      	; 0x12da <__fixunssfsi+0x22>
    12d4:	ba 95       	dec	r27
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__fixunssfsi+0x12>
    12d8:	12 c0       	rjmp	.+36     	; 0x12fe <__fixunssfsi+0x46>
    12da:	b1 30       	cpi	r27, 0x01	; 1
    12dc:	81 f0       	breq	.+32     	; 0x12fe <__fixunssfsi+0x46>
    12de:	f1 d0       	rcall	.+482    	; 0x14c2 <__fp_zero>
    12e0:	b1 e0       	ldi	r27, 0x01	; 1
    12e2:	08 95       	ret
    12e4:	ee c0       	rjmp	.+476    	; 0x14c2 <__fp_zero>
    12e6:	67 2f       	mov	r22, r23
    12e8:	78 2f       	mov	r23, r24
    12ea:	88 27       	eor	r24, r24
    12ec:	b8 5f       	subi	r27, 0xF8	; 248
    12ee:	39 f0       	breq	.+14     	; 0x12fe <__fixunssfsi+0x46>
    12f0:	b9 3f       	cpi	r27, 0xF9	; 249
    12f2:	cc f3       	brlt	.-14     	; 0x12e6 <__fixunssfsi+0x2e>
    12f4:	86 95       	lsr	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b3 95       	inc	r27
    12fc:	d9 f7       	brne	.-10     	; 0x12f4 <__fixunssfsi+0x3c>
    12fe:	3e f4       	brtc	.+14     	; 0x130e <__fixunssfsi+0x56>
    1300:	90 95       	com	r25
    1302:	80 95       	com	r24
    1304:	70 95       	com	r23
    1306:	61 95       	neg	r22
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	08 95       	ret

00001310 <__floatdisf>:
    1310:	97 fb       	bst	r25, 7
    1312:	0e f4       	brtc	.+2      	; 0x1316 <__floatdisf+0x6>
    1314:	85 d0       	rcall	.+266    	; 0x1420 <__fp_negdi>
    1316:	3e c0       	rjmp	.+124    	; 0x1394 <__fp_di2sf>

00001318 <__floatunsisf>:
    1318:	e8 94       	clt
    131a:	09 c0       	rjmp	.+18     	; 0x132e <__floatsisf+0x12>

0000131c <__floatsisf>:
    131c:	97 fb       	bst	r25, 7
    131e:	3e f4       	brtc	.+14     	; 0x132e <__floatsisf+0x12>
    1320:	90 95       	com	r25
    1322:	80 95       	com	r24
    1324:	70 95       	com	r23
    1326:	61 95       	neg	r22
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	99 23       	and	r25, r25
    1330:	a9 f0       	breq	.+42     	; 0x135c <__floatsisf+0x40>
    1332:	f9 2f       	mov	r31, r25
    1334:	96 e9       	ldi	r25, 0x96	; 150
    1336:	bb 27       	eor	r27, r27
    1338:	93 95       	inc	r25
    133a:	f6 95       	lsr	r31
    133c:	87 95       	ror	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	b7 95       	ror	r27
    1344:	f1 11       	cpse	r31, r1
    1346:	f8 cf       	rjmp	.-16     	; 0x1338 <__floatsisf+0x1c>
    1348:	fa f4       	brpl	.+62     	; 0x1388 <__floatsisf+0x6c>
    134a:	bb 0f       	add	r27, r27
    134c:	11 f4       	brne	.+4      	; 0x1352 <__floatsisf+0x36>
    134e:	60 ff       	sbrs	r22, 0
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <__floatsisf+0x6c>
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	16 c0       	rjmp	.+44     	; 0x1388 <__floatsisf+0x6c>
    135c:	88 23       	and	r24, r24
    135e:	11 f0       	breq	.+4      	; 0x1364 <__floatsisf+0x48>
    1360:	96 e9       	ldi	r25, 0x96	; 150
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <__floatsisf+0x6a>
    1364:	77 23       	and	r23, r23
    1366:	21 f0       	breq	.+8      	; 0x1370 <__floatsisf+0x54>
    1368:	9e e8       	ldi	r25, 0x8E	; 142
    136a:	87 2f       	mov	r24, r23
    136c:	76 2f       	mov	r23, r22
    136e:	05 c0       	rjmp	.+10     	; 0x137a <__floatsisf+0x5e>
    1370:	66 23       	and	r22, r22
    1372:	71 f0       	breq	.+28     	; 0x1390 <__floatsisf+0x74>
    1374:	96 e8       	ldi	r25, 0x86	; 134
    1376:	86 2f       	mov	r24, r22
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	2a f0       	brmi	.+10     	; 0x1388 <__floatsisf+0x6c>
    137e:	9a 95       	dec	r25
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	da f7       	brpl	.-10     	; 0x137e <__floatsisf+0x62>
    1388:	88 0f       	add	r24, r24
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <__floatundisf>:
    1392:	e8 94       	clt

00001394 <__fp_di2sf>:
    1394:	f9 2f       	mov	r31, r25
    1396:	96 eb       	ldi	r25, 0xB6	; 182
    1398:	ff 23       	and	r31, r31
    139a:	81 f0       	breq	.+32     	; 0x13bc <__fp_di2sf+0x28>
    139c:	12 16       	cp	r1, r18
    139e:	13 06       	cpc	r1, r19
    13a0:	14 06       	cpc	r1, r20
    13a2:	44 0b       	sbc	r20, r20
    13a4:	93 95       	inc	r25
    13a6:	f6 95       	lsr	r31
    13a8:	87 95       	ror	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	57 95       	ror	r21
    13b0:	40 40       	sbci	r20, 0x00	; 0
    13b2:	ff 23       	and	r31, r31
    13b4:	b9 f7       	brne	.-18     	; 0x13a4 <__fp_di2sf+0x10>
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <__fp_di2sf+0x5a>
    13b8:	99 27       	eor	r25, r25
    13ba:	08 95       	ret
    13bc:	88 23       	and	r24, r24
    13be:	51 f4       	brne	.+20     	; 0x13d4 <__fp_di2sf+0x40>
    13c0:	98 50       	subi	r25, 0x08	; 8
    13c2:	d2 f7       	brpl	.-12     	; 0x13b8 <__fp_di2sf+0x24>
    13c4:	87 2b       	or	r24, r23
    13c6:	76 2f       	mov	r23, r22
    13c8:	65 2f       	mov	r22, r21
    13ca:	54 2f       	mov	r21, r20
    13cc:	43 2f       	mov	r20, r19
    13ce:	32 2f       	mov	r19, r18
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	b1 f3       	breq	.-20     	; 0x13c0 <__fp_di2sf+0x2c>
    13d4:	12 16       	cp	r1, r18
    13d6:	13 06       	cpc	r1, r19
    13d8:	14 06       	cpc	r1, r20
    13da:	44 0b       	sbc	r20, r20
    13dc:	88 23       	and	r24, r24
    13de:	3a f0       	brmi	.+14     	; 0x13ee <__fp_di2sf+0x5a>
    13e0:	9a 95       	dec	r25
    13e2:	44 0f       	add	r20, r20
    13e4:	55 1f       	adc	r21, r21
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	ca f7       	brpl	.-14     	; 0x13e0 <__fp_di2sf+0x4c>
    13ee:	55 23       	and	r21, r21
    13f0:	4a f4       	brpl	.+18     	; 0x1404 <__fp_di2sf+0x70>
    13f2:	44 0f       	add	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	11 f4       	brne	.+4      	; 0x13fc <__fp_di2sf+0x68>
    13f8:	60 ff       	sbrs	r22, 0
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <__fp_di2sf+0x70>
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	88 0f       	add	r24, r24
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret

0000140e <__fp_inf>:
    140e:	97 f9       	bld	r25, 7
    1410:	9f 67       	ori	r25, 0x7F	; 127
    1412:	80 e8       	ldi	r24, 0x80	; 128
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	08 95       	ret

0000141a <__fp_nan>:
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	80 ec       	ldi	r24, 0xC0	; 192
    141e:	08 95       	ret

00001420 <__fp_negdi>:
    1420:	90 95       	com	r25
    1422:	80 95       	com	r24
    1424:	70 95       	com	r23
    1426:	60 95       	com	r22
    1428:	50 95       	com	r21
    142a:	40 95       	com	r20
    142c:	30 95       	com	r19
    142e:	21 95       	neg	r18
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	4f 4f       	sbci	r20, 0xFF	; 255
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	6f 4f       	sbci	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__fp_pscA>:
    1440:	00 24       	eor	r0, r0
    1442:	0a 94       	dec	r0
    1444:	16 16       	cp	r1, r22
    1446:	17 06       	cpc	r1, r23
    1448:	18 06       	cpc	r1, r24
    144a:	09 06       	cpc	r0, r25
    144c:	08 95       	ret

0000144e <__fp_pscB>:
    144e:	00 24       	eor	r0, r0
    1450:	0a 94       	dec	r0
    1452:	12 16       	cp	r1, r18
    1454:	13 06       	cpc	r1, r19
    1456:	14 06       	cpc	r1, r20
    1458:	05 06       	cpc	r0, r21
    145a:	08 95       	ret

0000145c <__fp_round>:
    145c:	09 2e       	mov	r0, r25
    145e:	03 94       	inc	r0
    1460:	00 0c       	add	r0, r0
    1462:	11 f4       	brne	.+4      	; 0x1468 <__fp_round+0xc>
    1464:	88 23       	and	r24, r24
    1466:	52 f0       	brmi	.+20     	; 0x147c <__fp_round+0x20>
    1468:	bb 0f       	add	r27, r27
    146a:	40 f4       	brcc	.+16     	; 0x147c <__fp_round+0x20>
    146c:	bf 2b       	or	r27, r31
    146e:	11 f4       	brne	.+4      	; 0x1474 <__fp_round+0x18>
    1470:	60 ff       	sbrs	r22, 0
    1472:	04 c0       	rjmp	.+8      	; 0x147c <__fp_round+0x20>
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	08 95       	ret

0000147e <__fp_split3>:
    147e:	57 fd       	sbrc	r21, 7
    1480:	90 58       	subi	r25, 0x80	; 128
    1482:	44 0f       	add	r20, r20
    1484:	55 1f       	adc	r21, r21
    1486:	59 f0       	breq	.+22     	; 0x149e <__fp_splitA+0x10>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	71 f0       	breq	.+28     	; 0x14a8 <__fp_splitA+0x1a>
    148c:	47 95       	ror	r20

0000148e <__fp_splitA>:
    148e:	88 0f       	add	r24, r24
    1490:	97 fb       	bst	r25, 7
    1492:	99 1f       	adc	r25, r25
    1494:	61 f0       	breq	.+24     	; 0x14ae <__fp_splitA+0x20>
    1496:	9f 3f       	cpi	r25, 0xFF	; 255
    1498:	79 f0       	breq	.+30     	; 0x14b8 <__fp_splitA+0x2a>
    149a:	87 95       	ror	r24
    149c:	08 95       	ret
    149e:	12 16       	cp	r1, r18
    14a0:	13 06       	cpc	r1, r19
    14a2:	14 06       	cpc	r1, r20
    14a4:	55 1f       	adc	r21, r21
    14a6:	f2 cf       	rjmp	.-28     	; 0x148c <__fp_split3+0xe>
    14a8:	46 95       	lsr	r20
    14aa:	f1 df       	rcall	.-30     	; 0x148e <__fp_splitA>
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <__fp_splitA+0x30>
    14ae:	16 16       	cp	r1, r22
    14b0:	17 06       	cpc	r1, r23
    14b2:	18 06       	cpc	r1, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	f1 cf       	rjmp	.-30     	; 0x149a <__fp_splitA+0xc>
    14b8:	86 95       	lsr	r24
    14ba:	71 05       	cpc	r23, r1
    14bc:	61 05       	cpc	r22, r1
    14be:	08 94       	sec
    14c0:	08 95       	ret

000014c2 <__fp_zero>:
    14c2:	e8 94       	clt

000014c4 <__fp_szero>:
    14c4:	bb 27       	eor	r27, r27
    14c6:	66 27       	eor	r22, r22
    14c8:	77 27       	eor	r23, r23
    14ca:	cb 01       	movw	r24, r22
    14cc:	97 f9       	bld	r25, 7
    14ce:	08 95       	ret

000014d0 <__mulsf3>:
    14d0:	0b d0       	rcall	.+22     	; 0x14e8 <__mulsf3x>
    14d2:	c4 cf       	rjmp	.-120    	; 0x145c <__fp_round>
    14d4:	b5 df       	rcall	.-150    	; 0x1440 <__fp_pscA>
    14d6:	28 f0       	brcs	.+10     	; 0x14e2 <__mulsf3+0x12>
    14d8:	ba df       	rcall	.-140    	; 0x144e <__fp_pscB>
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <__mulsf3+0x12>
    14dc:	95 23       	and	r25, r21
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__mulsf3+0x12>
    14e0:	96 cf       	rjmp	.-212    	; 0x140e <__fp_inf>
    14e2:	9b cf       	rjmp	.-202    	; 0x141a <__fp_nan>
    14e4:	11 24       	eor	r1, r1
    14e6:	ee cf       	rjmp	.-36     	; 0x14c4 <__fp_szero>

000014e8 <__mulsf3x>:
    14e8:	ca df       	rcall	.-108    	; 0x147e <__fp_split3>
    14ea:	a0 f3       	brcs	.-24     	; 0x14d4 <__mulsf3+0x4>

000014ec <__mulsf3_pse>:
    14ec:	95 9f       	mul	r25, r21
    14ee:	d1 f3       	breq	.-12     	; 0x14e4 <__mulsf3+0x14>
    14f0:	95 0f       	add	r25, r21
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	55 1f       	adc	r21, r21
    14f6:	62 9f       	mul	r22, r18
    14f8:	f0 01       	movw	r30, r0
    14fa:	72 9f       	mul	r23, r18
    14fc:	bb 27       	eor	r27, r27
    14fe:	f0 0d       	add	r31, r0
    1500:	b1 1d       	adc	r27, r1
    1502:	63 9f       	mul	r22, r19
    1504:	aa 27       	eor	r26, r26
    1506:	f0 0d       	add	r31, r0
    1508:	b1 1d       	adc	r27, r1
    150a:	aa 1f       	adc	r26, r26
    150c:	64 9f       	mul	r22, r20
    150e:	66 27       	eor	r22, r22
    1510:	b0 0d       	add	r27, r0
    1512:	a1 1d       	adc	r26, r1
    1514:	66 1f       	adc	r22, r22
    1516:	82 9f       	mul	r24, r18
    1518:	22 27       	eor	r18, r18
    151a:	b0 0d       	add	r27, r0
    151c:	a1 1d       	adc	r26, r1
    151e:	62 1f       	adc	r22, r18
    1520:	73 9f       	mul	r23, r19
    1522:	b0 0d       	add	r27, r0
    1524:	a1 1d       	adc	r26, r1
    1526:	62 1f       	adc	r22, r18
    1528:	83 9f       	mul	r24, r19
    152a:	a0 0d       	add	r26, r0
    152c:	61 1d       	adc	r22, r1
    152e:	22 1f       	adc	r18, r18
    1530:	74 9f       	mul	r23, r20
    1532:	33 27       	eor	r19, r19
    1534:	a0 0d       	add	r26, r0
    1536:	61 1d       	adc	r22, r1
    1538:	23 1f       	adc	r18, r19
    153a:	84 9f       	mul	r24, r20
    153c:	60 0d       	add	r22, r0
    153e:	21 1d       	adc	r18, r1
    1540:	82 2f       	mov	r24, r18
    1542:	76 2f       	mov	r23, r22
    1544:	6a 2f       	mov	r22, r26
    1546:	11 24       	eor	r1, r1
    1548:	9f 57       	subi	r25, 0x7F	; 127
    154a:	50 40       	sbci	r21, 0x00	; 0
    154c:	8a f0       	brmi	.+34     	; 0x1570 <__mulsf3_pse+0x84>
    154e:	e1 f0       	breq	.+56     	; 0x1588 <__mulsf3_pse+0x9c>
    1550:	88 23       	and	r24, r24
    1552:	4a f0       	brmi	.+18     	; 0x1566 <__mulsf3_pse+0x7a>
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	bb 1f       	adc	r27, r27
    155a:	66 1f       	adc	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	91 50       	subi	r25, 0x01	; 1
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	a9 f7       	brne	.-22     	; 0x1550 <__mulsf3_pse+0x64>
    1566:	9e 3f       	cpi	r25, 0xFE	; 254
    1568:	51 05       	cpc	r21, r1
    156a:	70 f0       	brcs	.+28     	; 0x1588 <__mulsf3_pse+0x9c>
    156c:	50 cf       	rjmp	.-352    	; 0x140e <__fp_inf>
    156e:	aa cf       	rjmp	.-172    	; 0x14c4 <__fp_szero>
    1570:	5f 3f       	cpi	r21, 0xFF	; 255
    1572:	ec f3       	brlt	.-6      	; 0x156e <__mulsf3_pse+0x82>
    1574:	98 3e       	cpi	r25, 0xE8	; 232
    1576:	dc f3       	brlt	.-10     	; 0x156e <__mulsf3_pse+0x82>
    1578:	86 95       	lsr	r24
    157a:	77 95       	ror	r23
    157c:	67 95       	ror	r22
    157e:	b7 95       	ror	r27
    1580:	f7 95       	ror	r31
    1582:	e7 95       	ror	r30
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	c1 f7       	brne	.-16     	; 0x1578 <__mulsf3_pse+0x8c>
    1588:	fe 2b       	or	r31, r30
    158a:	88 0f       	add	r24, r24
    158c:	91 1d       	adc	r25, r1
    158e:	96 95       	lsr	r25
    1590:	87 95       	ror	r24
    1592:	97 f9       	bld	r25, 7
    1594:	08 95       	ret

00001596 <sprintf>:
    1596:	ae e0       	ldi	r26, 0x0E	; 14
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 ed       	ldi	r30, 0xD1	; 209
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__prologue_saves__+0x1c>
    15a2:	0d 89       	ldd	r16, Y+21	; 0x15
    15a4:	1e 89       	ldd	r17, Y+22	; 0x16
    15a6:	86 e0       	ldi	r24, 0x06	; 6
    15a8:	8c 83       	std	Y+4, r24	; 0x04
    15aa:	1a 83       	std	Y+2, r17	; 0x02
    15ac:	09 83       	std	Y+1, r16	; 0x01
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	9f e7       	ldi	r25, 0x7F	; 127
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	ae 01       	movw	r20, r28
    15b8:	47 5e       	subi	r20, 0xE7	; 231
    15ba:	5f 4f       	sbci	r21, 0xFF	; 255
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	6f 89       	ldd	r22, Y+23	; 0x17
    15c2:	78 8d       	ldd	r23, Y+24	; 0x18
    15c4:	0e 94 ed 0a 	call	0x15da	; 0x15da <vfprintf>
    15c8:	ef 81       	ldd	r30, Y+7	; 0x07
    15ca:	f8 85       	ldd	r31, Y+8	; 0x08
    15cc:	e0 0f       	add	r30, r16
    15ce:	f1 1f       	adc	r31, r17
    15d0:	10 82       	st	Z, r1
    15d2:	2e 96       	adiw	r28, 0x0e	; 14
    15d4:	e4 e0       	ldi	r30, 0x04	; 4
    15d6:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__epilogue_restores__+0x1c>

000015da <vfprintf>:
    15da:	ad e0       	ldi	r26, 0x0D	; 13
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e3 ef       	ldi	r30, 0xF3	; 243
    15e0:	fa e0       	ldi	r31, 0x0A	; 10
    15e2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__prologue_saves__>
    15e6:	3c 01       	movw	r6, r24
    15e8:	7d 87       	std	Y+13, r23	; 0x0d
    15ea:	6c 87       	std	Y+12, r22	; 0x0c
    15ec:	5a 01       	movw	r10, r20
    15ee:	fc 01       	movw	r30, r24
    15f0:	17 82       	std	Z+7, r1	; 0x07
    15f2:	16 82       	std	Z+6, r1	; 0x06
    15f4:	83 81       	ldd	r24, Z+3	; 0x03
    15f6:	81 ff       	sbrs	r24, 1
    15f8:	c8 c1       	rjmp	.+912    	; 0x198a <vfprintf+0x3b0>
    15fa:	2e 01       	movw	r4, r28
    15fc:	08 94       	sec
    15fe:	41 1c       	adc	r4, r1
    1600:	51 1c       	adc	r5, r1
    1602:	f3 01       	movw	r30, r6
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	ec 85       	ldd	r30, Y+12	; 0x0c
    1608:	fd 85       	ldd	r31, Y+13	; 0x0d
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	fd 87       	std	Y+13, r31	; 0x0d
    1614:	ec 87       	std	Y+12, r30	; 0x0c
    1616:	88 23       	and	r24, r24
    1618:	09 f4       	brne	.+2      	; 0x161c <vfprintf+0x42>
    161a:	b3 c1       	rjmp	.+870    	; 0x1982 <vfprintf+0x3a8>
    161c:	85 32       	cpi	r24, 0x25	; 37
    161e:	41 f4       	brne	.+16     	; 0x1630 <vfprintf+0x56>
    1620:	93 fd       	sbrc	r25, 3
    1622:	85 91       	lpm	r24, Z+
    1624:	93 ff       	sbrs	r25, 3
    1626:	81 91       	ld	r24, Z+
    1628:	fd 87       	std	Y+13, r31	; 0x0d
    162a:	ec 87       	std	Y+12, r30	; 0x0c
    162c:	85 32       	cpi	r24, 0x25	; 37
    162e:	29 f4       	brne	.+10     	; 0x163a <vfprintf+0x60>
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	b3 01       	movw	r22, r6
    1634:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    1638:	e4 cf       	rjmp	.-56     	; 0x1602 <vfprintf+0x28>
    163a:	ff 24       	eor	r15, r15
    163c:	ee 24       	eor	r14, r14
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	10 32       	cpi	r17, 0x20	; 32
    1642:	b0 f4       	brcc	.+44     	; 0x1670 <vfprintf+0x96>
    1644:	8b 32       	cpi	r24, 0x2B	; 43
    1646:	69 f0       	breq	.+26     	; 0x1662 <vfprintf+0x88>
    1648:	8c 32       	cpi	r24, 0x2C	; 44
    164a:	28 f4       	brcc	.+10     	; 0x1656 <vfprintf+0x7c>
    164c:	80 32       	cpi	r24, 0x20	; 32
    164e:	51 f0       	breq	.+20     	; 0x1664 <vfprintf+0x8a>
    1650:	83 32       	cpi	r24, 0x23	; 35
    1652:	71 f4       	brne	.+28     	; 0x1670 <vfprintf+0x96>
    1654:	0b c0       	rjmp	.+22     	; 0x166c <vfprintf+0x92>
    1656:	8d 32       	cpi	r24, 0x2D	; 45
    1658:	39 f0       	breq	.+14     	; 0x1668 <vfprintf+0x8e>
    165a:	80 33       	cpi	r24, 0x30	; 48
    165c:	49 f4       	brne	.+18     	; 0x1670 <vfprintf+0x96>
    165e:	11 60       	ori	r17, 0x01	; 1
    1660:	2c c0       	rjmp	.+88     	; 0x16ba <vfprintf+0xe0>
    1662:	12 60       	ori	r17, 0x02	; 2
    1664:	14 60       	ori	r17, 0x04	; 4
    1666:	29 c0       	rjmp	.+82     	; 0x16ba <vfprintf+0xe0>
    1668:	18 60       	ori	r17, 0x08	; 8
    166a:	27 c0       	rjmp	.+78     	; 0x16ba <vfprintf+0xe0>
    166c:	10 61       	ori	r17, 0x10	; 16
    166e:	25 c0       	rjmp	.+74     	; 0x16ba <vfprintf+0xe0>
    1670:	17 fd       	sbrc	r17, 7
    1672:	2e c0       	rjmp	.+92     	; 0x16d0 <vfprintf+0xf6>
    1674:	28 2f       	mov	r18, r24
    1676:	20 53       	subi	r18, 0x30	; 48
    1678:	2a 30       	cpi	r18, 0x0A	; 10
    167a:	98 f4       	brcc	.+38     	; 0x16a2 <vfprintf+0xc8>
    167c:	16 ff       	sbrs	r17, 6
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <vfprintf+0xb6>
    1680:	8f 2d       	mov	r24, r15
    1682:	88 0f       	add	r24, r24
    1684:	f8 2e       	mov	r15, r24
    1686:	ff 0c       	add	r15, r15
    1688:	ff 0c       	add	r15, r15
    168a:	f8 0e       	add	r15, r24
    168c:	f2 0e       	add	r15, r18
    168e:	15 c0       	rjmp	.+42     	; 0x16ba <vfprintf+0xe0>
    1690:	8e 2d       	mov	r24, r14
    1692:	88 0f       	add	r24, r24
    1694:	e8 2e       	mov	r14, r24
    1696:	ee 0c       	add	r14, r14
    1698:	ee 0c       	add	r14, r14
    169a:	e8 0e       	add	r14, r24
    169c:	e2 0e       	add	r14, r18
    169e:	10 62       	ori	r17, 0x20	; 32
    16a0:	0c c0       	rjmp	.+24     	; 0x16ba <vfprintf+0xe0>
    16a2:	8e 32       	cpi	r24, 0x2E	; 46
    16a4:	21 f4       	brne	.+8      	; 0x16ae <vfprintf+0xd4>
    16a6:	16 fd       	sbrc	r17, 6
    16a8:	6c c1       	rjmp	.+728    	; 0x1982 <vfprintf+0x3a8>
    16aa:	10 64       	ori	r17, 0x40	; 64
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0xe0>
    16ae:	8c 36       	cpi	r24, 0x6C	; 108
    16b0:	11 f4       	brne	.+4      	; 0x16b6 <vfprintf+0xdc>
    16b2:	10 68       	ori	r17, 0x80	; 128
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0xe0>
    16b6:	88 36       	cpi	r24, 0x68	; 104
    16b8:	59 f4       	brne	.+22     	; 0x16d0 <vfprintf+0xf6>
    16ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    16bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    16be:	93 fd       	sbrc	r25, 3
    16c0:	85 91       	lpm	r24, Z+
    16c2:	93 ff       	sbrs	r25, 3
    16c4:	81 91       	ld	r24, Z+
    16c6:	fd 87       	std	Y+13, r31	; 0x0d
    16c8:	ec 87       	std	Y+12, r30	; 0x0c
    16ca:	88 23       	and	r24, r24
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <vfprintf+0xf6>
    16ce:	b8 cf       	rjmp	.-144    	; 0x1640 <vfprintf+0x66>
    16d0:	98 2f       	mov	r25, r24
    16d2:	95 54       	subi	r25, 0x45	; 69
    16d4:	93 30       	cpi	r25, 0x03	; 3
    16d6:	18 f0       	brcs	.+6      	; 0x16de <vfprintf+0x104>
    16d8:	90 52       	subi	r25, 0x20	; 32
    16da:	93 30       	cpi	r25, 0x03	; 3
    16dc:	38 f4       	brcc	.+14     	; 0x16ec <vfprintf+0x112>
    16de:	24 e0       	ldi	r18, 0x04	; 4
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	a2 0e       	add	r10, r18
    16e4:	b3 1e       	adc	r11, r19
    16e6:	3f e3       	ldi	r19, 0x3F	; 63
    16e8:	39 83       	std	Y+1, r19	; 0x01
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <vfprintf+0x130>
    16ec:	83 36       	cpi	r24, 0x63	; 99
    16ee:	31 f0       	breq	.+12     	; 0x16fc <vfprintf+0x122>
    16f0:	83 37       	cpi	r24, 0x73	; 115
    16f2:	81 f0       	breq	.+32     	; 0x1714 <vfprintf+0x13a>
    16f4:	83 35       	cpi	r24, 0x53	; 83
    16f6:	09 f0       	breq	.+2      	; 0x16fa <vfprintf+0x120>
    16f8:	5a c0       	rjmp	.+180    	; 0x17ae <vfprintf+0x1d4>
    16fa:	22 c0       	rjmp	.+68     	; 0x1740 <vfprintf+0x166>
    16fc:	f5 01       	movw	r30, r10
    16fe:	80 81       	ld	r24, Z
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	22 e0       	ldi	r18, 0x02	; 2
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	a2 0e       	add	r10, r18
    1708:	b3 1e       	adc	r11, r19
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	c2 2e       	mov	r12, r18
    170e:	d1 2c       	mov	r13, r1
    1710:	42 01       	movw	r8, r4
    1712:	14 c0       	rjmp	.+40     	; 0x173c <vfprintf+0x162>
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	29 2e       	mov	r2, r25
    1718:	31 2c       	mov	r3, r1
    171a:	2a 0c       	add	r2, r10
    171c:	3b 1c       	adc	r3, r11
    171e:	f5 01       	movw	r30, r10
    1720:	80 80       	ld	r8, Z
    1722:	91 80       	ldd	r9, Z+1	; 0x01
    1724:	16 ff       	sbrs	r17, 6
    1726:	03 c0       	rjmp	.+6      	; 0x172e <vfprintf+0x154>
    1728:	6f 2d       	mov	r22, r15
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0x158>
    172e:	6f ef       	ldi	r22, 0xFF	; 255
    1730:	7f ef       	ldi	r23, 0xFF	; 255
    1732:	c4 01       	movw	r24, r8
    1734:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strnlen>
    1738:	6c 01       	movw	r12, r24
    173a:	51 01       	movw	r10, r2
    173c:	1f 77       	andi	r17, 0x7F	; 127
    173e:	15 c0       	rjmp	.+42     	; 0x176a <vfprintf+0x190>
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	28 2e       	mov	r2, r24
    1744:	31 2c       	mov	r3, r1
    1746:	2a 0c       	add	r2, r10
    1748:	3b 1c       	adc	r3, r11
    174a:	f5 01       	movw	r30, r10
    174c:	80 80       	ld	r8, Z
    174e:	91 80       	ldd	r9, Z+1	; 0x01
    1750:	16 ff       	sbrs	r17, 6
    1752:	03 c0       	rjmp	.+6      	; 0x175a <vfprintf+0x180>
    1754:	6f 2d       	mov	r22, r15
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <vfprintf+0x184>
    175a:	6f ef       	ldi	r22, 0xFF	; 255
    175c:	7f ef       	ldi	r23, 0xFF	; 255
    175e:	c4 01       	movw	r24, r8
    1760:	0e 94 cb 0c 	call	0x1996	; 0x1996 <strnlen_P>
    1764:	6c 01       	movw	r12, r24
    1766:	10 68       	ori	r17, 0x80	; 128
    1768:	51 01       	movw	r10, r2
    176a:	13 fd       	sbrc	r17, 3
    176c:	1c c0       	rjmp	.+56     	; 0x17a6 <vfprintf+0x1cc>
    176e:	06 c0       	rjmp	.+12     	; 0x177c <vfprintf+0x1a2>
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	b3 01       	movw	r22, r6
    1776:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    177a:	ea 94       	dec	r14
    177c:	8e 2d       	mov	r24, r14
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	c8 16       	cp	r12, r24
    1782:	d9 06       	cpc	r13, r25
    1784:	a8 f3       	brcs	.-22     	; 0x1770 <vfprintf+0x196>
    1786:	0f c0       	rjmp	.+30     	; 0x17a6 <vfprintf+0x1cc>
    1788:	f4 01       	movw	r30, r8
    178a:	17 fd       	sbrc	r17, 7
    178c:	85 91       	lpm	r24, Z+
    178e:	17 ff       	sbrs	r17, 7
    1790:	81 91       	ld	r24, Z+
    1792:	4f 01       	movw	r8, r30
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	b3 01       	movw	r22, r6
    1798:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    179c:	e1 10       	cpse	r14, r1
    179e:	ea 94       	dec	r14
    17a0:	08 94       	sec
    17a2:	c1 08       	sbc	r12, r1
    17a4:	d1 08       	sbc	r13, r1
    17a6:	c1 14       	cp	r12, r1
    17a8:	d1 04       	cpc	r13, r1
    17aa:	71 f7       	brne	.-36     	; 0x1788 <vfprintf+0x1ae>
    17ac:	e7 c0       	rjmp	.+462    	; 0x197c <vfprintf+0x3a2>
    17ae:	84 36       	cpi	r24, 0x64	; 100
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <vfprintf+0x1dc>
    17b2:	89 36       	cpi	r24, 0x69	; 105
    17b4:	51 f5       	brne	.+84     	; 0x180a <vfprintf+0x230>
    17b6:	f5 01       	movw	r30, r10
    17b8:	17 ff       	sbrs	r17, 7
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <vfprintf+0x1f0>
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	a2 81       	ldd	r26, Z+2	; 0x02
    17c2:	b3 81       	ldd	r27, Z+3	; 0x03
    17c4:	24 e0       	ldi	r18, 0x04	; 4
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <vfprintf+0x200>
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	aa 27       	eor	r26, r26
    17d0:	97 fd       	sbrc	r25, 7
    17d2:	a0 95       	com	r26
    17d4:	ba 2f       	mov	r27, r26
    17d6:	22 e0       	ldi	r18, 0x02	; 2
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	a2 0e       	add	r10, r18
    17dc:	b3 1e       	adc	r11, r19
    17de:	01 2f       	mov	r16, r17
    17e0:	0f 76       	andi	r16, 0x6F	; 111
    17e2:	b7 ff       	sbrs	r27, 7
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x21c>
    17e6:	b0 95       	com	r27
    17e8:	a0 95       	com	r26
    17ea:	90 95       	com	r25
    17ec:	81 95       	neg	r24
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	af 4f       	sbci	r26, 0xFF	; 255
    17f2:	bf 4f       	sbci	r27, 0xFF	; 255
    17f4:	00 68       	ori	r16, 0x80	; 128
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	a2 01       	movw	r20, r4
    17fc:	2a e0       	ldi	r18, 0x0A	; 10
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__ultoa_invert>
    1804:	d8 2e       	mov	r13, r24
    1806:	d4 18       	sub	r13, r4
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <vfprintf+0x2ae>
    180a:	85 37       	cpi	r24, 0x75	; 117
    180c:	21 f4       	brne	.+8      	; 0x1816 <vfprintf+0x23c>
    180e:	1f 7e       	andi	r17, 0xEF	; 239
    1810:	2a e0       	ldi	r18, 0x0A	; 10
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	20 c0       	rjmp	.+64     	; 0x1856 <vfprintf+0x27c>
    1816:	19 7f       	andi	r17, 0xF9	; 249
    1818:	8f 36       	cpi	r24, 0x6F	; 111
    181a:	a9 f0       	breq	.+42     	; 0x1846 <vfprintf+0x26c>
    181c:	80 37       	cpi	r24, 0x70	; 112
    181e:	20 f4       	brcc	.+8      	; 0x1828 <vfprintf+0x24e>
    1820:	88 35       	cpi	r24, 0x58	; 88
    1822:	09 f0       	breq	.+2      	; 0x1826 <vfprintf+0x24c>
    1824:	ae c0       	rjmp	.+348    	; 0x1982 <vfprintf+0x3a8>
    1826:	0b c0       	rjmp	.+22     	; 0x183e <vfprintf+0x264>
    1828:	80 37       	cpi	r24, 0x70	; 112
    182a:	21 f0       	breq	.+8      	; 0x1834 <vfprintf+0x25a>
    182c:	88 37       	cpi	r24, 0x78	; 120
    182e:	09 f0       	breq	.+2      	; 0x1832 <vfprintf+0x258>
    1830:	a8 c0       	rjmp	.+336    	; 0x1982 <vfprintf+0x3a8>
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <vfprintf+0x25c>
    1834:	10 61       	ori	r17, 0x10	; 16
    1836:	14 ff       	sbrs	r17, 4
    1838:	09 c0       	rjmp	.+18     	; 0x184c <vfprintf+0x272>
    183a:	14 60       	ori	r17, 0x04	; 4
    183c:	07 c0       	rjmp	.+14     	; 0x184c <vfprintf+0x272>
    183e:	14 ff       	sbrs	r17, 4
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x278>
    1842:	16 60       	ori	r17, 0x06	; 6
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x278>
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <vfprintf+0x27c>
    184c:	20 e1       	ldi	r18, 0x10	; 16
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x27c>
    1852:	20 e1       	ldi	r18, 0x10	; 16
    1854:	32 e0       	ldi	r19, 0x02	; 2
    1856:	f5 01       	movw	r30, r10
    1858:	17 ff       	sbrs	r17, 7
    185a:	07 c0       	rjmp	.+14     	; 0x186a <vfprintf+0x290>
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	44 e0       	ldi	r20, 0x04	; 4
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <vfprintf+0x29c>
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	42 e0       	ldi	r20, 0x02	; 2
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	a4 0e       	add	r10, r20
    1878:	b5 1e       	adc	r11, r21
    187a:	a2 01       	movw	r20, r4
    187c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__ultoa_invert>
    1880:	d8 2e       	mov	r13, r24
    1882:	d4 18       	sub	r13, r4
    1884:	01 2f       	mov	r16, r17
    1886:	0f 77       	andi	r16, 0x7F	; 127
    1888:	06 ff       	sbrs	r16, 6
    188a:	09 c0       	rjmp	.+18     	; 0x189e <vfprintf+0x2c4>
    188c:	0e 7f       	andi	r16, 0xFE	; 254
    188e:	df 14       	cp	r13, r15
    1890:	30 f4       	brcc	.+12     	; 0x189e <vfprintf+0x2c4>
    1892:	04 ff       	sbrs	r16, 4
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <vfprintf+0x2c8>
    1896:	02 fd       	sbrc	r16, 2
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <vfprintf+0x2c8>
    189a:	0f 7e       	andi	r16, 0xEF	; 239
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <vfprintf+0x2c8>
    189e:	1d 2d       	mov	r17, r13
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <vfprintf+0x2ca>
    18a2:	1f 2d       	mov	r17, r15
    18a4:	80 2f       	mov	r24, r16
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	04 ff       	sbrs	r16, 4
    18aa:	0c c0       	rjmp	.+24     	; 0x18c4 <vfprintf+0x2ea>
    18ac:	fe 01       	movw	r30, r28
    18ae:	ed 0d       	add	r30, r13
    18b0:	f1 1d       	adc	r31, r1
    18b2:	20 81       	ld	r18, Z
    18b4:	20 33       	cpi	r18, 0x30	; 48
    18b6:	11 f4       	brne	.+4      	; 0x18bc <vfprintf+0x2e2>
    18b8:	09 7e       	andi	r16, 0xE9	; 233
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <vfprintf+0x2f4>
    18bc:	02 ff       	sbrs	r16, 2
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <vfprintf+0x2f2>
    18c0:	1e 5f       	subi	r17, 0xFE	; 254
    18c2:	05 c0       	rjmp	.+10     	; 0x18ce <vfprintf+0x2f4>
    18c4:	86 78       	andi	r24, 0x86	; 134
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	09 f0       	breq	.+2      	; 0x18ce <vfprintf+0x2f4>
    18cc:	1f 5f       	subi	r17, 0xFF	; 255
    18ce:	80 2e       	mov	r8, r16
    18d0:	99 24       	eor	r9, r9
    18d2:	03 fd       	sbrc	r16, 3
    18d4:	12 c0       	rjmp	.+36     	; 0x18fa <vfprintf+0x320>
    18d6:	00 ff       	sbrs	r16, 0
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <vfprintf+0x31a>
    18da:	fd 2c       	mov	r15, r13
    18dc:	1e 15       	cp	r17, r14
    18de:	50 f4       	brcc	.+20     	; 0x18f4 <vfprintf+0x31a>
    18e0:	fe 0c       	add	r15, r14
    18e2:	f1 1a       	sub	r15, r17
    18e4:	1e 2d       	mov	r17, r14
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <vfprintf+0x31a>
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	b3 01       	movw	r22, r6
    18ee:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    18f2:	1f 5f       	subi	r17, 0xFF	; 255
    18f4:	1e 15       	cp	r17, r14
    18f6:	c0 f3       	brcs	.-16     	; 0x18e8 <vfprintf+0x30e>
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <vfprintf+0x328>
    18fa:	1e 15       	cp	r17, r14
    18fc:	10 f4       	brcc	.+4      	; 0x1902 <vfprintf+0x328>
    18fe:	e1 1a       	sub	r14, r17
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <vfprintf+0x32a>
    1902:	ee 24       	eor	r14, r14
    1904:	84 fe       	sbrs	r8, 4
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <vfprintf+0x34c>
    1908:	80 e3       	ldi	r24, 0x30	; 48
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	b3 01       	movw	r22, r6
    190e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    1912:	82 fe       	sbrs	r8, 2
    1914:	1f c0       	rjmp	.+62     	; 0x1954 <vfprintf+0x37a>
    1916:	81 fe       	sbrs	r8, 1
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <vfprintf+0x346>
    191a:	88 e5       	ldi	r24, 0x58	; 88
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	10 c0       	rjmp	.+32     	; 0x1940 <vfprintf+0x366>
    1920:	88 e7       	ldi	r24, 0x78	; 120
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <vfprintf+0x366>
    1926:	c4 01       	movw	r24, r8
    1928:	86 78       	andi	r24, 0x86	; 134
    192a:	90 70       	andi	r25, 0x00	; 0
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	91 f0       	breq	.+36     	; 0x1954 <vfprintf+0x37a>
    1930:	81 fc       	sbrc	r8, 1
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x35e>
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	01 c0       	rjmp	.+2      	; 0x193a <vfprintf+0x360>
    1938:	8b e2       	ldi	r24, 0x2B	; 43
    193a:	07 fd       	sbrc	r16, 7
    193c:	8d e2       	ldi	r24, 0x2D	; 45
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b3 01       	movw	r22, r6
    1942:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <vfprintf+0x37a>
    1948:	80 e3       	ldi	r24, 0x30	; 48
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	b3 01       	movw	r22, r6
    194e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    1952:	fa 94       	dec	r15
    1954:	df 14       	cp	r13, r15
    1956:	c0 f3       	brcs	.-16     	; 0x1948 <vfprintf+0x36e>
    1958:	da 94       	dec	r13
    195a:	f2 01       	movw	r30, r4
    195c:	ed 0d       	add	r30, r13
    195e:	f1 1d       	adc	r31, r1
    1960:	80 81       	ld	r24, Z
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	b3 01       	movw	r22, r6
    1966:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    196a:	dd 20       	and	r13, r13
    196c:	a9 f7       	brne	.-22     	; 0x1958 <vfprintf+0x37e>
    196e:	06 c0       	rjmp	.+12     	; 0x197c <vfprintf+0x3a2>
    1970:	80 e2       	ldi	r24, 0x20	; 32
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	b3 01       	movw	r22, r6
    1976:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <fputc>
    197a:	ea 94       	dec	r14
    197c:	ee 20       	and	r14, r14
    197e:	c1 f7       	brne	.-16     	; 0x1970 <vfprintf+0x396>
    1980:	40 ce       	rjmp	.-896    	; 0x1602 <vfprintf+0x28>
    1982:	f3 01       	movw	r30, r6
    1984:	86 81       	ldd	r24, Z+6	; 0x06
    1986:	97 81       	ldd	r25, Z+7	; 0x07
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x3b4>
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	9f ef       	ldi	r25, 0xFF	; 255
    198e:	2d 96       	adiw	r28, 0x0d	; 13
    1990:	e2 e1       	ldi	r30, 0x12	; 18
    1992:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__epilogue_restores__>

00001996 <strnlen_P>:
    1996:	fc 01       	movw	r30, r24
    1998:	05 90       	lpm	r0, Z+
    199a:	61 50       	subi	r22, 0x01	; 1
    199c:	70 40       	sbci	r23, 0x00	; 0
    199e:	01 10       	cpse	r0, r1
    19a0:	d8 f7       	brcc	.-10     	; 0x1998 <strnlen_P+0x2>
    19a2:	80 95       	com	r24
    19a4:	90 95       	com	r25
    19a6:	8e 0f       	add	r24, r30
    19a8:	9f 1f       	adc	r25, r31
    19aa:	08 95       	ret

000019ac <strnlen>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	61 50       	subi	r22, 0x01	; 1
    19b0:	70 40       	sbci	r23, 0x00	; 0
    19b2:	01 90       	ld	r0, Z+
    19b4:	01 10       	cpse	r0, r1
    19b6:	d8 f7       	brcc	.-10     	; 0x19ae <strnlen+0x2>
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	8e 0f       	add	r24, r30
    19be:	9f 1f       	adc	r25, r31
    19c0:	08 95       	ret

000019c2 <fputc>:
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	8c 01       	movw	r16, r24
    19cc:	eb 01       	movw	r28, r22
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 ff       	sbrs	r24, 1
    19d2:	1b c0       	rjmp	.+54     	; 0x1a0a <fputc+0x48>
    19d4:	82 ff       	sbrs	r24, 2
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <fputc+0x30>
    19d8:	2e 81       	ldd	r18, Y+6	; 0x06
    19da:	3f 81       	ldd	r19, Y+7	; 0x07
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	28 17       	cp	r18, r24
    19e2:	39 07       	cpc	r19, r25
    19e4:	64 f4       	brge	.+24     	; 0x19fe <fputc+0x3c>
    19e6:	e8 81       	ld	r30, Y
    19e8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ea:	01 93       	st	Z+, r16
    19ec:	f9 83       	std	Y+1, r31	; 0x01
    19ee:	e8 83       	st	Y, r30
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <fputc+0x3c>
    19f2:	e8 85       	ldd	r30, Y+8	; 0x08
    19f4:	f9 85       	ldd	r31, Y+9	; 0x09
    19f6:	80 2f       	mov	r24, r16
    19f8:	09 95       	icall
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	31 f4       	brne	.+12     	; 0x1a0a <fputc+0x48>
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	9f 83       	std	Y+7, r25	; 0x07
    1a06:	8e 83       	std	Y+6, r24	; 0x06
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <fputc+0x4c>
    1a0a:	0f ef       	ldi	r16, 0xFF	; 255
    1a0c:	1f ef       	ldi	r17, 0xFF	; 255
    1a0e:	c8 01       	movw	r24, r16
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <__ultoa_invert>:
    1a1a:	fa 01       	movw	r30, r20
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	28 30       	cpi	r18, 0x08	; 8
    1a20:	51 f1       	breq	.+84     	; 0x1a76 <__ultoa_invert+0x5c>
    1a22:	20 31       	cpi	r18, 0x10	; 16
    1a24:	81 f1       	breq	.+96     	; 0x1a86 <__ultoa_invert+0x6c>
    1a26:	e8 94       	clt
    1a28:	6f 93       	push	r22
    1a2a:	6e 7f       	andi	r22, 0xFE	; 254
    1a2c:	6e 5f       	subi	r22, 0xFE	; 254
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	af 4f       	sbci	r26, 0xFF	; 255
    1a36:	b1 e0       	ldi	r27, 0x01	; 1
    1a38:	3e d0       	rcall	.+124    	; 0x1ab6 <__ultoa_invert+0x9c>
    1a3a:	b4 e0       	ldi	r27, 0x04	; 4
    1a3c:	3c d0       	rcall	.+120    	; 0x1ab6 <__ultoa_invert+0x9c>
    1a3e:	67 0f       	add	r22, r23
    1a40:	78 1f       	adc	r23, r24
    1a42:	89 1f       	adc	r24, r25
    1a44:	9a 1f       	adc	r25, r26
    1a46:	a1 1d       	adc	r26, r1
    1a48:	68 0f       	add	r22, r24
    1a4a:	79 1f       	adc	r23, r25
    1a4c:	8a 1f       	adc	r24, r26
    1a4e:	91 1d       	adc	r25, r1
    1a50:	a1 1d       	adc	r26, r1
    1a52:	6a 0f       	add	r22, r26
    1a54:	71 1d       	adc	r23, r1
    1a56:	81 1d       	adc	r24, r1
    1a58:	91 1d       	adc	r25, r1
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	20 d0       	rcall	.+64     	; 0x1a9e <__ultoa_invert+0x84>
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <__ultoa_invert+0x48>
    1a60:	68 94       	set
    1a62:	3f 91       	pop	r19
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	26 9f       	mul	r18, r22
    1a68:	11 24       	eor	r1, r1
    1a6a:	30 19       	sub	r19, r0
    1a6c:	30 5d       	subi	r19, 0xD0	; 208
    1a6e:	31 93       	st	Z+, r19
    1a70:	de f6       	brtc	.-74     	; 0x1a28 <__ultoa_invert+0xe>
    1a72:	cf 01       	movw	r24, r30
    1a74:	08 95       	ret
    1a76:	46 2f       	mov	r20, r22
    1a78:	47 70       	andi	r20, 0x07	; 7
    1a7a:	40 5d       	subi	r20, 0xD0	; 208
    1a7c:	41 93       	st	Z+, r20
    1a7e:	b3 e0       	ldi	r27, 0x03	; 3
    1a80:	0f d0       	rcall	.+30     	; 0x1aa0 <__ultoa_invert+0x86>
    1a82:	c9 f7       	brne	.-14     	; 0x1a76 <__ultoa_invert+0x5c>
    1a84:	f6 cf       	rjmp	.-20     	; 0x1a72 <__ultoa_invert+0x58>
    1a86:	46 2f       	mov	r20, r22
    1a88:	4f 70       	andi	r20, 0x0F	; 15
    1a8a:	40 5d       	subi	r20, 0xD0	; 208
    1a8c:	4a 33       	cpi	r20, 0x3A	; 58
    1a8e:	18 f0       	brcs	.+6      	; 0x1a96 <__ultoa_invert+0x7c>
    1a90:	49 5d       	subi	r20, 0xD9	; 217
    1a92:	31 fd       	sbrc	r19, 1
    1a94:	40 52       	subi	r20, 0x20	; 32
    1a96:	41 93       	st	Z+, r20
    1a98:	02 d0       	rcall	.+4      	; 0x1a9e <__ultoa_invert+0x84>
    1a9a:	a9 f7       	brne	.-22     	; 0x1a86 <__ultoa_invert+0x6c>
    1a9c:	ea cf       	rjmp	.-44     	; 0x1a72 <__ultoa_invert+0x58>
    1a9e:	b4 e0       	ldi	r27, 0x04	; 4
    1aa0:	a6 95       	lsr	r26
    1aa2:	97 95       	ror	r25
    1aa4:	87 95       	ror	r24
    1aa6:	77 95       	ror	r23
    1aa8:	67 95       	ror	r22
    1aaa:	ba 95       	dec	r27
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__ultoa_invert+0x86>
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	61 05       	cpc	r22, r1
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	08 95       	ret
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	0a 2e       	mov	r0, r26
    1abc:	06 94       	lsr	r0
    1abe:	57 95       	ror	r21
    1ac0:	47 95       	ror	r20
    1ac2:	37 95       	ror	r19
    1ac4:	27 95       	ror	r18
    1ac6:	ba 95       	dec	r27
    1ac8:	c9 f7       	brne	.-14     	; 0x1abc <__ultoa_invert+0xa2>
    1aca:	62 0f       	add	r22, r18
    1acc:	73 1f       	adc	r23, r19
    1ace:	84 1f       	adc	r24, r20
    1ad0:	95 1f       	adc	r25, r21
    1ad2:	a0 1d       	adc	r26, r0
    1ad4:	08 95       	ret

00001ad6 <__prologue_saves__>:
    1ad6:	2f 92       	push	r2
    1ad8:	3f 92       	push	r3
    1ada:	4f 92       	push	r4
    1adc:	5f 92       	push	r5
    1ade:	6f 92       	push	r6
    1ae0:	7f 92       	push	r7
    1ae2:	8f 92       	push	r8
    1ae4:	9f 92       	push	r9
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	ca 1b       	sub	r28, r26
    1b00:	db 0b       	sbc	r29, r27
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	09 94       	ijmp

00001b0e <__epilogue_restores__>:
    1b0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b10:	39 88       	ldd	r3, Y+17	; 0x11
    1b12:	48 88       	ldd	r4, Y+16	; 0x10
    1b14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b20:	b9 84       	ldd	r11, Y+9	; 0x09
    1b22:	c8 84       	ldd	r12, Y+8	; 0x08
    1b24:	df 80       	ldd	r13, Y+7	; 0x07
    1b26:	ee 80       	ldd	r14, Y+6	; 0x06
    1b28:	fd 80       	ldd	r15, Y+5	; 0x05
    1b2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b30:	b9 81       	ldd	r27, Y+1	; 0x01
    1b32:	ce 0f       	add	r28, r30
    1b34:	d1 1d       	adc	r29, r1
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	ed 01       	movw	r28, r26
    1b42:	08 95       	ret

00001b44 <_exit>:
    1b44:	f8 94       	cli

00001b46 <__stop_program>:
    1b46:	ff cf       	rjmp	.-2      	; 0x1b46 <__stop_program>
