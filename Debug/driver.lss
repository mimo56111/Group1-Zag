
driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001b7c  00001bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002640  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000843  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000220  00000000  00000000  00004aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022ae  00000000  00000000  00004cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000acc  00000000  00000000  00006f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000faf  00000000  00000000  00007a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e0  00000000  00000000  000089f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000673  00000000  00000000  00008fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023df  00000000  00000000  00009647  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000ba26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      8a:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
#include "stdmacros.h"
#include "Register.h"
#include "Data_type.h"
void ADC_vInit(){
	/* Configure Vref (Vcc on AVCC with external capacitor at Vref pin)*/
	SET_BIT(myADMUX,myREFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(myADMUX,myREFS1);
      94:	3f 98       	cbi	0x07, 7	; 7
	/* Enable ADC */
	SET_BIT(myADCSRA,myADEN);
      96:	37 9a       	sbi	0x06, 7	; 6
	/* Adjust ADC Clock make the division factor 64 because we use freq. 8M so 8M/64=125KHz */
	SET_BIT(myADCSRA,myADPS2);
      98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(myADCSRA,myADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
	CLR_BIT(myADCSRA,myADPS0);
      9c:	30 98       	cbi	0x06, 0	; 6
}
      9e:	08 95       	ret

000000a0 <ADC_u16Read_Single_Endded>:
u16 ADC_u16Read_Single_Endded(u8 channel_number){
	u16 read_value ;
	/* Must be from 0>>7 to select one of these pin ADC0,1,2 */
	channel_number &=0x07;
	/* Clear from MUX4 to MUX0 before set the required bit */
	myADMUX &=0xE0;
      a0:	97 b1       	in	r25, 0x07	; 7
      a2:	90 7e       	andi	r25, 0xE0	; 224
      a4:	97 b9       	out	0x07, r25	; 7
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	myADMUX = myADMUX | channel_number;
      a6:	97 b1       	in	r25, 0x07	; 7
}

u16 ADC_u16Read_Single_Endded(u8 channel_number){
	u16 read_value ;
	/* Must be from 0>>7 to select one of these pin ADC0,1,2 */
	channel_number &=0x07;
      a8:	87 70       	andi	r24, 0x07	; 7
	/* Clear from MUX4 to MUX0 before set the required bit */
	myADMUX &=0xE0;
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	myADMUX = myADMUX | channel_number;
      aa:	98 2b       	or	r25, r24
      ac:	97 b9       	out	0x07, r25	; 7
	/* Start the conversion by set Bit (ADSC) */
	SET_BIT(myADCSRA,myADSC);
      ae:	36 9a       	sbi	0x06, 6	; 6
	/*Wait for the conversion to complete and ADIF(Bit 4) become 1 */
	while(IS_BIT_CLR(myADCSRA,myADIF));
      b0:	34 9b       	sbis	0x06, 4	; 6
      b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_u16Read_Single_Endded+0x10>
	/* Clear ADIF by write'1' to it */
	SET_BIT(myADCSRA,myADIF);
      b4:	34 9a       	sbi	0x06, 4	; 6
	/* Combine ADCL +ADCH */
	read_value = myADCL;
      b6:	84 b1       	in	r24, 0x04	; 4
      b8:	90 e0       	ldi	r25, 0x00	; 0
	read_value |= (myADCH<<8);
      ba:	45 b1       	in	r20, 0x05	; 5
      bc:	34 2f       	mov	r19, r20
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	82 2b       	or	r24, r18
      c2:	93 2b       	or	r25, r19
	/* Return value*/
	return read_value;
      c4:	08 95       	ret

000000c6 <button_vInit>:
#include "GPIO_MCAL.h"
#define F_CPU 8000000UL
#include "util/delay.h"

void button_vInit( u8 port,u8 pin ){
	GPIO_vsetPIN_DIR(port, pin,0);
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
	
}
      cc:	08 95       	ret

000000ce <button_u8read>:

u8 button_u8read( u8 port,u8 pin ){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
      ce:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GPIO_u8read_PIN>
	
	return x;
}
      d2:	08 95       	ret

000000d4 <main>:
#include "EEPROM_MCAL.h"
#include "Keypad_ECU.h"
#include <avr/interrupt.h>
int main(void){
	
	LCD_vInit(Eight_bit,High_Nibble,'A','B',2,'B',3,'B',4);
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	61 e0       	ldi	r22, 0x01	; 1
      d8:	41 e4       	ldi	r20, 0x41	; 65
      da:	22 e4       	ldi	r18, 0x42	; 66
      dc:	02 e0       	ldi	r16, 0x02	; 2
      de:	0f 2e       	mov	r0, r31
      e0:	f2 e4       	ldi	r31, 0x42	; 66
      e2:	ef 2e       	mov	r14, r31
      e4:	f0 2d       	mov	r31, r0
      e6:	0f 2e       	mov	r0, r31
      e8:	f3 e0       	ldi	r31, 0x03	; 3
      ea:	cf 2e       	mov	r12, r31
      ec:	f0 2d       	mov	r31, r0
      ee:	0f 2e       	mov	r0, r31
      f0:	f2 e4       	ldi	r31, 0x42	; 66
      f2:	af 2e       	mov	r10, r31
      f4:	f0 2d       	mov	r31, r0
      f6:	88 24       	eor	r8, r8
      f8:	68 94       	set
      fa:	82 f8       	bld	r8, 2
      fc:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_vInit>
	keypad_vInit('D');	
     100:	84 e4       	ldi	r24, 0x44	; 68
     102:	0e 94 80 04 	call	0x900	; 0x900 <keypad_vInit>
	u8 x ;
	x=keypad_u8check_press('D');
     106:	84 e4       	ldi	r24, 0x44	; 68
     108:	0e 94 9b 04 	call	0x936	; 0x936 <keypad_u8check_press>
     10c:	a8 2e       	mov	r10, r24
			x=keypad_u8check_press('D');
		}
		
		
		LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,x);
		x = NOTPRESSED;
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	04 c0       	rjmp	.+8      	; 0x11a <main+0x46>
	x=keypad_u8check_press('D');
	
	
	while(1){
		while (x==NOTPRESSED){               
			x=keypad_u8check_press('D');
     112:	84 e4       	ldi	r24, 0x44	; 68
     114:	0e 94 9b 04 	call	0x936	; 0x936 <keypad_u8check_press>
     118:	a8 2e       	mov	r10, r24
	u8 x ;
	x=keypad_u8check_press('D');
	
	
	while(1){
		while (x==NOTPRESSED){               
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	a8 16       	cp	r10, r24
     11e:	c9 f3       	breq	.-14     	; 0x112 <main+0x3e>
			x=keypad_u8check_press('D');
		}
		
		
		LCD_vsend_char(Eight_bit,High_Nibble,'A','B',2,'B',4,x);
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	41 e4       	ldi	r20, 0x41	; 65
     126:	22 e4       	ldi	r18, 0x42	; 66
     128:	02 e0       	ldi	r16, 0x02	; 2
     12a:	0f 2e       	mov	r0, r31
     12c:	f2 e4       	ldi	r31, 0x42	; 66
     12e:	ef 2e       	mov	r14, r31
     130:	f0 2d       	mov	r31, r0
     132:	cc 24       	eor	r12, r12
     134:	68 94       	set
     136:	c2 f8       	bld	r12, 2
     138:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_vsend_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	92 e5       	ldi	r25, 0x52	; 82
     140:	a7 e0       	ldi	r26, 0x07	; 7
     142:	81 50       	subi	r24, 0x01	; 1
     144:	90 40       	sbci	r25, 0x00	; 0
     146:	a0 40       	sbci	r26, 0x00	; 0
     148:	e1 f7       	brne	.-8      	; 0x142 <main+0x6e>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x78>
     14c:	00 00       	nop
		x = NOTPRESSED;
     14e:	ac 2e       	mov	r10, r28
     150:	e4 cf       	rjmp	.-56     	; 0x11a <main+0x46>

00000152 <EEPROM_Write>:
 */ 
#include "Register.h"
#include "stdmacros.h"
#include "Data_type.h"
void EEPROM_Write(u16 address , u8 value){
	myEEARL = (u8)address;      
     152:	8e bb       	out	0x1e, r24	; 30
	myEEARH= (u8)(address>>8);
     154:	9f bb       	out	0x1f, r25	; 31
	myEEDR = value;
     156:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(myEECR , myEEMWE);
     158:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(myEECR , myEEWE);
     15a:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(myEECR , myEEWE)==1);
     15c:	e1 99       	sbic	0x1c, 1	; 28
     15e:	fe cf       	rjmp	.-4      	; 0x15c <EEPROM_Write+0xa>
}
     160:	08 95       	ret

00000162 <EEPROM_Read>:



u8 EEPROM_Read(const u16 address){
	myEEARL = (u8)address;
     162:	8e bb       	out	0x1e, r24	; 30
	myEEARH = (u8)(address>>8);
     164:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(myEECR , myEERE);
     166:	e0 9a       	sbi	0x1c, 0	; 28
	return myEEDR;
     168:	8d b3       	in	r24, 0x1d	; 29
     16a:	08 95       	ret

0000016c <GPIO_voidInit>:
#include "GPIO_MCAL.h"

//================================Initialization=======================================
 void GPIO_voidInit(void){
	 /*Comment!: DDR initialization  */
	myDDRA = Init_direction_default;
     16c:	1a ba       	out	0x1a, r1	; 26
	myDDRB = Init_direction_default;
     16e:	17 ba       	out	0x17, r1	; 23
	myDDRC = Init_direction_default;
     170:	14 ba       	out	0x14, r1	; 20
	myDDRD = Init_direction_default;
     172:	11 ba       	out	0x11, r1	; 17
 }
     174:	08 95       	ret

00000176 <GPIO_vsetPIN_DIR>:
//=====================================================================================

//===================================PIN===============================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir ){
	switch (portnum){
     176:	84 34       	cpi	r24, 0x44	; 68
     178:	09 f4       	brne	.+2      	; 0x17c <GPIO_vsetPIN_DIR+0x6>
     17a:	71 c0       	rjmp	.+226    	; 0x25e <GPIO_vsetPIN_DIR+0xe8>
     17c:	85 34       	cpi	r24, 0x45	; 69
     17e:	48 f4       	brcc	.+18     	; 0x192 <GPIO_vsetPIN_DIR+0x1c>
     180:	82 34       	cpi	r24, 0x42	; 66
     182:	99 f1       	breq	.+102    	; 0x1ea <GPIO_vsetPIN_DIR+0x74>
     184:	83 34       	cpi	r24, 0x43	; 67
     186:	08 f0       	brcs	.+2      	; 0x18a <GPIO_vsetPIN_DIR+0x14>
     188:	4d c0       	rjmp	.+154    	; 0x224 <GPIO_vsetPIN_DIR+0xae>
     18a:	81 34       	cpi	r24, 0x41	; 65
     18c:	09 f0       	breq	.+2      	; 0x190 <GPIO_vsetPIN_DIR+0x1a>
     18e:	83 c0       	rjmp	.+262    	; 0x296 <GPIO_vsetPIN_DIR+0x120>
     190:	0f c0       	rjmp	.+30     	; 0x1b0 <GPIO_vsetPIN_DIR+0x3a>
     192:	82 36       	cpi	r24, 0x62	; 98
     194:	51 f1       	breq	.+84     	; 0x1ea <GPIO_vsetPIN_DIR+0x74>
     196:	83 36       	cpi	r24, 0x63	; 99
     198:	20 f4       	brcc	.+8      	; 0x1a2 <GPIO_vsetPIN_DIR+0x2c>
     19a:	81 36       	cpi	r24, 0x61	; 97
     19c:	09 f0       	breq	.+2      	; 0x1a0 <GPIO_vsetPIN_DIR+0x2a>
     19e:	7b c0       	rjmp	.+246    	; 0x296 <GPIO_vsetPIN_DIR+0x120>
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <GPIO_vsetPIN_DIR+0x3a>
     1a2:	83 36       	cpi	r24, 0x63	; 99
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <GPIO_vsetPIN_DIR+0x32>
     1a6:	3e c0       	rjmp	.+124    	; 0x224 <GPIO_vsetPIN_DIR+0xae>
     1a8:	84 36       	cpi	r24, 0x64	; 100
     1aa:	09 f0       	breq	.+2      	; 0x1ae <GPIO_vsetPIN_DIR+0x38>
     1ac:	74 c0       	rjmp	.+232    	; 0x296 <GPIO_vsetPIN_DIR+0x120>
     1ae:	57 c0       	rjmp	.+174    	; 0x25e <GPIO_vsetPIN_DIR+0xe8>
		case 'A' :
		case 'a' :
			if(dir == 1){
     1b0:	41 30       	cpi	r20, 0x01	; 1
     1b2:	69 f4       	brne	.+26     	; 0x1ce <GPIO_vsetPIN_DIR+0x58>
				SET_BIT(myDDRA , pinnum);
     1b4:	2a b3       	in	r18, 0x1a	; 26
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	ac 01       	movw	r20, r24
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <GPIO_vsetPIN_DIR+0x4c>
     1be:	44 0f       	add	r20, r20
     1c0:	55 1f       	adc	r21, r21
     1c2:	6a 95       	dec	r22
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <GPIO_vsetPIN_DIR+0x48>
     1c6:	ba 01       	movw	r22, r20
     1c8:	62 2b       	or	r22, r18
     1ca:	6a bb       	out	0x1a, r22	; 26
     1cc:	08 95       	ret
			}else{
				CLR_BIT(myDDRA , pinnum);
     1ce:	2a b3       	in	r18, 0x1a	; 26
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	ac 01       	movw	r20, r24
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <GPIO_vsetPIN_DIR+0x66>
     1d8:	44 0f       	add	r20, r20
     1da:	55 1f       	adc	r21, r21
     1dc:	6a 95       	dec	r22
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <GPIO_vsetPIN_DIR+0x62>
     1e0:	ba 01       	movw	r22, r20
     1e2:	60 95       	com	r22
     1e4:	62 23       	and	r22, r18
     1e6:	6a bb       	out	0x1a, r22	; 26
     1e8:	08 95       	ret
			}
			break;
		case 'b' :
		case 'B' :
			if(dir == 1){
     1ea:	41 30       	cpi	r20, 0x01	; 1
     1ec:	69 f4       	brne	.+26     	; 0x208 <GPIO_vsetPIN_DIR+0x92>
				SET_BIT(myDDRB , pinnum);
     1ee:	27 b3       	in	r18, 0x17	; 23
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	ac 01       	movw	r20, r24
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <GPIO_vsetPIN_DIR+0x86>
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <GPIO_vsetPIN_DIR+0x82>
     200:	ba 01       	movw	r22, r20
     202:	62 2b       	or	r22, r18
     204:	67 bb       	out	0x17, r22	; 23
     206:	08 95       	ret
			}else{
				CLR_BIT(myDDRB , pinnum);
     208:	27 b3       	in	r18, 0x17	; 23
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	ac 01       	movw	r20, r24
     210:	02 c0       	rjmp	.+4      	; 0x216 <GPIO_vsetPIN_DIR+0xa0>
     212:	44 0f       	add	r20, r20
     214:	55 1f       	adc	r21, r21
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <GPIO_vsetPIN_DIR+0x9c>
     21a:	ba 01       	movw	r22, r20
     21c:	60 95       	com	r22
     21e:	62 23       	and	r22, r18
     220:	67 bb       	out	0x17, r22	; 23
     222:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
     224:	41 30       	cpi	r20, 0x01	; 1
     226:	69 f4       	brne	.+26     	; 0x242 <GPIO_vsetPIN_DIR+0xcc>
				SET_BIT(myDDRC , pinnum);
     228:	24 b3       	in	r18, 0x14	; 20
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	ac 01       	movw	r20, r24
     230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_vsetPIN_DIR+0xc0>
     232:	44 0f       	add	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_vsetPIN_DIR+0xbc>
     23a:	ba 01       	movw	r22, r20
     23c:	62 2b       	or	r22, r18
     23e:	64 bb       	out	0x14, r22	; 20
     240:	08 95       	ret
			}else{
				CLR_BIT(myDDRC , pinnum);
     242:	24 b3       	in	r18, 0x14	; 20
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	ac 01       	movw	r20, r24
     24a:	02 c0       	rjmp	.+4      	; 0x250 <GPIO_vsetPIN_DIR+0xda>
     24c:	44 0f       	add	r20, r20
     24e:	55 1f       	adc	r21, r21
     250:	6a 95       	dec	r22
     252:	e2 f7       	brpl	.-8      	; 0x24c <GPIO_vsetPIN_DIR+0xd6>
     254:	ba 01       	movw	r22, r20
     256:	60 95       	com	r22
     258:	62 23       	and	r22, r18
     25a:	64 bb       	out	0x14, r22	; 20
     25c:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
     25e:	41 30       	cpi	r20, 0x01	; 1
     260:	69 f4       	brne	.+26     	; 0x27c <GPIO_vsetPIN_DIR+0x106>
				SET_BIT(myDDRD , pinnum);
     262:	21 b3       	in	r18, 0x11	; 17
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	ac 01       	movw	r20, r24
     26a:	02 c0       	rjmp	.+4      	; 0x270 <GPIO_vsetPIN_DIR+0xfa>
     26c:	44 0f       	add	r20, r20
     26e:	55 1f       	adc	r21, r21
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <GPIO_vsetPIN_DIR+0xf6>
     274:	ba 01       	movw	r22, r20
     276:	62 2b       	or	r22, r18
     278:	61 bb       	out	0x11, r22	; 17
     27a:	08 95       	ret
			}else{
				CLR_BIT(myDDRD , pinnum);
     27c:	21 b3       	in	r18, 0x11	; 17
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	ac 01       	movw	r20, r24
     284:	02 c0       	rjmp	.+4      	; 0x28a <GPIO_vsetPIN_DIR+0x114>
     286:	44 0f       	add	r20, r20
     288:	55 1f       	adc	r21, r21
     28a:	6a 95       	dec	r22
     28c:	e2 f7       	brpl	.-8      	; 0x286 <GPIO_vsetPIN_DIR+0x110>
     28e:	ba 01       	movw	r22, r20
     290:	60 95       	com	r22
     292:	62 23       	and	r22, r18
     294:	61 bb       	out	0x11, r22	; 17
     296:	08 95       	ret

00000298 <GPIO_vwrite_PIN>:
	}
	
}

void GPIO_vwrite_PIN(u8 portnum , u8 pinnum , u8 value ){
	switch(portnum){
     298:	84 34       	cpi	r24, 0x44	; 68
     29a:	09 f4       	brne	.+2      	; 0x29e <GPIO_vwrite_PIN+0x6>
     29c:	71 c0       	rjmp	.+226    	; 0x380 <GPIO_vwrite_PIN+0xe8>
     29e:	85 34       	cpi	r24, 0x45	; 69
     2a0:	48 f4       	brcc	.+18     	; 0x2b4 <GPIO_vwrite_PIN+0x1c>
     2a2:	82 34       	cpi	r24, 0x42	; 66
     2a4:	99 f1       	breq	.+102    	; 0x30c <GPIO_vwrite_PIN+0x74>
     2a6:	83 34       	cpi	r24, 0x43	; 67
     2a8:	08 f0       	brcs	.+2      	; 0x2ac <GPIO_vwrite_PIN+0x14>
     2aa:	4d c0       	rjmp	.+154    	; 0x346 <GPIO_vwrite_PIN+0xae>
     2ac:	81 34       	cpi	r24, 0x41	; 65
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <GPIO_vwrite_PIN+0x1a>
     2b0:	83 c0       	rjmp	.+262    	; 0x3b8 <GPIO_vwrite_PIN+0x120>
     2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <GPIO_vwrite_PIN+0x3a>
     2b4:	82 36       	cpi	r24, 0x62	; 98
     2b6:	51 f1       	breq	.+84     	; 0x30c <GPIO_vwrite_PIN+0x74>
     2b8:	83 36       	cpi	r24, 0x63	; 99
     2ba:	20 f4       	brcc	.+8      	; 0x2c4 <GPIO_vwrite_PIN+0x2c>
     2bc:	81 36       	cpi	r24, 0x61	; 97
     2be:	09 f0       	breq	.+2      	; 0x2c2 <GPIO_vwrite_PIN+0x2a>
     2c0:	7b c0       	rjmp	.+246    	; 0x3b8 <GPIO_vwrite_PIN+0x120>
     2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <GPIO_vwrite_PIN+0x3a>
     2c4:	83 36       	cpi	r24, 0x63	; 99
     2c6:	09 f4       	brne	.+2      	; 0x2ca <GPIO_vwrite_PIN+0x32>
     2c8:	3e c0       	rjmp	.+124    	; 0x346 <GPIO_vwrite_PIN+0xae>
     2ca:	84 36       	cpi	r24, 0x64	; 100
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <GPIO_vwrite_PIN+0x38>
     2ce:	74 c0       	rjmp	.+232    	; 0x3b8 <GPIO_vwrite_PIN+0x120>
     2d0:	57 c0       	rjmp	.+174    	; 0x380 <GPIO_vwrite_PIN+0xe8>
		case 'A':
		case 'a':
			if (value ==1){
     2d2:	41 30       	cpi	r20, 0x01	; 1
     2d4:	69 f4       	brne	.+26     	; 0x2f0 <GPIO_vwrite_PIN+0x58>
				SET_BIT(myPORTA , pinnum);
     2d6:	2b b3       	in	r18, 0x1b	; 27
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	ac 01       	movw	r20, r24
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_vwrite_PIN+0x4c>
     2e0:	44 0f       	add	r20, r20
     2e2:	55 1f       	adc	r21, r21
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_vwrite_PIN+0x48>
     2e8:	ba 01       	movw	r22, r20
     2ea:	62 2b       	or	r22, r18
     2ec:	6b bb       	out	0x1b, r22	; 27
     2ee:	08 95       	ret
			}else {
				CLR_BIT(myPORTA , pinnum);
     2f0:	2b b3       	in	r18, 0x1b	; 27
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	ac 01       	movw	r20, r24
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <GPIO_vwrite_PIN+0x66>
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	6a 95       	dec	r22
     300:	e2 f7       	brpl	.-8      	; 0x2fa <GPIO_vwrite_PIN+0x62>
     302:	ba 01       	movw	r22, r20
     304:	60 95       	com	r22
     306:	62 23       	and	r22, r18
     308:	6b bb       	out	0x1b, r22	; 27
     30a:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if (value ==1){
     30c:	41 30       	cpi	r20, 0x01	; 1
     30e:	69 f4       	brne	.+26     	; 0x32a <GPIO_vwrite_PIN+0x92>
				SET_BIT(myPORTB , pinnum);
     310:	28 b3       	in	r18, 0x18	; 24
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	ac 01       	movw	r20, r24
     318:	02 c0       	rjmp	.+4      	; 0x31e <GPIO_vwrite_PIN+0x86>
     31a:	44 0f       	add	r20, r20
     31c:	55 1f       	adc	r21, r21
     31e:	6a 95       	dec	r22
     320:	e2 f7       	brpl	.-8      	; 0x31a <GPIO_vwrite_PIN+0x82>
     322:	ba 01       	movw	r22, r20
     324:	62 2b       	or	r22, r18
     326:	68 bb       	out	0x18, r22	; 24
     328:	08 95       	ret
			}else {
				CLR_BIT(myPORTB , pinnum);
     32a:	28 b3       	in	r18, 0x18	; 24
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	ac 01       	movw	r20, r24
     332:	02 c0       	rjmp	.+4      	; 0x338 <GPIO_vwrite_PIN+0xa0>
     334:	44 0f       	add	r20, r20
     336:	55 1f       	adc	r21, r21
     338:	6a 95       	dec	r22
     33a:	e2 f7       	brpl	.-8      	; 0x334 <GPIO_vwrite_PIN+0x9c>
     33c:	ba 01       	movw	r22, r20
     33e:	60 95       	com	r22
     340:	62 23       	and	r22, r18
     342:	68 bb       	out	0x18, r22	; 24
     344:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (value ==1){
     346:	41 30       	cpi	r20, 0x01	; 1
     348:	69 f4       	brne	.+26     	; 0x364 <GPIO_vwrite_PIN+0xcc>
				SET_BIT(myPORTC , pinnum);
     34a:	25 b3       	in	r18, 0x15	; 21
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	ac 01       	movw	r20, r24
     352:	02 c0       	rjmp	.+4      	; 0x358 <GPIO_vwrite_PIN+0xc0>
     354:	44 0f       	add	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <GPIO_vwrite_PIN+0xbc>
     35c:	ba 01       	movw	r22, r20
     35e:	62 2b       	or	r22, r18
     360:	65 bb       	out	0x15, r22	; 21
     362:	08 95       	ret
			}else {
				CLR_BIT(myPORTC , pinnum);
     364:	25 b3       	in	r18, 0x15	; 21
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	ac 01       	movw	r20, r24
     36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_vwrite_PIN+0xda>
     36e:	44 0f       	add	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_vwrite_PIN+0xd6>
     376:	ba 01       	movw	r22, r20
     378:	60 95       	com	r22
     37a:	62 23       	and	r22, r18
     37c:	65 bb       	out	0x15, r22	; 21
     37e:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (value ==1){
     380:	41 30       	cpi	r20, 0x01	; 1
     382:	69 f4       	brne	.+26     	; 0x39e <GPIO_vwrite_PIN+0x106>
				SET_BIT(myPORTD , pinnum);
     384:	22 b3       	in	r18, 0x12	; 18
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	ac 01       	movw	r20, r24
     38c:	02 c0       	rjmp	.+4      	; 0x392 <GPIO_vwrite_PIN+0xfa>
     38e:	44 0f       	add	r20, r20
     390:	55 1f       	adc	r21, r21
     392:	6a 95       	dec	r22
     394:	e2 f7       	brpl	.-8      	; 0x38e <GPIO_vwrite_PIN+0xf6>
     396:	ba 01       	movw	r22, r20
     398:	62 2b       	or	r22, r18
     39a:	62 bb       	out	0x12, r22	; 18
     39c:	08 95       	ret
			}else {
				CLR_BIT(myPORTD , pinnum);
     39e:	22 b3       	in	r18, 0x12	; 18
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	ac 01       	movw	r20, r24
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GPIO_vwrite_PIN+0x114>
     3a8:	44 0f       	add	r20, r20
     3aa:	55 1f       	adc	r21, r21
     3ac:	6a 95       	dec	r22
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GPIO_vwrite_PIN+0x110>
     3b0:	ba 01       	movw	r22, r20
     3b2:	60 95       	com	r22
     3b4:	62 23       	and	r22, r18
     3b6:	62 bb       	out	0x12, r22	; 18
     3b8:	08 95       	ret

000003ba <GPIO_u8read_PIN>:
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
     3ba:	84 34       	cpi	r24, 0x44	; 68
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <GPIO_u8read_PIN+0x6>
     3be:	4e c0       	rjmp	.+156    	; 0x45c <GPIO_u8read_PIN+0xa2>
     3c0:	85 34       	cpi	r24, 0x45	; 69
     3c2:	40 f4       	brcc	.+16     	; 0x3d4 <GPIO_u8read_PIN+0x1a>
     3c4:	82 34       	cpi	r24, 0x42	; 66
     3c6:	31 f1       	breq	.+76     	; 0x414 <GPIO_u8read_PIN+0x5a>
     3c8:	83 34       	cpi	r24, 0x43	; 67
     3ca:	b0 f5       	brcc	.+108    	; 0x438 <GPIO_u8read_PIN+0x7e>
     3cc:	81 34       	cpi	r24, 0x41	; 65
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <GPIO_u8read_PIN+0x18>
     3d0:	57 c0       	rjmp	.+174    	; 0x480 <GPIO_u8read_PIN+0xc6>
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <GPIO_u8read_PIN+0x36>
     3d4:	82 36       	cpi	r24, 0x62	; 98
     3d6:	f1 f0       	breq	.+60     	; 0x414 <GPIO_u8read_PIN+0x5a>
     3d8:	83 36       	cpi	r24, 0x63	; 99
     3da:	20 f4       	brcc	.+8      	; 0x3e4 <GPIO_u8read_PIN+0x2a>
     3dc:	81 36       	cpi	r24, 0x61	; 97
     3de:	09 f0       	breq	.+2      	; 0x3e2 <GPIO_u8read_PIN+0x28>
     3e0:	4f c0       	rjmp	.+158    	; 0x480 <GPIO_u8read_PIN+0xc6>
     3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <GPIO_u8read_PIN+0x36>
     3e4:	83 36       	cpi	r24, 0x63	; 99
     3e6:	41 f1       	breq	.+80     	; 0x438 <GPIO_u8read_PIN+0x7e>
     3e8:	84 36       	cpi	r24, 0x64	; 100
     3ea:	09 f0       	breq	.+2      	; 0x3ee <GPIO_u8read_PIN+0x34>
     3ec:	49 c0       	rjmp	.+146    	; 0x480 <GPIO_u8read_PIN+0xc6>
     3ee:	36 c0       	rjmp	.+108    	; 0x45c <GPIO_u8read_PIN+0xa2>
		case 'A':
		case 'a':
			x= READ_BIT(myPINA, pinnum);
     3f0:	29 b3       	in	r18, 0x19	; 25
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	06 2e       	mov	r0, r22
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_u8read_PIN+0x44>
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_u8read_PIN+0x40>
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	82 23       	and	r24, r18
     406:	93 23       	and	r25, r19
     408:	02 c0       	rjmp	.+4      	; 0x40e <GPIO_u8read_PIN+0x54>
     40a:	95 95       	asr	r25
     40c:	87 95       	ror	r24
     40e:	6a 95       	dec	r22
     410:	e2 f7       	brpl	.-8      	; 0x40a <GPIO_u8read_PIN+0x50>
			break;
     412:	08 95       	ret
		case 'B':
		case 'b':
			x= READ_BIT(myPINB , pinnum);
     414:	26 b3       	in	r18, 0x16	; 22
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	06 2e       	mov	r0, r22
     41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_u8read_PIN+0x68>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_u8read_PIN+0x64>
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	82 23       	and	r24, r18
     42a:	93 23       	and	r25, r19
     42c:	02 c0       	rjmp	.+4      	; 0x432 <GPIO_u8read_PIN+0x78>
     42e:	95 95       	asr	r25
     430:	87 95       	ror	r24
     432:	6a 95       	dec	r22
     434:	e2 f7       	brpl	.-8      	; 0x42e <GPIO_u8read_PIN+0x74>
			break;
     436:	08 95       	ret
		case 'C':
		case 'c':
			x= READ_BIT(myPINC , pinnum);
     438:	23 b3       	in	r18, 0x13	; 19
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	06 2e       	mov	r0, r22
     440:	02 c0       	rjmp	.+4      	; 0x446 <GPIO_u8read_PIN+0x8c>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	0a 94       	dec	r0
     448:	e2 f7       	brpl	.-8      	; 0x442 <GPIO_u8read_PIN+0x88>
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	82 23       	and	r24, r18
     44e:	93 23       	and	r25, r19
     450:	02 c0       	rjmp	.+4      	; 0x456 <GPIO_u8read_PIN+0x9c>
     452:	95 95       	asr	r25
     454:	87 95       	ror	r24
     456:	6a 95       	dec	r22
     458:	e2 f7       	brpl	.-8      	; 0x452 <GPIO_u8read_PIN+0x98>
			break;
     45a:	08 95       	ret
		case 'D':
		case 'd':
			x= READ_BIT(myPIND, pinnum);
     45c:	20 b3       	in	r18, 0x10	; 16
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	06 2e       	mov	r0, r22
     464:	02 c0       	rjmp	.+4      	; 0x46a <GPIO_u8read_PIN+0xb0>
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	0a 94       	dec	r0
     46c:	e2 f7       	brpl	.-8      	; 0x466 <GPIO_u8read_PIN+0xac>
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	82 23       	and	r24, r18
     472:	93 23       	and	r25, r19
     474:	02 c0       	rjmp	.+4      	; 0x47a <GPIO_u8read_PIN+0xc0>
     476:	95 95       	asr	r25
     478:	87 95       	ror	r24
     47a:	6a 95       	dec	r22
     47c:	e2 f7       	brpl	.-8      	; 0x476 <GPIO_u8read_PIN+0xbc>
			break;
     47e:	08 95       	ret
		default: break;
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
     480:	80 e0       	ldi	r24, 0x00	; 0
			x= READ_BIT(myPIND, pinnum);
			break;
		default: break;
	}
	return x;
}
     482:	08 95       	ret

00000484 <GPIO_vtoggle_PIN>:

void GPIO_vtoggle_PIN(u8 portnum, u8 pinnum){
	switch (portnum){
     484:	84 34       	cpi	r24, 0x44	; 68
     486:	09 f4       	brne	.+2      	; 0x48a <GPIO_vtoggle_PIN+0x6>
     488:	3d c0       	rjmp	.+122    	; 0x504 <GPIO_vtoggle_PIN+0x80>
     48a:	85 34       	cpi	r24, 0x45	; 69
     48c:	40 f4       	brcc	.+16     	; 0x49e <GPIO_vtoggle_PIN+0x1a>
     48e:	82 34       	cpi	r24, 0x42	; 66
     490:	f9 f0       	breq	.+62     	; 0x4d0 <GPIO_vtoggle_PIN+0x4c>
     492:	83 34       	cpi	r24, 0x43	; 67
     494:	50 f5       	brcc	.+84     	; 0x4ea <GPIO_vtoggle_PIN+0x66>
     496:	81 34       	cpi	r24, 0x41	; 65
     498:	09 f0       	breq	.+2      	; 0x49c <GPIO_vtoggle_PIN+0x18>
     49a:	40 c0       	rjmp	.+128    	; 0x51c <GPIO_vtoggle_PIN+0x98>
     49c:	0c c0       	rjmp	.+24     	; 0x4b6 <GPIO_vtoggle_PIN+0x32>
     49e:	82 36       	cpi	r24, 0x62	; 98
     4a0:	b9 f0       	breq	.+46     	; 0x4d0 <GPIO_vtoggle_PIN+0x4c>
     4a2:	83 36       	cpi	r24, 0x63	; 99
     4a4:	18 f4       	brcc	.+6      	; 0x4ac <GPIO_vtoggle_PIN+0x28>
     4a6:	81 36       	cpi	r24, 0x61	; 97
     4a8:	c9 f5       	brne	.+114    	; 0x51c <GPIO_vtoggle_PIN+0x98>
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <GPIO_vtoggle_PIN+0x32>
     4ac:	83 36       	cpi	r24, 0x63	; 99
     4ae:	e9 f0       	breq	.+58     	; 0x4ea <GPIO_vtoggle_PIN+0x66>
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	a1 f5       	brne	.+104    	; 0x51c <GPIO_vtoggle_PIN+0x98>
     4b4:	27 c0       	rjmp	.+78     	; 0x504 <GPIO_vtoggle_PIN+0x80>
		case 'a' :
		case 'A' :
			TOGGLE_BIT(myPORTA, pinnum);
     4b6:	2b b3       	in	r18, 0x1b	; 27
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ac 01       	movw	r20, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <GPIO_vtoggle_PIN+0x40>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <GPIO_vtoggle_PIN+0x3c>
     4c8:	ba 01       	movw	r22, r20
     4ca:	62 27       	eor	r22, r18
     4cc:	6b bb       	out	0x1b, r22	; 27
			break;
     4ce:	08 95       	ret
		case 'b' :
		case 'B' :
			TOGGLE_BIT(myPORTB, pinnum);
     4d0:	28 b3       	in	r18, 0x18	; 24
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	ac 01       	movw	r20, r24
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <GPIO_vtoggle_PIN+0x5a>
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	6a 95       	dec	r22
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <GPIO_vtoggle_PIN+0x56>
     4e2:	ba 01       	movw	r22, r20
     4e4:	62 27       	eor	r22, r18
     4e6:	68 bb       	out	0x18, r22	; 24
			break;
     4e8:	08 95       	ret
		case 'c' :
		case 'C' :
			TOGGLE_BIT(myPORTC, pinnum);
     4ea:	25 b3       	in	r18, 0x15	; 21
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	ac 01       	movw	r20, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <GPIO_vtoggle_PIN+0x74>
     4f4:	44 0f       	add	r20, r20
     4f6:	55 1f       	adc	r21, r21
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <GPIO_vtoggle_PIN+0x70>
     4fc:	ba 01       	movw	r22, r20
     4fe:	62 27       	eor	r22, r18
     500:	65 bb       	out	0x15, r22	; 21
			break;
     502:	08 95       	ret
		case 'd' :
		case 'D' :
			TOGGLE_BIT(myPORTD, pinnum);
     504:	22 b3       	in	r18, 0x12	; 18
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	ac 01       	movw	r20, r24
     50c:	02 c0       	rjmp	.+4      	; 0x512 <GPIO_vtoggle_PIN+0x8e>
     50e:	44 0f       	add	r20, r20
     510:	55 1f       	adc	r21, r21
     512:	6a 95       	dec	r22
     514:	e2 f7       	brpl	.-8      	; 0x50e <GPIO_vtoggle_PIN+0x8a>
     516:	ba 01       	movw	r22, r20
     518:	62 27       	eor	r22, r18
     51a:	62 bb       	out	0x12, r22	; 18
     51c:	08 95       	ret

0000051e <GPIO_vconnectpullup>:
		default: break;
	}
}

void GPIO_vconnectpullup( u8 port, u8 pin , u8 connect_pullup ){
	switch (port){
     51e:	84 34       	cpi	r24, 0x44	; 68
     520:	09 f4       	brne	.+2      	; 0x524 <GPIO_vconnectpullup+0x6>
     522:	7a c0       	rjmp	.+244    	; 0x618 <GPIO_vconnectpullup+0xfa>
     524:	85 34       	cpi	r24, 0x45	; 69
     526:	48 f4       	brcc	.+18     	; 0x53a <GPIO_vconnectpullup+0x1c>
     528:	82 34       	cpi	r24, 0x42	; 66
     52a:	b1 f1       	breq	.+108    	; 0x598 <GPIO_vconnectpullup+0x7a>
     52c:	83 34       	cpi	r24, 0x43	; 67
     52e:	08 f0       	brcs	.+2      	; 0x532 <GPIO_vconnectpullup+0x14>
     530:	53 c0       	rjmp	.+166    	; 0x5d8 <GPIO_vconnectpullup+0xba>
     532:	81 34       	cpi	r24, 0x41	; 65
     534:	09 f0       	breq	.+2      	; 0x538 <GPIO_vconnectpullup+0x1a>
     536:	8f c0       	rjmp	.+286    	; 0x656 <GPIO_vconnectpullup+0x138>
     538:	0f c0       	rjmp	.+30     	; 0x558 <GPIO_vconnectpullup+0x3a>
     53a:	82 36       	cpi	r24, 0x62	; 98
     53c:	69 f1       	breq	.+90     	; 0x598 <GPIO_vconnectpullup+0x7a>
     53e:	83 36       	cpi	r24, 0x63	; 99
     540:	20 f4       	brcc	.+8      	; 0x54a <GPIO_vconnectpullup+0x2c>
     542:	81 36       	cpi	r24, 0x61	; 97
     544:	09 f0       	breq	.+2      	; 0x548 <GPIO_vconnectpullup+0x2a>
     546:	87 c0       	rjmp	.+270    	; 0x656 <GPIO_vconnectpullup+0x138>
     548:	07 c0       	rjmp	.+14     	; 0x558 <GPIO_vconnectpullup+0x3a>
     54a:	83 36       	cpi	r24, 0x63	; 99
     54c:	09 f4       	brne	.+2      	; 0x550 <GPIO_vconnectpullup+0x32>
     54e:	44 c0       	rjmp	.+136    	; 0x5d8 <GPIO_vconnectpullup+0xba>
     550:	84 36       	cpi	r24, 0x64	; 100
     552:	09 f0       	breq	.+2      	; 0x556 <GPIO_vconnectpullup+0x38>
     554:	80 c0       	rjmp	.+256    	; 0x656 <GPIO_vconnectpullup+0x138>
     556:	60 c0       	rjmp	.+192    	; 0x618 <GPIO_vconnectpullup+0xfa>
		case 'A' :
		case 'a' :
			if (Connect==connect_pullup){
     558:	41 30       	cpi	r20, 0x01	; 1
     55a:	81 f4       	brne	.+32     	; 0x57c <GPIO_vconnectpullup+0x5e>
				SET_BIT(myPORTA,pin);
     55c:	2b b3       	in	r18, 0x1b	; 27
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	ac 01       	movw	r20, r24
     564:	02 c0       	rjmp	.+4      	; 0x56a <GPIO_vconnectpullup+0x4c>
     566:	44 0f       	add	r20, r20
     568:	55 1f       	adc	r21, r21
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <GPIO_vconnectpullup+0x48>
     56e:	ba 01       	movw	r22, r20
     570:	62 2b       	or	r22, r18
     572:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
     574:	80 b7       	in	r24, 0x30	; 48
     576:	8b 7f       	andi	r24, 0xFB	; 251
     578:	80 bf       	out	0x30, r24	; 48
     57a:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pin);
     57c:	2b b3       	in	r18, 0x1b	; 27
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	ac 01       	movw	r20, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_vconnectpullup+0x6c>
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	6a 95       	dec	r22
     58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_vconnectpullup+0x68>
     58e:	ba 01       	movw	r22, r20
     590:	60 95       	com	r22
     592:	62 23       	and	r22, r18
     594:	6b bb       	out	0x1b, r22	; 27
     596:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect==connect_pullup){
     598:	41 30       	cpi	r20, 0x01	; 1
     59a:	81 f4       	brne	.+32     	; 0x5bc <GPIO_vconnectpullup+0x9e>
				SET_BIT(myPORTB,pin);
     59c:	28 b3       	in	r18, 0x18	; 24
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	ac 01       	movw	r20, r24
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <GPIO_vconnectpullup+0x8c>
     5a6:	44 0f       	add	r20, r20
     5a8:	55 1f       	adc	r21, r21
     5aa:	6a 95       	dec	r22
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <GPIO_vconnectpullup+0x88>
     5ae:	ba 01       	movw	r22, r20
     5b0:	62 2b       	or	r22, r18
     5b2:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
     5b4:	80 b7       	in	r24, 0x30	; 48
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
     5b8:	80 bf       	out	0x30, r24	; 48
     5ba:	08 95       	ret
			}else{
				CLR_BIT(myPORTB,pin);
     5bc:	28 b3       	in	r18, 0x18	; 24
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	ac 01       	movw	r20, r24
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <GPIO_vconnectpullup+0xac>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	6a 95       	dec	r22
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <GPIO_vconnectpullup+0xa8>
     5ce:	ba 01       	movw	r22, r20
     5d0:	60 95       	com	r22
     5d2:	62 23       	and	r22, r18
     5d4:	68 bb       	out	0x18, r22	; 24
     5d6:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect==connect_pullup){
     5d8:	41 30       	cpi	r20, 0x01	; 1
     5da:	81 f4       	brne	.+32     	; 0x5fc <GPIO_vconnectpullup+0xde>
				SET_BIT(myPORTC,pin);
     5dc:	25 b3       	in	r18, 0x15	; 21
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	ac 01       	movw	r20, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <GPIO_vconnectpullup+0xcc>
     5e6:	44 0f       	add	r20, r20
     5e8:	55 1f       	adc	r21, r21
     5ea:	6a 95       	dec	r22
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <GPIO_vconnectpullup+0xc8>
     5ee:	ba 01       	movw	r22, r20
     5f0:	62 2b       	or	r22, r18
     5f2:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
     5f4:	80 b7       	in	r24, 0x30	; 48
     5f6:	8b 7f       	andi	r24, 0xFB	; 251
     5f8:	80 bf       	out	0x30, r24	; 48
     5fa:	08 95       	ret
			}else{
				CLR_BIT(myPORTC,pin);
     5fc:	25 b3       	in	r18, 0x15	; 21
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	ac 01       	movw	r20, r24
     604:	02 c0       	rjmp	.+4      	; 0x60a <GPIO_vconnectpullup+0xec>
     606:	44 0f       	add	r20, r20
     608:	55 1f       	adc	r21, r21
     60a:	6a 95       	dec	r22
     60c:	e2 f7       	brpl	.-8      	; 0x606 <GPIO_vconnectpullup+0xe8>
     60e:	ba 01       	movw	r22, r20
     610:	60 95       	com	r22
     612:	62 23       	and	r22, r18
     614:	65 bb       	out	0x15, r22	; 21
     616:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect==connect_pullup){
     618:	41 30       	cpi	r20, 0x01	; 1
     61a:	81 f4       	brne	.+32     	; 0x63c <GPIO_vconnectpullup+0x11e>
				SET_BIT(myPORTD,pin);
     61c:	22 b3       	in	r18, 0x12	; 18
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	ac 01       	movw	r20, r24
     624:	02 c0       	rjmp	.+4      	; 0x62a <GPIO_vconnectpullup+0x10c>
     626:	44 0f       	add	r20, r20
     628:	55 1f       	adc	r21, r21
     62a:	6a 95       	dec	r22
     62c:	e2 f7       	brpl	.-8      	; 0x626 <GPIO_vconnectpullup+0x108>
     62e:	ba 01       	movw	r22, r20
     630:	62 2b       	or	r22, r18
     632:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
     634:	80 b7       	in	r24, 0x30	; 48
     636:	8b 7f       	andi	r24, 0xFB	; 251
     638:	80 bf       	out	0x30, r24	; 48
     63a:	08 95       	ret
			}else{
				CLR_BIT(myPORTD,pin);
     63c:	22 b3       	in	r18, 0x12	; 18
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	ac 01       	movw	r20, r24
     644:	02 c0       	rjmp	.+4      	; 0x64a <GPIO_vconnectpullup+0x12c>
     646:	44 0f       	add	r20, r20
     648:	55 1f       	adc	r21, r21
     64a:	6a 95       	dec	r22
     64c:	e2 f7       	brpl	.-8      	; 0x646 <GPIO_vconnectpullup+0x128>
     64e:	ba 01       	movw	r22, r20
     650:	60 95       	com	r22
     652:	62 23       	and	r22, r18
     654:	62 bb       	out	0x12, r22	; 18
     656:	08 95       	ret

00000658 <GPIO_vset_PORT_DIR>:
}

//==================================PORT=============================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
     658:	84 34       	cpi	r24, 0x44	; 68
     65a:	d9 f0       	breq	.+54     	; 0x692 <GPIO_vset_PORT_DIR+0x3a>
     65c:	85 34       	cpi	r24, 0x45	; 69
     65e:	38 f4       	brcc	.+14     	; 0x66e <GPIO_vset_PORT_DIR+0x16>
     660:	82 34       	cpi	r24, 0x42	; 66
     662:	99 f0       	breq	.+38     	; 0x68a <GPIO_vset_PORT_DIR+0x32>
     664:	83 34       	cpi	r24, 0x43	; 67
     666:	98 f4       	brcc	.+38     	; 0x68e <GPIO_vset_PORT_DIR+0x36>
     668:	81 34       	cpi	r24, 0x41	; 65
     66a:	a1 f4       	brne	.+40     	; 0x694 <GPIO_vset_PORT_DIR+0x3c>
     66c:	0c c0       	rjmp	.+24     	; 0x686 <GPIO_vset_PORT_DIR+0x2e>
     66e:	82 36       	cpi	r24, 0x62	; 98
     670:	61 f0       	breq	.+24     	; 0x68a <GPIO_vset_PORT_DIR+0x32>
     672:	83 36       	cpi	r24, 0x63	; 99
     674:	18 f4       	brcc	.+6      	; 0x67c <GPIO_vset_PORT_DIR+0x24>
     676:	81 36       	cpi	r24, 0x61	; 97
     678:	69 f4       	brne	.+26     	; 0x694 <GPIO_vset_PORT_DIR+0x3c>
     67a:	05 c0       	rjmp	.+10     	; 0x686 <GPIO_vset_PORT_DIR+0x2e>
     67c:	83 36       	cpi	r24, 0x63	; 99
     67e:	39 f0       	breq	.+14     	; 0x68e <GPIO_vset_PORT_DIR+0x36>
     680:	84 36       	cpi	r24, 0x64	; 100
     682:	41 f4       	brne	.+16     	; 0x694 <GPIO_vset_PORT_DIR+0x3c>
     684:	06 c0       	rjmp	.+12     	; 0x692 <GPIO_vset_PORT_DIR+0x3a>
		case 'A' :
		case 'a' :
			myDDRA = dir;
     686:	6a bb       	out	0x1a, r22	; 26
			break;
     688:	08 95       	ret
		case 'b' :
		case 'B' :
			myDDRB = dir;
     68a:	67 bb       	out	0x17, r22	; 23
			break;
     68c:	08 95       	ret
		case 'c' :
		case 'C' :
			myDDRC = dir;
     68e:	64 bb       	out	0x14, r22	; 20
			break;
     690:	08 95       	ret
		case 'd' :
		case 'D' :
			myDDRD = dir;
     692:	61 bb       	out	0x11, r22	; 17
     694:	08 95       	ret

00000696 <GPIO_vwrite_PORT>:
		default: break;
	}
}

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
     696:	84 34       	cpi	r24, 0x44	; 68
     698:	d9 f0       	breq	.+54     	; 0x6d0 <GPIO_vwrite_PORT+0x3a>
     69a:	85 34       	cpi	r24, 0x45	; 69
     69c:	38 f4       	brcc	.+14     	; 0x6ac <GPIO_vwrite_PORT+0x16>
     69e:	82 34       	cpi	r24, 0x42	; 66
     6a0:	99 f0       	breq	.+38     	; 0x6c8 <GPIO_vwrite_PORT+0x32>
     6a2:	83 34       	cpi	r24, 0x43	; 67
     6a4:	98 f4       	brcc	.+38     	; 0x6cc <GPIO_vwrite_PORT+0x36>
     6a6:	81 34       	cpi	r24, 0x41	; 65
     6a8:	a1 f4       	brne	.+40     	; 0x6d2 <GPIO_vwrite_PORT+0x3c>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <GPIO_vwrite_PORT+0x2e>
     6ac:	82 36       	cpi	r24, 0x62	; 98
     6ae:	61 f0       	breq	.+24     	; 0x6c8 <GPIO_vwrite_PORT+0x32>
     6b0:	83 36       	cpi	r24, 0x63	; 99
     6b2:	18 f4       	brcc	.+6      	; 0x6ba <GPIO_vwrite_PORT+0x24>
     6b4:	81 36       	cpi	r24, 0x61	; 97
     6b6:	69 f4       	brne	.+26     	; 0x6d2 <GPIO_vwrite_PORT+0x3c>
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <GPIO_vwrite_PORT+0x2e>
     6ba:	83 36       	cpi	r24, 0x63	; 99
     6bc:	39 f0       	breq	.+14     	; 0x6cc <GPIO_vwrite_PORT+0x36>
     6be:	84 36       	cpi	r24, 0x64	; 100
     6c0:	41 f4       	brne	.+16     	; 0x6d2 <GPIO_vwrite_PORT+0x3c>
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <GPIO_vwrite_PORT+0x3a>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
     6c4:	6b bb       	out	0x1b, r22	; 27
			break;
     6c6:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
     6c8:	68 bb       	out	0x18, r22	; 24
			break;
     6ca:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
     6cc:	65 bb       	out	0x15, r22	; 21
			break;
     6ce:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
     6d0:	62 bb       	out	0x12, r22	; 18
     6d2:	08 95       	ret

000006d4 <GPIO_vtoggle_PORT>:
		default: break;
	}
}

void GPIO_vtoggle_PORT(u8 portnum){
	switch (portnum){
     6d4:	84 34       	cpi	r24, 0x44	; 68
     6d6:	09 f1       	breq	.+66     	; 0x71a <GPIO_vtoggle_PORT+0x46>
     6d8:	85 34       	cpi	r24, 0x45	; 69
     6da:	38 f4       	brcc	.+14     	; 0x6ea <GPIO_vtoggle_PORT+0x16>
     6dc:	82 34       	cpi	r24, 0x42	; 66
     6de:	a9 f0       	breq	.+42     	; 0x70a <GPIO_vtoggle_PORT+0x36>
     6e0:	83 34       	cpi	r24, 0x43	; 67
     6e2:	b8 f4       	brcc	.+46     	; 0x712 <GPIO_vtoggle_PORT+0x3e>
     6e4:	81 34       	cpi	r24, 0x41	; 65
     6e6:	e1 f4       	brne	.+56     	; 0x720 <GPIO_vtoggle_PORT+0x4c>
     6e8:	0c c0       	rjmp	.+24     	; 0x702 <GPIO_vtoggle_PORT+0x2e>
     6ea:	82 36       	cpi	r24, 0x62	; 98
     6ec:	71 f0       	breq	.+28     	; 0x70a <GPIO_vtoggle_PORT+0x36>
     6ee:	83 36       	cpi	r24, 0x63	; 99
     6f0:	18 f4       	brcc	.+6      	; 0x6f8 <GPIO_vtoggle_PORT+0x24>
     6f2:	81 36       	cpi	r24, 0x61	; 97
     6f4:	a9 f4       	brne	.+42     	; 0x720 <GPIO_vtoggle_PORT+0x4c>
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <GPIO_vtoggle_PORT+0x2e>
     6f8:	83 36       	cpi	r24, 0x63	; 99
     6fa:	59 f0       	breq	.+22     	; 0x712 <GPIO_vtoggle_PORT+0x3e>
     6fc:	84 36       	cpi	r24, 0x64	; 100
     6fe:	81 f4       	brne	.+32     	; 0x720 <GPIO_vtoggle_PORT+0x4c>
     700:	0c c0       	rjmp	.+24     	; 0x71a <GPIO_vtoggle_PORT+0x46>
		case 'A' :
		case 'a' :
			myPORTA = ~myPORTA;
     702:	8b b3       	in	r24, 0x1b	; 27
     704:	80 95       	com	r24
     706:	8b bb       	out	0x1b, r24	; 27
			break;
     708:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = ~myPORTB;
     70a:	88 b3       	in	r24, 0x18	; 24
     70c:	80 95       	com	r24
     70e:	88 bb       	out	0x18, r24	; 24
			break;
     710:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = ~myPORTC;
     712:	85 b3       	in	r24, 0x15	; 21
     714:	80 95       	com	r24
     716:	85 bb       	out	0x15, r24	; 21
			break;
     718:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = ~myPORTD;
     71a:	82 b3       	in	r24, 0x12	; 18
     71c:	80 95       	com	r24
     71e:	82 bb       	out	0x12, r24	; 18
     720:	08 95       	ret

00000722 <GPIO_read_PORT>:
			break;
		default: break;
	}
}
u8 GPIO_read_PORT(u8 portnum){
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	0f 92       	push	r0
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	volatile u8 val=0;
     72c:	19 82       	std	Y+1, r1	; 0x01
	switch (portnum){
     72e:	84 34       	cpi	r24, 0x44	; 68
     730:	f1 f0       	breq	.+60     	; 0x76e <GPIO_read_PORT+0x4c>
     732:	85 34       	cpi	r24, 0x45	; 69
     734:	38 f4       	brcc	.+14     	; 0x744 <GPIO_read_PORT+0x22>
     736:	82 34       	cpi	r24, 0x42	; 66
     738:	a1 f0       	breq	.+40     	; 0x762 <GPIO_read_PORT+0x40>
     73a:	83 34       	cpi	r24, 0x43	; 67
     73c:	a8 f4       	brcc	.+42     	; 0x768 <GPIO_read_PORT+0x46>
     73e:	81 34       	cpi	r24, 0x41	; 65
     740:	c1 f4       	brne	.+48     	; 0x772 <GPIO_read_PORT+0x50>
     742:	0c c0       	rjmp	.+24     	; 0x75c <GPIO_read_PORT+0x3a>
     744:	82 36       	cpi	r24, 0x62	; 98
     746:	69 f0       	breq	.+26     	; 0x762 <GPIO_read_PORT+0x40>
     748:	83 36       	cpi	r24, 0x63	; 99
     74a:	18 f4       	brcc	.+6      	; 0x752 <GPIO_read_PORT+0x30>
     74c:	81 36       	cpi	r24, 0x61	; 97
     74e:	89 f4       	brne	.+34     	; 0x772 <GPIO_read_PORT+0x50>
     750:	05 c0       	rjmp	.+10     	; 0x75c <GPIO_read_PORT+0x3a>
     752:	83 36       	cpi	r24, 0x63	; 99
     754:	49 f0       	breq	.+18     	; 0x768 <GPIO_read_PORT+0x46>
     756:	84 36       	cpi	r24, 0x64	; 100
     758:	61 f4       	brne	.+24     	; 0x772 <GPIO_read_PORT+0x50>
     75a:	09 c0       	rjmp	.+18     	; 0x76e <GPIO_read_PORT+0x4c>
		case 'a' :
		case 'A' :
			val = myPINA;
     75c:	89 b3       	in	r24, 0x19	; 25
     75e:	89 83       	std	Y+1, r24	; 0x01
			break;
     760:	08 c0       	rjmp	.+16     	; 0x772 <GPIO_read_PORT+0x50>
		case 'b' :
		case 'B' :
			val = myPINB;
     762:	86 b3       	in	r24, 0x16	; 22
     764:	89 83       	std	Y+1, r24	; 0x01
			break;
     766:	05 c0       	rjmp	.+10     	; 0x772 <GPIO_read_PORT+0x50>
		case 'c' :
		case 'C' :
			val = myPINC;
     768:	83 b3       	in	r24, 0x13	; 19
     76a:	89 83       	std	Y+1, r24	; 0x01
			break;
     76c:	02 c0       	rjmp	.+4      	; 0x772 <GPIO_read_PORT+0x50>
		case 'd' :
		case 'D' :
			val = myPIND;
     76e:	80 b3       	in	r24, 0x10	; 16
     770:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
}
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <GPIO_High_Nibble_vset_dir>:
//=====================================================================================

//==================================Nibble=============================================

//==================================High Nibble========================================
void GPIO_High_Nibble_vset_dir(u8 port,u8 dir){
     77a:	cf 93       	push	r28
     77c:	c8 2f       	mov	r28, r24
	if (1==dir){
     77e:	61 30       	cpi	r22, 0x01	; 1
     780:	a1 f4       	brne	.+40     	; 0x7aa <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
     782:	64 e0       	ldi	r22, 0x04	; 4
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
     78a:	8c 2f       	mov	r24, r28
     78c:	65 e0       	ldi	r22, 0x05	; 5
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
     794:	8c 2f       	mov	r24, r28
     796:	66 e0       	ldi	r22, 0x06	; 6
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
     79e:	8c 2f       	mov	r24, r28
     7a0:	67 e0       	ldi	r22, 0x07	; 7
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
     7aa:	64 e0       	ldi	r22, 0x04	; 4
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
     7b2:	8c 2f       	mov	r24, r28
     7b4:	65 e0       	ldi	r22, 0x05	; 5
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
     7bc:	8c 2f       	mov	r24, r28
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
     7c6:	8c 2f       	mov	r24, r28
     7c8:	67 e0       	ldi	r22, 0x07	; 7
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
	}
	
}
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <GPIO_High_Nibble_vwrite>:

void GPIO_High_Nibble_vwrite( u8 port , u8 value ){
	value <<= 4;   
     7d4:	62 95       	swap	r22
     7d6:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){    
     7d8:	84 34       	cpi	r24, 0x44	; 68
     7da:	51 f1       	breq	.+84     	; 0x830 <GPIO_High_Nibble_vwrite+0x5c>
     7dc:	85 34       	cpi	r24, 0x45	; 69
     7de:	38 f4       	brcc	.+14     	; 0x7ee <GPIO_High_Nibble_vwrite+0x1a>
     7e0:	82 34       	cpi	r24, 0x42	; 66
     7e2:	c1 f0       	breq	.+48     	; 0x814 <GPIO_High_Nibble_vwrite+0x40>
     7e4:	83 34       	cpi	r24, 0x43	; 67
     7e6:	e8 f4       	brcc	.+58     	; 0x822 <GPIO_High_Nibble_vwrite+0x4e>
     7e8:	81 34       	cpi	r24, 0x41	; 65
     7ea:	41 f5       	brne	.+80     	; 0x83c <GPIO_High_Nibble_vwrite+0x68>
     7ec:	0c c0       	rjmp	.+24     	; 0x806 <GPIO_High_Nibble_vwrite+0x32>
     7ee:	82 36       	cpi	r24, 0x62	; 98
     7f0:	89 f0       	breq	.+34     	; 0x814 <GPIO_High_Nibble_vwrite+0x40>
     7f2:	83 36       	cpi	r24, 0x63	; 99
     7f4:	18 f4       	brcc	.+6      	; 0x7fc <GPIO_High_Nibble_vwrite+0x28>
     7f6:	81 36       	cpi	r24, 0x61	; 97
     7f8:	09 f5       	brne	.+66     	; 0x83c <GPIO_High_Nibble_vwrite+0x68>
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <GPIO_High_Nibble_vwrite+0x32>
     7fc:	83 36       	cpi	r24, 0x63	; 99
     7fe:	89 f0       	breq	.+34     	; 0x822 <GPIO_High_Nibble_vwrite+0x4e>
     800:	84 36       	cpi	r24, 0x64	; 100
     802:	e1 f4       	brne	.+56     	; 0x83c <GPIO_High_Nibble_vwrite+0x68>
     804:	15 c0       	rjmp	.+42     	; 0x830 <GPIO_High_Nibble_vwrite+0x5c>
		case 'A':
		case 'a':			
			myPORTA &=0x0f; 
     806:	8b b3       	in	r24, 0x1b	; 27
     808:	8f 70       	andi	r24, 0x0F	; 15
     80a:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     80c:	8b b3       	in	r24, 0x1b	; 27
     80e:	68 2b       	or	r22, r24
     810:	6b bb       	out	0x1b, r22	; 27
			break;				
     812:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0x0f;
     814:	88 b3       	in	r24, 0x18	; 24
     816:	8f 70       	andi	r24, 0x0F	; 15
     818:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     81a:	88 b3       	in	r24, 0x18	; 24
     81c:	68 2b       	or	r22, r24
     81e:	68 bb       	out	0x18, r22	; 24
			break;
     820:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0x0f;
     822:	85 b3       	in	r24, 0x15	; 21
     824:	8f 70       	andi	r24, 0x0F	; 15
     826:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     828:	85 b3       	in	r24, 0x15	; 21
     82a:	68 2b       	or	r22, r24
     82c:	65 bb       	out	0x15, r22	; 21
			break;
     82e:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0x0f;
     830:	82 b3       	in	r24, 0x12	; 18
     832:	8f 70       	andi	r24, 0x0F	; 15
     834:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     836:	82 b3       	in	r24, 0x12	; 18
     838:	68 2b       	or	r22, r24
     83a:	62 bb       	out	0x12, r22	; 18
     83c:	08 95       	ret

0000083e <GPIO_Low_Nibble_vset_dir>:
		default: break;
	}
}

//==================================Low Nibble========================================
void GPIO_Low_Nibble_vset_dir(u8 port,u8 dir){
     83e:	cf 93       	push	r28
     840:	c8 2f       	mov	r28, r24
	if (1==dir){
     842:	61 30       	cpi	r22, 0x01	; 1
     844:	a1 f4       	brne	.+40     	; 0x86e <__stack+0xf>
		GPIO_vsetPIN_DIR(port,0,1);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
     84e:	8c 2f       	mov	r24, r28
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
     858:	8c 2f       	mov	r24, r28
     85a:	62 e0       	ldi	r22, 0x02	; 2
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
     862:	8c 2f       	mov	r24, r28
     864:	63 e0       	ldi	r22, 0x03	; 3
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
     86c:	13 c0       	rjmp	.+38     	; 0x894 <__stack+0x35>
	}else{
		GPIO_vsetPIN_DIR(port,0,0);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
     876:	8c 2f       	mov	r24, r28
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
     880:	8c 2f       	mov	r24, r28
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
     88a:	8c 2f       	mov	r24, r28
     88c:	63 e0       	ldi	r22, 0x03	; 3
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
	}
}
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <GPIO_Low_Nibble_vwrite>:

void GPIO_Low_Nibble_vwrite( u8 port , u8 value ){
	value &=0x0f;
     898:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
     89a:	84 34       	cpi	r24, 0x44	; 68
     89c:	51 f1       	breq	.+84     	; 0x8f2 <GPIO_Low_Nibble_vwrite+0x5a>
     89e:	85 34       	cpi	r24, 0x45	; 69
     8a0:	38 f4       	brcc	.+14     	; 0x8b0 <GPIO_Low_Nibble_vwrite+0x18>
     8a2:	82 34       	cpi	r24, 0x42	; 66
     8a4:	c1 f0       	breq	.+48     	; 0x8d6 <GPIO_Low_Nibble_vwrite+0x3e>
     8a6:	83 34       	cpi	r24, 0x43	; 67
     8a8:	e8 f4       	brcc	.+58     	; 0x8e4 <GPIO_Low_Nibble_vwrite+0x4c>
     8aa:	81 34       	cpi	r24, 0x41	; 65
     8ac:	41 f5       	brne	.+80     	; 0x8fe <GPIO_Low_Nibble_vwrite+0x66>
     8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <GPIO_Low_Nibble_vwrite+0x30>
     8b0:	82 36       	cpi	r24, 0x62	; 98
     8b2:	89 f0       	breq	.+34     	; 0x8d6 <GPIO_Low_Nibble_vwrite+0x3e>
     8b4:	83 36       	cpi	r24, 0x63	; 99
     8b6:	18 f4       	brcc	.+6      	; 0x8be <GPIO_Low_Nibble_vwrite+0x26>
     8b8:	81 36       	cpi	r24, 0x61	; 97
     8ba:	09 f5       	brne	.+66     	; 0x8fe <GPIO_Low_Nibble_vwrite+0x66>
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <GPIO_Low_Nibble_vwrite+0x30>
     8be:	83 36       	cpi	r24, 0x63	; 99
     8c0:	89 f0       	breq	.+34     	; 0x8e4 <GPIO_Low_Nibble_vwrite+0x4c>
     8c2:	84 36       	cpi	r24, 0x64	; 100
     8c4:	e1 f4       	brne	.+56     	; 0x8fe <GPIO_Low_Nibble_vwrite+0x66>
     8c6:	15 c0       	rjmp	.+42     	; 0x8f2 <GPIO_Low_Nibble_vwrite+0x5a>
		case 'A':
		case 'a':
			myPORTA &=0xf0;
     8c8:	8b b3       	in	r24, 0x1b	; 27
     8ca:	80 7f       	andi	r24, 0xF0	; 240
     8cc:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     8ce:	8b b3       	in	r24, 0x1b	; 27
     8d0:	68 2b       	or	r22, r24
     8d2:	6b bb       	out	0x1b, r22	; 27
			break;
     8d4:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0xf0;
     8d6:	88 b3       	in	r24, 0x18	; 24
     8d8:	80 7f       	andi	r24, 0xF0	; 240
     8da:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     8dc:	88 b3       	in	r24, 0x18	; 24
     8de:	68 2b       	or	r22, r24
     8e0:	68 bb       	out	0x18, r22	; 24
			break;
     8e2:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0xf0;
     8e4:	85 b3       	in	r24, 0x15	; 21
     8e6:	80 7f       	andi	r24, 0xF0	; 240
     8e8:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     8ea:	85 b3       	in	r24, 0x15	; 21
     8ec:	68 2b       	or	r22, r24
     8ee:	65 bb       	out	0x15, r22	; 21
			break;
     8f0:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0xf0;
     8f2:	82 b3       	in	r24, 0x12	; 18
     8f4:	80 7f       	andi	r24, 0xF0	; 240
     8f6:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     8f8:	82 b3       	in	r24, 0x12	; 18
     8fa:	68 2b       	or	r22, r24
     8fc:	62 bb       	out	0x12, r22	; 18
     8fe:	08 95       	ret

00000900 <keypad_vInit>:
 * Keypad_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "Keypad_ECU.h"
void keypad_vInit(u8 port){
     900:	cf 93       	push	r28
     902:	c8 2f       	mov	r28, r24
										
		GPIO_vset_PORT_DIR(port,0x0f);  
     904:	6f e0       	ldi	r22, 0x0F	; 15
     906:	0e 94 2c 03 	call	0x658	; 0x658 <GPIO_vset_PORT_DIR>
		GPIO_vconnectpullup(port,4,1);
     90a:	8c 2f       	mov	r24, r28
     90c:	64 e0       	ldi	r22, 0x04	; 4
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	0e 94 8f 02 	call	0x51e	; 0x51e <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,5,1);
     914:	8c 2f       	mov	r24, r28
     916:	65 e0       	ldi	r22, 0x05	; 5
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	0e 94 8f 02 	call	0x51e	; 0x51e <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,6,1);
     91e:	8c 2f       	mov	r24, r28
     920:	66 e0       	ldi	r22, 0x06	; 6
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	0e 94 8f 02 	call	0x51e	; 0x51e <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,7,1);
     928:	8c 2f       	mov	r24, r28
     92a:	67 e0       	ldi	r22, 0x07	; 7
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	0e 94 8f 02 	call	0x51e	; 0x51e <GPIO_vconnectpullup>
	
}
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <keypad_u8check_press>:

u8 keypad_u8check_press(u8 port){
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	60 97       	sbiw	r28, 0x10	; 16
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	08 2f       	mov	r16, r24
	//u8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
     952:	de 01       	movw	r26, r28
     954:	11 96       	adiw	r26, 0x01	; 1
     956:	e0 e6       	ldi	r30, 0x60	; 96
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 e1       	ldi	r24, 0x10	; 16
     95c:	01 90       	ld	r0, Z+
     95e:	0d 92       	st	X+, r0
     960:	81 50       	subi	r24, 0x01	; 1
     962:	e1 f7       	brne	.-8      	; 0x95c <keypad_u8check_press+0x26>
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){									
     964:	ff 24       	eor	r15, r15
		GPIO_vwrite_PIN(port,0,1);								
     966:	80 2f       	mov	r24, r16
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,1,1);						
     970:	80 2f       	mov	r24, r16
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,2,1);						
     97a:	80 2f       	mov	r24, r16
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	41 e0       	ldi	r20, 0x01	; 1
     980:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,3,1);
     984:	80 2f       	mov	r24, r16
     986:	63 e0       	ldi	r22, 0x03	; 3
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,row,0);
     98e:	80 2f       	mov	r24, r16
     990:	6f 2d       	mov	r22, r15
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		
			for (coloumn=0; coloumn < 4; coloumn++){
     998:	10 e0       	ldi	r17, 0x00	; 0
				x=GPIO_u8read_PIN(port,(coloumn+4));
     99a:	61 2f       	mov	r22, r17
     99c:	6c 5f       	subi	r22, 0xFC	; 252
     99e:	80 2f       	mov	r24, r16
     9a0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GPIO_u8read_PIN>
				if(0==x){
     9a4:	88 23       	and	r24, r24
     9a6:	61 f4       	brne	.+24     	; 0x9c0 <keypad_u8check_press+0x8a>
					returnval = arr[row][coloumn];
     9a8:	ef 2d       	mov	r30, r15
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	e1 0f       	add	r30, r17
     9b6:	f1 1d       	adc	r31, r1
     9b8:	ec 0f       	add	r30, r28
     9ba:	fd 1f       	adc	r31, r29
     9bc:	81 81       	ldd	r24, Z+1	; 0x01
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <keypad_u8check_press+0x92>
		GPIO_vwrite_PIN(port,1,1);						
		GPIO_vwrite_PIN(port,2,1);						
		GPIO_vwrite_PIN(port,3,1);
		GPIO_vwrite_PIN(port,row,0);
		
			for (coloumn=0; coloumn < 4; coloumn++){
     9c0:	1f 5f       	subi	r17, 0xFF	; 255
     9c2:	14 30       	cpi	r17, 0x04	; 4
     9c4:	51 f7       	brne	.-44     	; 0x99a <keypad_u8check_press+0x64>
     9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <keypad_u8check_press+0xaa>
		if(0==x){
			break;
		}
	}	
	return returnval;
     9c8:	60 96       	adiw	r28, 0x10	; 16
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	08 95       	ret
u8 keypad_u8check_press(u8 port){
	//u8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){									
     9e0:	f3 94       	inc	r15
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	f8 16       	cp	r15, r24
     9e6:	09 f0       	breq	.+2      	; 0x9ea <keypad_u8check_press+0xb4>
     9e8:	be cf       	rjmp	.-132    	; 0x966 <keypad_u8check_press+0x30>
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	ed cf       	rjmp	.-38     	; 0x9c8 <keypad_u8check_press+0x92>

000009ee <send_falling_edge>:
			_delay_ms(1);
		}
	}
}

  static void send_falling_edge(u8 EN_port,u8 EN_pin){
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	d8 2f       	mov	r29, r24
     9f4:	c6 2f       	mov	r28, r22
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
     9fc:	8f e9       	ldi	r24, 0x9F	; 159
     9fe:	9f e0       	ldi	r25, 0x0F	; 15
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <send_falling_edge+0x12>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <send_falling_edge+0x18>
     a06:	00 00       	nop
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
     a08:	8d 2f       	mov	r24, r29
     a0a:	6c 2f       	mov	r22, r28
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <LCD_vsend_cmd>:
			_delay_ms(1);
		}
	}
}

void LCD_vsend_cmd(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 cmd,u8 EN_port,u8 EN_pin){
     a18:	af 92       	push	r10
     a1a:	cf 92       	push	r12
     a1c:	ef 92       	push	r14
     a1e:	0f 93       	push	r16
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	c4 2f       	mov	r28, r20
     a26:	d2 2f       	mov	r29, r18
	if(1==Mode){
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	71 f4       	brne	.+28     	; 0xa48 <LCD_vsend_cmd+0x30>
		GPIO_vwrite_PORT(port,cmd);
     a2c:	84 2f       	mov	r24, r20
     a2e:	6e 2d       	mov	r22, r14
     a30:	0e 94 4b 03 	call	0x696	; 0x696 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a34:	8d 2f       	mov	r24, r29
     a36:	60 2f       	mov	r22, r16
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     a3e:	8c 2d       	mov	r24, r12
     a40:	6a 2d       	mov	r22, r10
     a42:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
     a46:	47 c0       	rjmp	.+142    	; 0xad6 <LCD_vsend_cmd+0xbe>
	}else {
		if (1==Nibble){
     a48:	61 30       	cpi	r22, 0x01	; 1
     a4a:	19 f5       	brne	.+70     	; 0xa92 <LCD_vsend_cmd+0x7a>
			GPIO_High_Nibble_vwrite(port,cmd>>4);     
     a4c:	6e 2d       	mov	r22, r14
     a4e:	62 95       	swap	r22
     a50:	6f 70       	andi	r22, 0x0F	; 15
     a52:	84 2f       	mov	r24, r20
     a54:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a58:	8d 2f       	mov	r24, r29
     a5a:	60 2f       	mov	r22, r16
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a62:	8c 2d       	mov	r24, r12
     a64:	6a 2d       	mov	r22, r10
     a66:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,cmd);
     a6a:	8c 2f       	mov	r24, r28
     a6c:	6e 2d       	mov	r22, r14
     a6e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a72:	8d 2f       	mov	r24, r29
     a74:	60 2f       	mov	r22, r16
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a7c:	8c 2d       	mov	r24, r12
     a7e:	6a 2d       	mov	r22, r10
     a80:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
     a84:	8f ec       	ldi	r24, 0xCF	; 207
     a86:	97 e0       	ldi	r25, 0x07	; 7
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCD_vsend_cmd+0x70>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <LCD_vsend_cmd+0x76>
     a8e:	00 00       	nop
     a90:	22 c0       	rjmp	.+68     	; 0xad6 <LCD_vsend_cmd+0xbe>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,cmd>>4);   
     a92:	6e 2d       	mov	r22, r14
     a94:	62 95       	swap	r22
     a96:	6f 70       	andi	r22, 0x0F	; 15
     a98:	84 2f       	mov	r24, r20
     a9a:	0e 94 4c 04 	call	0x898	; 0x898 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a9e:	8d 2f       	mov	r24, r29
     aa0:	60 2f       	mov	r22, r16
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     aa8:	8c 2d       	mov	r24, r12
     aaa:	6a 2d       	mov	r22, r10
     aac:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,cmd);
     ab0:	8c 2f       	mov	r24, r28
     ab2:	6e 2d       	mov	r22, r14
     ab4:	0e 94 4c 04 	call	0x898	; 0x898 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     ab8:	8d 2f       	mov	r24, r29
     aba:	60 2f       	mov	r22, r16
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     ac2:	8c 2d       	mov	r24, r12
     ac4:	6a 2d       	mov	r22, r10
     ac6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
     aca:	8f ec       	ldi	r24, 0xCF	; 207
     acc:	97 e0       	ldi	r25, 0x07	; 7
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <LCD_vsend_cmd+0xb6>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <LCD_vsend_cmd+0xbc>
     ad4:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	0f 91       	pop	r16
     adc:	ef 90       	pop	r14
     ade:	cf 90       	pop	r12
     ae0:	af 90       	pop	r10
     ae2:	08 95       	ret

00000ae4 <LCD_vInit>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

void LCD_vInit(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin, u8 RW_port, u8 RW_pin,u8 EN_port,u8 EN_pin){
     ae4:	7f 92       	push	r7
     ae6:	8f 92       	push	r8
     ae8:	9f 92       	push	r9
     aea:	af 92       	push	r10
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	18 2f       	mov	r17, r24
     b04:	f6 2e       	mov	r15, r22
     b06:	74 2e       	mov	r7, r20
     b08:	92 2e       	mov	r9, r18
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	91 ee       	ldi	r25, 0xE1	; 225
     b0e:	a4 e0       	ldi	r26, 0x04	; 4
     b10:	81 50       	subi	r24, 0x01	; 1
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	a0 40       	sbci	r26, 0x00	; 0
     b16:	e1 f7       	brne	.-8      	; 0xb10 <LCD_vInit+0x2c>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <LCD_vInit+0x36>
     b1a:	00 00       	nop
	_delay_ms(200);
	GPIO_vsetPIN_DIR(RS_port,RS_pin,1);
     b1c:	82 2f       	mov	r24, r18
     b1e:	60 2f       	mov	r22, r16
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(RW_port,RW_pin,1);
     b26:	8e 2d       	mov	r24, r14
     b28:	6c 2d       	mov	r22, r12
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(EN_port,EN_pin,1);
     b30:	8a 2d       	mov	r24, r10
     b32:	68 2d       	mov	r22, r8
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
	if (1==Mode){
     b3a:	11 30       	cpi	r17, 0x01	; 1
     b3c:	09 f0       	breq	.+2      	; 0xb40 <LCD_vInit+0x5c>
     b3e:	50 c0       	rjmp	.+160    	; 0xbe0 <LCD_vInit+0xfc>
		GPIO_vset_PORT_DIR(port,0xff);
     b40:	87 2d       	mov	r24, r7
     b42:	6f ef       	ldi	r22, 0xFF	; 255
     b44:	0e 94 2c 03 	call	0x658	; 0x658 <GPIO_vset_PORT_DIR>
		GPIO_vwrite_PIN(RW_port,RW_pin,0);
     b48:	8e 2d       	mov	r24, r14
     b4a:	6c 2d       	mov	r22, r12
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
     b52:	af e2       	ldi	r26, 0x2F	; 47
     b54:	b5 e7       	ldi	r27, 0x75	; 117
     b56:	11 97       	sbiw	r26, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <LCD_vInit+0x72>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <LCD_vInit+0x78>
     b5c:	00 00       	nop
		_delay_ms(15);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_8BIT_2Lines,EN_port,EN_pin);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	6f 2d       	mov	r22, r15
     b62:	47 2d       	mov	r20, r7
     b64:	29 2d       	mov	r18, r9
     b66:	0f 2e       	mov	r0, r31
     b68:	f8 e3       	ldi	r31, 0x38	; 56
     b6a:	ef 2e       	mov	r14, r31
     b6c:	f0 2d       	mov	r31, r0
     b6e:	ca 2c       	mov	r12, r10
     b70:	a8 2c       	mov	r10, r8
     b72:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     b76:	8f ec       	ldi	r24, 0xCF	; 207
     b78:	97 e0       	ldi	r25, 0x07	; 7
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <LCD_vInit+0x96>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <LCD_vInit+0x9c>
     b80:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	6f 2d       	mov	r22, r15
     b86:	47 2d       	mov	r20, r7
     b88:	29 2d       	mov	r18, r9
     b8a:	0f 2e       	mov	r0, r31
     b8c:	fe e0       	ldi	r31, 0x0E	; 14
     b8e:	ef 2e       	mov	r14, r31
     b90:	f0 2d       	mov	r31, r0
     b92:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     b96:	af ec       	ldi	r26, 0xCF	; 207
     b98:	b7 e0       	ldi	r27, 0x07	; 7
     b9a:	11 97       	sbiw	r26, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <LCD_vInit+0xb6>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <LCD_vInit+0xbc>
     ba0:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	6f 2d       	mov	r22, r15
     ba6:	47 2d       	mov	r20, r7
     ba8:	29 2d       	mov	r18, r9
     baa:	ee 24       	eor	r14, r14
     bac:	e3 94       	inc	r14
     bae:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     bb2:	8f e1       	ldi	r24, 0x1F	; 31
     bb4:	9e e4       	ldi	r25, 0x4E	; 78
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <LCD_vInit+0xd2>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <LCD_vInit+0xd8>
     bbc:	00 00       	nop
		_delay_ms(10);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	6f 2d       	mov	r22, r15
     bc2:	47 2d       	mov	r20, r7
     bc4:	29 2d       	mov	r18, r9
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	ef 2e       	mov	r14, r31
     bcc:	f0 2d       	mov	r31, r0
     bce:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     bd2:	af ec       	ldi	r26, 0xCF	; 207
     bd4:	b7 e0       	ldi	r27, 0x07	; 7
     bd6:	11 97       	sbiw	r26, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <LCD_vInit+0xf2>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <LCD_vInit+0xf8>
     bdc:	00 00       	nop
     bde:	b5 c0       	rjmp	.+362    	; 0xd4a <LCD_vInit+0x266>
		_delay_ms(1);
		
	}else{
		if (1==Nibble){
     be0:	b1 e0       	ldi	r27, 0x01	; 1
     be2:	fb 16       	cp	r15, r27
     be4:	09 f0       	breq	.+2      	; 0xbe8 <LCD_vInit+0x104>
     be6:	59 c0       	rjmp	.+178    	; 0xc9a <LCD_vInit+0x1b6>
			GPIO_High_Nibble_vset_dir(port,1);
     be8:	87 2d       	mov	r24, r7
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	0e 94 bd 03 	call	0x77a	; 0x77a <GPIO_High_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     bf0:	8e 2d       	mov	r24, r14
     bf2:	6c 2d       	mov	r22, r12
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     bfa:	81 2f       	mov	r24, r17
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	47 2d       	mov	r20, r7
     c00:	29 2d       	mov	r18, r9
     c02:	ee 24       	eor	r14, r14
     c04:	68 94       	set
     c06:	e1 f8       	bld	r14, 1
     c08:	ca 2c       	mov	r12, r10
     c0a:	a8 2c       	mov	r10, r8
     c0c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     c10:	8f e2       	ldi	r24, 0x2F	; 47
     c12:	95 e7       	ldi	r25, 0x75	; 117
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_vInit+0x130>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <LCD_vInit+0x136>
     c1a:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     c1c:	81 2f       	mov	r24, r17
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	47 2d       	mov	r20, r7
     c22:	29 2d       	mov	r18, r9
     c24:	0f 2e       	mov	r0, r31
     c26:	f8 e2       	ldi	r31, 0x28	; 40
     c28:	ef 2e       	mov	r14, r31
     c2a:	f0 2d       	mov	r31, r0
     c2c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     c30:	af ec       	ldi	r26, 0xCF	; 207
     c32:	b7 e0       	ldi	r27, 0x07	; 7
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <LCD_vInit+0x150>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <LCD_vInit+0x156>
     c3a:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     c3c:	81 2f       	mov	r24, r17
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	47 2d       	mov	r20, r7
     c42:	29 2d       	mov	r18, r9
     c44:	0f 2e       	mov	r0, r31
     c46:	fe e0       	ldi	r31, 0x0E	; 14
     c48:	ef 2e       	mov	r14, r31
     c4a:	f0 2d       	mov	r31, r0
     c4c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     c50:	8f ec       	ldi	r24, 0xCF	; 207
     c52:	97 e0       	ldi	r25, 0x07	; 7
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <LCD_vInit+0x170>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <LCD_vInit+0x176>
     c5a:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     c5c:	81 2f       	mov	r24, r17
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	47 2d       	mov	r20, r7
     c62:	29 2d       	mov	r18, r9
     c64:	ee 24       	eor	r14, r14
     c66:	e3 94       	inc	r14
     c68:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     c6c:	af e1       	ldi	r26, 0x1F	; 31
     c6e:	be e4       	ldi	r27, 0x4E	; 78
     c70:	11 97       	sbiw	r26, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <LCD_vInit+0x18c>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <LCD_vInit+0x192>
     c76:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     c78:	81 2f       	mov	r24, r17
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	47 2d       	mov	r20, r7
     c7e:	29 2d       	mov	r18, r9
     c80:	0f 2e       	mov	r0, r31
     c82:	f6 e0       	ldi	r31, 0x06	; 6
     c84:	ef 2e       	mov	r14, r31
     c86:	f0 2d       	mov	r31, r0
     c88:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     c8c:	8f ec       	ldi	r24, 0xCF	; 207
     c8e:	97 e0       	ldi	r25, 0x07	; 7
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <LCD_vInit+0x1ac>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <LCD_vInit+0x1b2>
     c96:	00 00       	nop
     c98:	58 c0       	rjmp	.+176    	; 0xd4a <LCD_vInit+0x266>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vset_dir(port,1);
     c9a:	87 2d       	mov	r24, r7
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	0e 94 1f 04 	call	0x83e	; 0x83e <GPIO_Low_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     ca2:	8e 2d       	mov	r24, r14
     ca4:	6c 2d       	mov	r22, r12
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     cac:	81 2f       	mov	r24, r17
     cae:	6f 2d       	mov	r22, r15
     cb0:	47 2d       	mov	r20, r7
     cb2:	29 2d       	mov	r18, r9
     cb4:	ee 24       	eor	r14, r14
     cb6:	68 94       	set
     cb8:	e1 f8       	bld	r14, 1
     cba:	ca 2c       	mov	r12, r10
     cbc:	a8 2c       	mov	r10, r8
     cbe:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     cc2:	af e2       	ldi	r26, 0x2F	; 47
     cc4:	b5 e7       	ldi	r27, 0x75	; 117
     cc6:	11 97       	sbiw	r26, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCD_vInit+0x1e2>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <LCD_vInit+0x1e8>
     ccc:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     cce:	81 2f       	mov	r24, r17
     cd0:	6f 2d       	mov	r22, r15
     cd2:	47 2d       	mov	r20, r7
     cd4:	29 2d       	mov	r18, r9
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f8 e2       	ldi	r31, 0x28	; 40
     cda:	ef 2e       	mov	r14, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     ce2:	8f ec       	ldi	r24, 0xCF	; 207
     ce4:	97 e0       	ldi	r25, 0x07	; 7
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <LCD_vInit+0x202>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <LCD_vInit+0x208>
     cec:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     cee:	81 2f       	mov	r24, r17
     cf0:	6f 2d       	mov	r22, r15
     cf2:	47 2d       	mov	r20, r7
     cf4:	29 2d       	mov	r18, r9
     cf6:	0f 2e       	mov	r0, r31
     cf8:	fe e0       	ldi	r31, 0x0E	; 14
     cfa:	ef 2e       	mov	r14, r31
     cfc:	f0 2d       	mov	r31, r0
     cfe:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     d02:	af ec       	ldi	r26, 0xCF	; 207
     d04:	b7 e0       	ldi	r27, 0x07	; 7
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_vInit+0x222>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <LCD_vInit+0x228>
     d0c:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     d0e:	81 2f       	mov	r24, r17
     d10:	6f 2d       	mov	r22, r15
     d12:	47 2d       	mov	r20, r7
     d14:	29 2d       	mov	r18, r9
     d16:	ee 24       	eor	r14, r14
     d18:	e3 94       	inc	r14
     d1a:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     d1e:	8f e1       	ldi	r24, 0x1F	; 31
     d20:	9e e4       	ldi	r25, 0x4E	; 78
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <LCD_vInit+0x23e>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <LCD_vInit+0x244>
     d28:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     d2a:	81 2f       	mov	r24, r17
     d2c:	6f 2d       	mov	r22, r15
     d2e:	47 2d       	mov	r20, r7
     d30:	29 2d       	mov	r18, r9
     d32:	0f 2e       	mov	r0, r31
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	ef 2e       	mov	r14, r31
     d38:	f0 2d       	mov	r31, r0
     d3a:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     d3e:	af ec       	ldi	r26, 0xCF	; 207
     d40:	b7 e0       	ldi	r27, 0x07	; 7
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <LCD_vInit+0x25e>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <LCD_vInit+0x264>
     d48:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	8f 90       	pop	r8
     d62:	7f 90       	pop	r7
     d64:	08 95       	ret

00000d66 <LCD_clear_screen>:
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
}

void LCD_clear_screen(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin){
     d66:	af 92       	push	r10
     d68:	cf 92       	push	r12
     d6a:	ef 92       	push	r14
     d6c:	0f 93       	push	r16
     d6e:	9e 2d       	mov	r25, r14
     d70:	ac 2c       	mov	r10, r12
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     d72:	ee 24       	eor	r14, r14
     d74:	e3 94       	inc	r14
     d76:	c9 2e       	mov	r12, r25
     d78:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     d7c:	8f e1       	ldi	r24, 0x1F	; 31
     d7e:	9e e4       	ldi	r25, 0x4E	; 78
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_clear_screen+0x1a>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <LCD_clear_screen+0x20>
     d86:	00 00       	nop
	_delay_ms(10);
}
     d88:	0f 91       	pop	r16
     d8a:	ef 90       	pop	r14
     d8c:	cf 90       	pop	r12
     d8e:	af 90       	pop	r10
     d90:	08 95       	ret

00000d92 <LCD_Move_Cursor>:

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
     d92:	8f 92       	push	r8
     d94:	af 92       	push	r10
     d96:	cf 92       	push	r12
     d98:	ef 92       	push	r14
     d9a:	0f 93       	push	r16
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	3e 2d       	mov	r19, r14
     da6:	9c 2d       	mov	r25, r12
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
     da8:	7a 2d       	mov	r23, r10
     daa:	71 50       	subi	r23, 0x01	; 1
     dac:	73 30       	cpi	r23, 0x03	; 3
     dae:	88 f4       	brcc	.+34     	; 0xdd2 <LCD_Move_Cursor+0x40>
     db0:	70 e1       	ldi	r23, 0x10	; 16
     db2:	78 15       	cp	r23, r8
     db4:	80 f0       	brcs	.+32     	; 0xdd6 <LCD_Move_Cursor+0x44>
     db6:	88 20       	and	r8, r8
     db8:	81 f0       	breq	.+32     	; 0xdda <LCD_Move_Cursor+0x48>
		data = 0x80;
	}else if (1 == line ){
     dba:	71 e0       	ldi	r23, 0x01	; 1
     dbc:	a7 16       	cp	r10, r23
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <LCD_Move_Cursor+0x34>
		data = 0x80 + (position - 1);         
     dc0:	58 2d       	mov	r21, r8
     dc2:	51 58       	subi	r21, 0x81	; 129
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <LCD_Move_Cursor+0x4a>
	}else if (2 == line){
     dc6:	72 e0       	ldi	r23, 0x02	; 2
     dc8:	a7 16       	cp	r10, r23
     dca:	41 f4       	brne	.+16     	; 0xddc <LCD_Move_Cursor+0x4a>
		data = 0xC0 + (position - 1);  
     dcc:	58 2d       	mov	r21, r8
     dce:	51 54       	subi	r21, 0x41	; 65
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <LCD_Move_Cursor+0x4a>
}

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
		data = 0x80;
     dd2:	50 e8       	ldi	r21, 0x80	; 128
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <LCD_Move_Cursor+0x4a>
     dd6:	50 e8       	ldi	r21, 0x80	; 128
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <LCD_Move_Cursor+0x4a>
     dda:	50 e8       	ldi	r21, 0x80	; 128
	}else if (1 == line ){
		data = 0x80 + (position - 1);         
	}else if (2 == line){
		data = 0xC0 + (position - 1);  
	}
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,data,EN_port,EN_pin);
     ddc:	e5 2e       	mov	r14, r21
     dde:	c3 2e       	mov	r12, r19
     de0:	a9 2e       	mov	r10, r25
     de2:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_vsend_cmd>
     de6:	8f ec       	ldi	r24, 0xCF	; 207
     de8:	97 e0       	ldi	r25, 0x07	; 7
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <LCD_Move_Cursor+0x58>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <LCD_Move_Cursor+0x5e>
     df0:	00 00       	nop
	_delay_ms(1);
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	0f 91       	pop	r16
     df8:	ef 90       	pop	r14
     dfa:	cf 90       	pop	r12
     dfc:	af 90       	pop	r10
     dfe:	8f 90       	pop	r8
     e00:	08 95       	ret

00000e02 <LCD_vsend_char>:

void LCD_vsend_char(u8 Mood , u8 Nibble,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 data){
     e02:	af 92       	push	r10
     e04:	cf 92       	push	r12
     e06:	ef 92       	push	r14
     e08:	0f 93       	push	r16
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	c4 2f       	mov	r28, r20
     e10:	d2 2f       	mov	r29, r18
	if (1==Mood){
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	a1 f4       	brne	.+40     	; 0xe3e <LCD_vsend_char+0x3c>
		GPIO_vwrite_PORT(port,data);
     e16:	84 2f       	mov	r24, r20
     e18:	6a 2d       	mov	r22, r10
     e1a:	0e 94 4b 03 	call	0x696	; 0x696 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e1e:	8d 2f       	mov	r24, r29
     e20:	60 2f       	mov	r22, r16
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     e28:	8e 2d       	mov	r24, r14
     e2a:	6c 2d       	mov	r22, r12
     e2c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
     e30:	8f ec       	ldi	r24, 0xCF	; 207
     e32:	97 e0       	ldi	r25, 0x07	; 7
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <LCD_vsend_char+0x32>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <LCD_vsend_char+0x38>
     e3a:	00 00       	nop
     e3c:	47 c0       	rjmp	.+142    	; 0xecc <LCD_vsend_char+0xca>
		_delay_ms(1);
	}else{
		if (1==Nibble){
     e3e:	61 30       	cpi	r22, 0x01	; 1
     e40:	19 f5       	brne	.+70     	; 0xe88 <LCD_vsend_char+0x86>
			GPIO_High_Nibble_vwrite(port,data>>4);
     e42:	6a 2d       	mov	r22, r10
     e44:	62 95       	swap	r22
     e46:	6f 70       	andi	r22, 0x0F	; 15
     e48:	84 2f       	mov	r24, r20
     e4a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e4e:	8d 2f       	mov	r24, r29
     e50:	60 2f       	mov	r22, r16
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e58:	8e 2d       	mov	r24, r14
     e5a:	6c 2d       	mov	r22, r12
     e5c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,data);
     e60:	8c 2f       	mov	r24, r28
     e62:	6a 2d       	mov	r22, r10
     e64:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e68:	8d 2f       	mov	r24, r29
     e6a:	60 2f       	mov	r22, r16
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e72:	8e 2d       	mov	r24, r14
     e74:	6c 2d       	mov	r22, r12
     e76:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
     e7a:	8f ec       	ldi	r24, 0xCF	; 207
     e7c:	97 e0       	ldi	r25, 0x07	; 7
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <LCD_vsend_char+0x7c>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <LCD_vsend_char+0x82>
     e84:	00 00       	nop
     e86:	22 c0       	rjmp	.+68     	; 0xecc <LCD_vsend_char+0xca>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,data>>4);
     e88:	6a 2d       	mov	r22, r10
     e8a:	62 95       	swap	r22
     e8c:	6f 70       	andi	r22, 0x0F	; 15
     e8e:	84 2f       	mov	r24, r20
     e90:	0e 94 4c 04 	call	0x898	; 0x898 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e94:	8d 2f       	mov	r24, r29
     e96:	60 2f       	mov	r22, r16
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e9e:	8e 2d       	mov	r24, r14
     ea0:	6c 2d       	mov	r22, r12
     ea2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,data);
     ea6:	8c 2f       	mov	r24, r28
     ea8:	6a 2d       	mov	r22, r10
     eaa:	0e 94 4c 04 	call	0x898	; 0x898 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     eae:	8d 2f       	mov	r24, r29
     eb0:	60 2f       	mov	r22, r16
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     eb8:	8e 2d       	mov	r24, r14
     eba:	6c 2d       	mov	r22, r12
     ebc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <send_falling_edge>
     ec0:	8f ec       	ldi	r24, 0xCF	; 207
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <LCD_vsend_char+0xc2>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <LCD_vsend_char+0xc8>
     eca:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	0f 91       	pop	r16
     ed2:	ef 90       	pop	r14
     ed4:	cf 90       	pop	r12
     ed6:	af 90       	pop	r10
     ed8:	08 95       	ret

00000eda <LCD_vsend_string>:
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     eda:	6f 92       	push	r6
     edc:	7f 92       	push	r7
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	68 2e       	mov	r6, r24
     ef8:	76 2e       	mov	r7, r22
     efa:	84 2e       	mov	r8, r20
     efc:	92 2e       	mov	r9, r18
     efe:	d0 2e       	mov	r13, r16
     f00:	fe 2c       	mov	r15, r14
     f02:	1c 2d       	mov	r17, r12
     f04:	e5 01       	movw	r28, r10
	while((*data)!='\0'){
     f06:	a8 80       	ld	r10, Y
     f08:	aa 20       	and	r10, r10
     f0a:	69 f0       	breq	.+26     	; 0xf26 <LCD_vsend_string+0x4c>
			_delay_ms(1);
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     f0c:	21 96       	adiw	r28, 0x01	; 1
	while((*data)!='\0'){
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
     f0e:	86 2d       	mov	r24, r6
     f10:	67 2d       	mov	r22, r7
     f12:	48 2d       	mov	r20, r8
     f14:	29 2d       	mov	r18, r9
     f16:	0d 2d       	mov	r16, r13
     f18:	ef 2c       	mov	r14, r15
     f1a:	c1 2e       	mov	r12, r17
     f1c:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_vsend_char>
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
	while((*data)!='\0'){
     f20:	a9 90       	ld	r10, Y+
     f22:	aa 20       	and	r10, r10
     f24:	a1 f7       	brne	.-24     	; 0xf0e <LCD_vsend_string+0x34>
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
		data++;
	}
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	08 95       	ret

00000f44 <LCD_display_number>:

void LCD_display_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u32 Number){
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	27 97       	sbiw	r28, 0x07	; 7
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	18 2f       	mov	r17, r24
     f70:	f6 2e       	mov	r15, r22
     f72:	d4 2e       	mov	r13, r20
     f74:	72 2e       	mov	r7, r18
     f76:	d5 01       	movw	r26, r10
     f78:	c4 01       	movw	r24, r8
	u8 str[7]; 
	sprintf(str,"%d",Number);
     f7a:	2d b7       	in	r18, 0x3d	; 61
     f7c:	3e b7       	in	r19, 0x3e	; 62
     f7e:	28 50       	subi	r18, 0x08	; 8
     f80:	30 40       	sbci	r19, 0x00	; 0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	3e bf       	out	0x3e, r19	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	2d bf       	out	0x3d, r18	; 61
     f8c:	4d b7       	in	r20, 0x3d	; 61
     f8e:	5e b7       	in	r21, 0x3e	; 62
     f90:	4f 5f       	subi	r20, 0xFF	; 255
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	5e 01       	movw	r10, r28
     f96:	08 94       	sec
     f98:	a1 1c       	adc	r10, r1
     f9a:	b1 1c       	adc	r11, r1
     f9c:	ed b7       	in	r30, 0x3d	; 61
     f9e:	fe b7       	in	r31, 0x3e	; 62
     fa0:	b2 82       	std	Z+2, r11	; 0x02
     fa2:	a1 82       	std	Z+1, r10	; 0x01
     fa4:	20 e7       	ldi	r18, 0x70	; 112
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	fa 01       	movw	r30, r20
     faa:	33 83       	std	Z+3, r19	; 0x03
     fac:	22 83       	std	Z+2, r18	; 0x02
     fae:	84 83       	std	Z+4, r24	; 0x04
     fb0:	95 83       	std	Z+5, r25	; 0x05
     fb2:	a6 83       	std	Z+6, r26	; 0x06
     fb4:	b7 83       	std	Z+7, r27	; 0x07
     fb6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
     fba:	2d b7       	in	r18, 0x3d	; 61
     fbc:	3e b7       	in	r19, 0x3e	; 62
     fbe:	28 5f       	subi	r18, 0xF8	; 248
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	3e bf       	out	0x3e, r19	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	2d bf       	out	0x3d, r18	; 61
     fcc:	81 2f       	mov	r24, r17
     fce:	6f 2d       	mov	r22, r15
     fd0:	4d 2d       	mov	r20, r13
     fd2:	27 2d       	mov	r18, r7
     fd4:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_vsend_string>
}
     fd8:	27 96       	adiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	7f 90       	pop	r7
     ffe:	08 95       	ret

00001000 <LCD_display_real_number>:

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
    1000:	2f 92       	push	r2
    1002:	3f 92       	push	r3
    1004:	4f 92       	push	r4
    1006:	5f 92       	push	r5
    1008:	6f 92       	push	r6
    100a:	7f 92       	push	r7
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	62 97       	sbiw	r28, 0x12	; 18
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	18 2f       	mov	r17, r24
    1034:	f6 2e       	mov	r15, r22
    1036:	d4 2e       	mov	r13, r20
    1038:	92 2e       	mov	r9, r18
    103a:	2e a1       	lds	r18, 0x4e
    103c:	3f a1       	lds	r19, 0x4f
    103e:	48 a5       	lds	r20, 0x68
    1040:	59 a5       	lds	r21, 0x69
    1042:	6a a5       	lds	r22, 0x6a
    1044:	7b a5       	lds	r23, 0x6b
    1046:	8c a5       	lds	r24, 0x6c
    1048:	9d a5       	lds	r25, 0x6d
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    104a:	99 23       	and	r25, r25
    104c:	2c f0       	brlt	.+10     	; 0x1058 <LCD_display_real_number+0x58>
    104e:	e5 e7       	ldi	r30, 0x75	; 117
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	fa 8b       	std	Y+18, r31	; 0x12
    1054:	e9 8b       	std	Y+17, r30	; 0x11
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <LCD_display_real_number+0x60>
    1058:	e3 e7       	ldi	r30, 0x73	; 115
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	fa 8b       	std	Y+18, r31	; 0x12
    105e:	e9 8b       	std	Y+17, r30	; 0x11
	f32 tmpval = (Number < 0) ? -Number : Number;
    1060:	0e 94 a2 09 	call	0x1344	; 0x1344 <__floatdisf>
    1064:	2b 01       	movw	r4, r22
    1066:	3c 01       	movw	r6, r24
    1068:	e8 94       	clt
    106a:	77 f8       	bld	r7, 7
	s32 tmpInt1 = tmpval;
    106c:	c3 01       	movw	r24, r6
    106e:	b2 01       	movw	r22, r4
    1070:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fixsfsi>
	f32 tmpFrac = tmpval - tmpInt1;
	s32 tmpInt2 = tmpFrac * 10000;
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    1074:	2d b7       	in	r18, 0x3d	; 61
    1076:	3e b7       	in	r19, 0x3e	; 62
    1078:	2e 50       	subi	r18, 0x0E	; 14
    107a:	30 40       	sbci	r19, 0x00	; 0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	3e bf       	out	0x3e, r19	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	2d bf       	out	0x3d, r18	; 61
    1086:	ad b6       	in	r10, 0x3d	; 61
    1088:	be b6       	in	r11, 0x3e	; 62
    108a:	08 94       	sec
    108c:	a1 1c       	adc	r10, r1
    108e:	b1 1c       	adc	r11, r1
    1090:	1e 01       	movw	r2, r28
    1092:	08 94       	sec
    1094:	21 1c       	adc	r2, r1
    1096:	31 1c       	adc	r3, r1
    1098:	ed b7       	in	r30, 0x3d	; 61
    109a:	fe b7       	in	r31, 0x3e	; 62
    109c:	32 82       	std	Z+2, r3	; 0x02
    109e:	21 82       	std	Z+1, r2	; 0x01
    10a0:	26 e7       	ldi	r18, 0x76	; 118
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	f5 01       	movw	r30, r10
    10a6:	33 83       	std	Z+3, r19	; 0x03
    10a8:	22 83       	std	Z+2, r18	; 0x02
    10aa:	29 89       	ldd	r18, Y+17	; 0x11
    10ac:	3a 89       	ldd	r19, Y+18	; 0x12
    10ae:	35 83       	std	Z+5, r19	; 0x05
    10b0:	24 83       	std	Z+4, r18	; 0x04
    10b2:	66 83       	std	Z+6, r22	; 0x06
    10b4:	77 83       	std	Z+7, r23	; 0x07
    10b6:	80 87       	std	Z+8, r24	; 0x08
    10b8:	91 87       	std	Z+9, r25	; 0x09
void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
	f32 tmpFrac = tmpval - tmpInt1;
    10ba:	0e 94 a8 09 	call	0x1350	; 0x1350 <__floatsisf>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	c3 01       	movw	r24, r6
    10c4:	b2 01       	movw	r22, r4
    10c6:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
	s32 tmpInt2 = tmpFrac * 10000;
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e4       	ldi	r19, 0x40	; 64
    10ce:	4c e1       	ldi	r20, 0x1C	; 28
    10d0:	56 e4       	ldi	r21, 0x46	; 70
    10d2:	0e 94 82 0a 	call	0x1504	; 0x1504 <__mulsf3>
    10d6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fixsfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    10de:	f5 01       	movw	r30, r10
    10e0:	82 87       	std	Z+10, r24	; 0x0a
    10e2:	93 87       	std	Z+11, r25	; 0x0b
    10e4:	a4 87       	std	Z+12, r26	; 0x0c
    10e6:	b5 87       	std	Z+13, r27	; 0x0d
    10e8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
    10ec:	2d b7       	in	r18, 0x3d	; 61
    10ee:	3e b7       	in	r19, 0x3e	; 62
    10f0:	22 5f       	subi	r18, 0xF2	; 242
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	3e bf       	out	0x3e, r19	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	2d bf       	out	0x3d, r18	; 61
    10fe:	81 2f       	mov	r24, r17
    1100:	6f 2d       	mov	r22, r15
    1102:	4d 2d       	mov	r20, r13
    1104:	29 2d       	mov	r18, r9
    1106:	51 01       	movw	r10, r2
    1108:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_vsend_string>
    110c:	62 96       	adiw	r28, 0x12	; 18
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	7f 90       	pop	r7
    1130:	6f 90       	pop	r6
    1132:	5f 90       	pop	r5
    1134:	4f 90       	pop	r4
    1136:	3f 90       	pop	r3
    1138:	2f 90       	pop	r2
    113a:	08 95       	ret

0000113c <LED_vintialize>:
 * It is in ECU abstraction layer 
 */

#include "GPIO_MCAL.h"
void LED_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_vsetPIN_DIR>
}
    1142:	08 95       	ret

00001144 <LED_vTurnon>:
void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
}
    114a:	08 95       	ret

0000114c <LED_vTurnoff>:
void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	0e 94 4c 01 	call	0x298	; 0x298 <GPIO_vwrite_PIN>
}
    1152:	08 95       	ret

00001154 <LED_vtoggle>:
void LED_vtoggle(u8 port, u8 pin){
	GPIO_vtoggle_PIN(port,pin);
    1154:	0e 94 42 02 	call	0x484	; 0x484 <GPIO_vtoggle_PIN>
    1158:	08 95       	ret

0000115a <Seven_Segment_Init>:
#define  Eight_bit 1
#define  High_Nibble 1
#define  LOW_Nibble 0

void Seven_Segment_Init(u8 Mode,u8 port ,u8 Nibble){
	if (0 == Mode){
    115a:	88 23       	and	r24, r24
    115c:	71 f4       	brne	.+28     	; 0x117a <Seven_Segment_Init+0x20>
		if (0==Nibble){
    115e:	44 23       	and	r20, r20
    1160:	29 f4       	brne	.+10     	; 0x116c <Seven_Segment_Init+0x12>
			GPIO_Low_Nibble_vset_dir(port,1);
    1162:	86 2f       	mov	r24, r22
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	0e 94 1f 04 	call	0x83e	; 0x83e <GPIO_Low_Nibble_vset_dir>
    116a:	08 95       	ret
		}else if (1==Nibble){
    116c:	41 30       	cpi	r20, 0x01	; 1
    116e:	59 f4       	brne	.+22     	; 0x1186 <Seven_Segment_Init+0x2c>
			GPIO_High_Nibble_vset_dir(port,1);
    1170:	86 2f       	mov	r24, r22
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	0e 94 bd 03 	call	0x77a	; 0x77a <GPIO_High_Nibble_vset_dir>
    1178:	08 95       	ret
		}
		else{
			
		}
	}else if (1==Mode){
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	21 f4       	brne	.+8      	; 0x1186 <Seven_Segment_Init+0x2c>
		GPIO_vset_PORT_DIR(port,0xff);
    117e:	86 2f       	mov	r24, r22
    1180:	6f ef       	ldi	r22, 0xFF	; 255
    1182:	0e 94 2c 03 	call	0x658	; 0x658 <GPIO_vset_PORT_DIR>
    1186:	08 95       	ret

00001188 <Seven_segment_Display>:
		
	}
}


void Seven_segment_Display(u8 Mode,u8 Nibble , u8 port, u8 value){
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	2a 97       	sbiw	r28, 0x0a	; 10
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
	if (0 == Mode){
    119c:	88 23       	and	r24, r24
    119e:	71 f4       	brne	.+28     	; 0x11bc <Seven_segment_Display+0x34>
		if (0==Nibble){
    11a0:	66 23       	and	r22, r22
    11a2:	29 f4       	brne	.+10     	; 0x11ae <Seven_segment_Display+0x26>
			GPIO_Low_Nibble_vwrite(port,value);
    11a4:	84 2f       	mov	r24, r20
    11a6:	62 2f       	mov	r22, r18
    11a8:	0e 94 4c 04 	call	0x898	; 0x898 <GPIO_Low_Nibble_vwrite>
    11ac:	2c c0       	rjmp	.+88     	; 0x1206 <Seven_segment_Display+0x7e>
		}else if (1==Nibble){
    11ae:	61 30       	cpi	r22, 0x01	; 1
    11b0:	51 f5       	brne	.+84     	; 0x1206 <Seven_segment_Display+0x7e>
			GPIO_High_Nibble_vwrite(port,value);
    11b2:	84 2f       	mov	r24, r20
    11b4:	62 2f       	mov	r22, r18
    11b6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GPIO_High_Nibble_vwrite>
    11ba:	25 c0       	rjmp	.+74     	; 0x1206 <Seven_segment_Display+0x7e>
		}
		else{
			
		}
	}else if (1==Mode){
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	19 f5       	brne	.+70     	; 0x1206 <Seven_segment_Display+0x7e>
		if (value >=0 && value <=9)
    11c0:	2a 30       	cpi	r18, 0x0A	; 10
    11c2:	88 f4       	brcc	.+34     	; 0x11e6 <Seven_segment_Display+0x5e>
		{
			u8 arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    11c4:	de 01       	movw	r26, r28
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	e0 e8       	ldi	r30, 0x80	; 128
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	01 90       	ld	r0, Z+
    11d0:	0d 92       	st	X+, r0
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <Seven_segment_Display+0x46>
			GPIO_vwrite_PORT(port,arr[value]);
    11d6:	fe 01       	movw	r30, r28
    11d8:	e2 0f       	add	r30, r18
    11da:	f1 1d       	adc	r31, r1
    11dc:	84 2f       	mov	r24, r20
    11de:	61 81       	ldd	r22, Z+1	; 0x01
    11e0:	0e 94 4b 03 	call	0x696	; 0x696 <GPIO_vwrite_PORT>
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <Seven_segment_Display+0x7e>
			#define B 1
			#define C 2
			#define D 3
			#define E 4
			#define F 5
			u8 arr1[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
    11e6:	de 01       	movw	r26, r28
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	ea e8       	ldi	r30, 0x8A	; 138
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	86 e0       	ldi	r24, 0x06	; 6
    11f0:	01 90       	ld	r0, Z+
    11f2:	0d 92       	st	X+, r0
    11f4:	81 50       	subi	r24, 0x01	; 1
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <Seven_segment_Display+0x68>
			GPIO_vwrite_PORT(port,arr1[value]);
    11f8:	fe 01       	movw	r30, r28
    11fa:	e2 0f       	add	r30, r18
    11fc:	f1 1d       	adc	r31, r1
    11fe:	84 2f       	mov	r24, r20
    1200:	61 81       	ldd	r22, Z+1	; 0x01
    1202:	0e 94 4b 03 	call	0x696	; 0x696 <GPIO_vwrite_PORT>
		}
	}
	else{
		
	}
    1206:	2a 96       	adiw	r28, 0x0a	; 10
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <__subsf3>:
    1218:	50 58       	subi	r21, 0x80	; 128

0000121a <__addsf3>:
    121a:	bb 27       	eor	r27, r27
    121c:	aa 27       	eor	r26, r26
    121e:	0e d0       	rcall	.+28     	; 0x123c <__addsf3x>
    1220:	37 c1       	rjmp	.+622    	; 0x1490 <__fp_round>
    1222:	28 d1       	rcall	.+592    	; 0x1474 <__fp_pscA>
    1224:	30 f0       	brcs	.+12     	; 0x1232 <__addsf3+0x18>
    1226:	2d d1       	rcall	.+602    	; 0x1482 <__fp_pscB>
    1228:	20 f0       	brcs	.+8      	; 0x1232 <__addsf3+0x18>
    122a:	31 f4       	brne	.+12     	; 0x1238 <__addsf3+0x1e>
    122c:	9f 3f       	cpi	r25, 0xFF	; 255
    122e:	11 f4       	brne	.+4      	; 0x1234 <__addsf3+0x1a>
    1230:	1e f4       	brtc	.+6      	; 0x1238 <__addsf3+0x1e>
    1232:	0d c1       	rjmp	.+538    	; 0x144e <__fp_nan>
    1234:	0e f4       	brtc	.+2      	; 0x1238 <__addsf3+0x1e>
    1236:	e0 95       	com	r30
    1238:	e7 fb       	bst	r30, 7
    123a:	03 c1       	rjmp	.+518    	; 0x1442 <__fp_inf>

0000123c <__addsf3x>:
    123c:	e9 2f       	mov	r30, r25
    123e:	39 d1       	rcall	.+626    	; 0x14b2 <__fp_split3>
    1240:	80 f3       	brcs	.-32     	; 0x1222 <__addsf3+0x8>
    1242:	ba 17       	cp	r27, r26
    1244:	62 07       	cpc	r22, r18
    1246:	73 07       	cpc	r23, r19
    1248:	84 07       	cpc	r24, r20
    124a:	95 07       	cpc	r25, r21
    124c:	18 f0       	brcs	.+6      	; 0x1254 <__addsf3x+0x18>
    124e:	71 f4       	brne	.+28     	; 0x126c <__addsf3x+0x30>
    1250:	9e f5       	brtc	.+102    	; 0x12b8 <__addsf3x+0x7c>
    1252:	51 c1       	rjmp	.+674    	; 0x14f6 <__fp_zero>
    1254:	0e f4       	brtc	.+2      	; 0x1258 <__addsf3x+0x1c>
    1256:	e0 95       	com	r30
    1258:	0b 2e       	mov	r0, r27
    125a:	ba 2f       	mov	r27, r26
    125c:	a0 2d       	mov	r26, r0
    125e:	0b 01       	movw	r0, r22
    1260:	b9 01       	movw	r22, r18
    1262:	90 01       	movw	r18, r0
    1264:	0c 01       	movw	r0, r24
    1266:	ca 01       	movw	r24, r20
    1268:	a0 01       	movw	r20, r0
    126a:	11 24       	eor	r1, r1
    126c:	ff 27       	eor	r31, r31
    126e:	59 1b       	sub	r21, r25
    1270:	99 f0       	breq	.+38     	; 0x1298 <__addsf3x+0x5c>
    1272:	59 3f       	cpi	r21, 0xF9	; 249
    1274:	50 f4       	brcc	.+20     	; 0x128a <__addsf3x+0x4e>
    1276:	50 3e       	cpi	r21, 0xE0	; 224
    1278:	68 f1       	brcs	.+90     	; 0x12d4 <__addsf3x+0x98>
    127a:	1a 16       	cp	r1, r26
    127c:	f0 40       	sbci	r31, 0x00	; 0
    127e:	a2 2f       	mov	r26, r18
    1280:	23 2f       	mov	r18, r19
    1282:	34 2f       	mov	r19, r20
    1284:	44 27       	eor	r20, r20
    1286:	58 5f       	subi	r21, 0xF8	; 248
    1288:	f3 cf       	rjmp	.-26     	; 0x1270 <__addsf3x+0x34>
    128a:	46 95       	lsr	r20
    128c:	37 95       	ror	r19
    128e:	27 95       	ror	r18
    1290:	a7 95       	ror	r26
    1292:	f0 40       	sbci	r31, 0x00	; 0
    1294:	53 95       	inc	r21
    1296:	c9 f7       	brne	.-14     	; 0x128a <__addsf3x+0x4e>
    1298:	7e f4       	brtc	.+30     	; 0x12b8 <__addsf3x+0x7c>
    129a:	1f 16       	cp	r1, r31
    129c:	ba 0b       	sbc	r27, r26
    129e:	62 0b       	sbc	r22, r18
    12a0:	73 0b       	sbc	r23, r19
    12a2:	84 0b       	sbc	r24, r20
    12a4:	ba f0       	brmi	.+46     	; 0x12d4 <__addsf3x+0x98>
    12a6:	91 50       	subi	r25, 0x01	; 1
    12a8:	a1 f0       	breq	.+40     	; 0x12d2 <__addsf3x+0x96>
    12aa:	ff 0f       	add	r31, r31
    12ac:	bb 1f       	adc	r27, r27
    12ae:	66 1f       	adc	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	c2 f7       	brpl	.-16     	; 0x12a6 <__addsf3x+0x6a>
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <__addsf3x+0x98>
    12b8:	ba 0f       	add	r27, r26
    12ba:	62 1f       	adc	r22, r18
    12bc:	73 1f       	adc	r23, r19
    12be:	84 1f       	adc	r24, r20
    12c0:	48 f4       	brcc	.+18     	; 0x12d4 <__addsf3x+0x98>
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f7 95       	ror	r31
    12cc:	9e 3f       	cpi	r25, 0xFE	; 254
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__addsf3x+0x96>
    12d0:	b3 cf       	rjmp	.-154    	; 0x1238 <__addsf3+0x1e>
    12d2:	93 95       	inc	r25
    12d4:	88 0f       	add	r24, r24
    12d6:	08 f0       	brcs	.+2      	; 0x12da <__addsf3x+0x9e>
    12d8:	99 27       	eor	r25, r25
    12da:	ee 0f       	add	r30, r30
    12dc:	97 95       	ror	r25
    12de:	87 95       	ror	r24
    12e0:	08 95       	ret

000012e2 <__fixsfsi>:
    12e2:	04 d0       	rcall	.+8      	; 0x12ec <__fixunssfsi>
    12e4:	68 94       	set
    12e6:	b1 11       	cpse	r27, r1
    12e8:	07 c1       	rjmp	.+526    	; 0x14f8 <__fp_szero>
    12ea:	08 95       	ret

000012ec <__fixunssfsi>:
    12ec:	ea d0       	rcall	.+468    	; 0x14c2 <__fp_splitA>
    12ee:	88 f0       	brcs	.+34     	; 0x1312 <__fixunssfsi+0x26>
    12f0:	9f 57       	subi	r25, 0x7F	; 127
    12f2:	90 f0       	brcs	.+36     	; 0x1318 <__fixunssfsi+0x2c>
    12f4:	b9 2f       	mov	r27, r25
    12f6:	99 27       	eor	r25, r25
    12f8:	b7 51       	subi	r27, 0x17	; 23
    12fa:	a0 f0       	brcs	.+40     	; 0x1324 <__fixunssfsi+0x38>
    12fc:	d1 f0       	breq	.+52     	; 0x1332 <__fixunssfsi+0x46>
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	1a f0       	brmi	.+6      	; 0x130e <__fixunssfsi+0x22>
    1308:	ba 95       	dec	r27
    130a:	c9 f7       	brne	.-14     	; 0x12fe <__fixunssfsi+0x12>
    130c:	12 c0       	rjmp	.+36     	; 0x1332 <__fixunssfsi+0x46>
    130e:	b1 30       	cpi	r27, 0x01	; 1
    1310:	81 f0       	breq	.+32     	; 0x1332 <__fixunssfsi+0x46>
    1312:	f1 d0       	rcall	.+482    	; 0x14f6 <__fp_zero>
    1314:	b1 e0       	ldi	r27, 0x01	; 1
    1316:	08 95       	ret
    1318:	ee c0       	rjmp	.+476    	; 0x14f6 <__fp_zero>
    131a:	67 2f       	mov	r22, r23
    131c:	78 2f       	mov	r23, r24
    131e:	88 27       	eor	r24, r24
    1320:	b8 5f       	subi	r27, 0xF8	; 248
    1322:	39 f0       	breq	.+14     	; 0x1332 <__fixunssfsi+0x46>
    1324:	b9 3f       	cpi	r27, 0xF9	; 249
    1326:	cc f3       	brlt	.-14     	; 0x131a <__fixunssfsi+0x2e>
    1328:	86 95       	lsr	r24
    132a:	77 95       	ror	r23
    132c:	67 95       	ror	r22
    132e:	b3 95       	inc	r27
    1330:	d9 f7       	brne	.-10     	; 0x1328 <__fixunssfsi+0x3c>
    1332:	3e f4       	brtc	.+14     	; 0x1342 <__fixunssfsi+0x56>
    1334:	90 95       	com	r25
    1336:	80 95       	com	r24
    1338:	70 95       	com	r23
    133a:	61 95       	neg	r22
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	08 95       	ret

00001344 <__floatdisf>:
    1344:	97 fb       	bst	r25, 7
    1346:	0e f4       	brtc	.+2      	; 0x134a <__floatdisf+0x6>
    1348:	85 d0       	rcall	.+266    	; 0x1454 <__fp_negdi>
    134a:	3e c0       	rjmp	.+124    	; 0x13c8 <__fp_di2sf>

0000134c <__floatunsisf>:
    134c:	e8 94       	clt
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <__floatsisf+0x12>

00001350 <__floatsisf>:
    1350:	97 fb       	bst	r25, 7
    1352:	3e f4       	brtc	.+14     	; 0x1362 <__floatsisf+0x12>
    1354:	90 95       	com	r25
    1356:	80 95       	com	r24
    1358:	70 95       	com	r23
    135a:	61 95       	neg	r22
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	8f 4f       	sbci	r24, 0xFF	; 255
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	99 23       	and	r25, r25
    1364:	a9 f0       	breq	.+42     	; 0x1390 <__floatsisf+0x40>
    1366:	f9 2f       	mov	r31, r25
    1368:	96 e9       	ldi	r25, 0x96	; 150
    136a:	bb 27       	eor	r27, r27
    136c:	93 95       	inc	r25
    136e:	f6 95       	lsr	r31
    1370:	87 95       	ror	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b7 95       	ror	r27
    1378:	f1 11       	cpse	r31, r1
    137a:	f8 cf       	rjmp	.-16     	; 0x136c <__floatsisf+0x1c>
    137c:	fa f4       	brpl	.+62     	; 0x13bc <__floatsisf+0x6c>
    137e:	bb 0f       	add	r27, r27
    1380:	11 f4       	brne	.+4      	; 0x1386 <__floatsisf+0x36>
    1382:	60 ff       	sbrs	r22, 0
    1384:	1b c0       	rjmp	.+54     	; 0x13bc <__floatsisf+0x6c>
    1386:	6f 5f       	subi	r22, 0xFF	; 255
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	16 c0       	rjmp	.+44     	; 0x13bc <__floatsisf+0x6c>
    1390:	88 23       	and	r24, r24
    1392:	11 f0       	breq	.+4      	; 0x1398 <__floatsisf+0x48>
    1394:	96 e9       	ldi	r25, 0x96	; 150
    1396:	11 c0       	rjmp	.+34     	; 0x13ba <__floatsisf+0x6a>
    1398:	77 23       	and	r23, r23
    139a:	21 f0       	breq	.+8      	; 0x13a4 <__floatsisf+0x54>
    139c:	9e e8       	ldi	r25, 0x8E	; 142
    139e:	87 2f       	mov	r24, r23
    13a0:	76 2f       	mov	r23, r22
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <__floatsisf+0x5e>
    13a4:	66 23       	and	r22, r22
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <__floatsisf+0x74>
    13a8:	96 e8       	ldi	r25, 0x86	; 134
    13aa:	86 2f       	mov	r24, r22
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	2a f0       	brmi	.+10     	; 0x13bc <__floatsisf+0x6c>
    13b2:	9a 95       	dec	r25
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	da f7       	brpl	.-10     	; 0x13b2 <__floatsisf+0x62>
    13bc:	88 0f       	add	r24, r24
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret

000013c6 <__floatundisf>:
    13c6:	e8 94       	clt

000013c8 <__fp_di2sf>:
    13c8:	f9 2f       	mov	r31, r25
    13ca:	96 eb       	ldi	r25, 0xB6	; 182
    13cc:	ff 23       	and	r31, r31
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <__fp_di2sf+0x28>
    13d0:	12 16       	cp	r1, r18
    13d2:	13 06       	cpc	r1, r19
    13d4:	14 06       	cpc	r1, r20
    13d6:	44 0b       	sbc	r20, r20
    13d8:	93 95       	inc	r25
    13da:	f6 95       	lsr	r31
    13dc:	87 95       	ror	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	57 95       	ror	r21
    13e4:	40 40       	sbci	r20, 0x00	; 0
    13e6:	ff 23       	and	r31, r31
    13e8:	b9 f7       	brne	.-18     	; 0x13d8 <__fp_di2sf+0x10>
    13ea:	1b c0       	rjmp	.+54     	; 0x1422 <__fp_di2sf+0x5a>
    13ec:	99 27       	eor	r25, r25
    13ee:	08 95       	ret
    13f0:	88 23       	and	r24, r24
    13f2:	51 f4       	brne	.+20     	; 0x1408 <__fp_di2sf+0x40>
    13f4:	98 50       	subi	r25, 0x08	; 8
    13f6:	d2 f7       	brpl	.-12     	; 0x13ec <__fp_di2sf+0x24>
    13f8:	87 2b       	or	r24, r23
    13fa:	76 2f       	mov	r23, r22
    13fc:	65 2f       	mov	r22, r21
    13fe:	54 2f       	mov	r21, r20
    1400:	43 2f       	mov	r20, r19
    1402:	32 2f       	mov	r19, r18
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	b1 f3       	breq	.-20     	; 0x13f4 <__fp_di2sf+0x2c>
    1408:	12 16       	cp	r1, r18
    140a:	13 06       	cpc	r1, r19
    140c:	14 06       	cpc	r1, r20
    140e:	44 0b       	sbc	r20, r20
    1410:	88 23       	and	r24, r24
    1412:	3a f0       	brmi	.+14     	; 0x1422 <__fp_di2sf+0x5a>
    1414:	9a 95       	dec	r25
    1416:	44 0f       	add	r20, r20
    1418:	55 1f       	adc	r21, r21
    141a:	66 1f       	adc	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	ca f7       	brpl	.-14     	; 0x1414 <__fp_di2sf+0x4c>
    1422:	55 23       	and	r21, r21
    1424:	4a f4       	brpl	.+18     	; 0x1438 <__fp_di2sf+0x70>
    1426:	44 0f       	add	r20, r20
    1428:	55 1f       	adc	r21, r21
    142a:	11 f4       	brne	.+4      	; 0x1430 <__fp_di2sf+0x68>
    142c:	60 ff       	sbrs	r22, 0
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <__fp_di2sf+0x70>
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	88 0f       	add	r24, r24
    143a:	96 95       	lsr	r25
    143c:	87 95       	ror	r24
    143e:	97 f9       	bld	r25, 7
    1440:	08 95       	ret

00001442 <__fp_inf>:
    1442:	97 f9       	bld	r25, 7
    1444:	9f 67       	ori	r25, 0x7F	; 127
    1446:	80 e8       	ldi	r24, 0x80	; 128
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	08 95       	ret

0000144e <__fp_nan>:
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	80 ec       	ldi	r24, 0xC0	; 192
    1452:	08 95       	ret

00001454 <__fp_negdi>:
    1454:	90 95       	com	r25
    1456:	80 95       	com	r24
    1458:	70 95       	com	r23
    145a:	60 95       	com	r22
    145c:	50 95       	com	r21
    145e:	40 95       	com	r20
    1460:	30 95       	com	r19
    1462:	21 95       	neg	r18
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	4f 4f       	sbci	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	6f 4f       	sbci	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	08 95       	ret

00001474 <__fp_pscA>:
    1474:	00 24       	eor	r0, r0
    1476:	0a 94       	dec	r0
    1478:	16 16       	cp	r1, r22
    147a:	17 06       	cpc	r1, r23
    147c:	18 06       	cpc	r1, r24
    147e:	09 06       	cpc	r0, r25
    1480:	08 95       	ret

00001482 <__fp_pscB>:
    1482:	00 24       	eor	r0, r0
    1484:	0a 94       	dec	r0
    1486:	12 16       	cp	r1, r18
    1488:	13 06       	cpc	r1, r19
    148a:	14 06       	cpc	r1, r20
    148c:	05 06       	cpc	r0, r21
    148e:	08 95       	ret

00001490 <__fp_round>:
    1490:	09 2e       	mov	r0, r25
    1492:	03 94       	inc	r0
    1494:	00 0c       	add	r0, r0
    1496:	11 f4       	brne	.+4      	; 0x149c <__fp_round+0xc>
    1498:	88 23       	and	r24, r24
    149a:	52 f0       	brmi	.+20     	; 0x14b0 <__fp_round+0x20>
    149c:	bb 0f       	add	r27, r27
    149e:	40 f4       	brcc	.+16     	; 0x14b0 <__fp_round+0x20>
    14a0:	bf 2b       	or	r27, r31
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <__fp_round+0x18>
    14a4:	60 ff       	sbrs	r22, 0
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <__fp_round+0x20>
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	8f 4f       	sbci	r24, 0xFF	; 255
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	08 95       	ret

000014b2 <__fp_split3>:
    14b2:	57 fd       	sbrc	r21, 7
    14b4:	90 58       	subi	r25, 0x80	; 128
    14b6:	44 0f       	add	r20, r20
    14b8:	55 1f       	adc	r21, r21
    14ba:	59 f0       	breq	.+22     	; 0x14d2 <__fp_splitA+0x10>
    14bc:	5f 3f       	cpi	r21, 0xFF	; 255
    14be:	71 f0       	breq	.+28     	; 0x14dc <__fp_splitA+0x1a>
    14c0:	47 95       	ror	r20

000014c2 <__fp_splitA>:
    14c2:	88 0f       	add	r24, r24
    14c4:	97 fb       	bst	r25, 7
    14c6:	99 1f       	adc	r25, r25
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <__fp_splitA+0x20>
    14ca:	9f 3f       	cpi	r25, 0xFF	; 255
    14cc:	79 f0       	breq	.+30     	; 0x14ec <__fp_splitA+0x2a>
    14ce:	87 95       	ror	r24
    14d0:	08 95       	ret
    14d2:	12 16       	cp	r1, r18
    14d4:	13 06       	cpc	r1, r19
    14d6:	14 06       	cpc	r1, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	f2 cf       	rjmp	.-28     	; 0x14c0 <__fp_split3+0xe>
    14dc:	46 95       	lsr	r20
    14de:	f1 df       	rcall	.-30     	; 0x14c2 <__fp_splitA>
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <__fp_splitA+0x30>
    14e2:	16 16       	cp	r1, r22
    14e4:	17 06       	cpc	r1, r23
    14e6:	18 06       	cpc	r1, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	f1 cf       	rjmp	.-30     	; 0x14ce <__fp_splitA+0xc>
    14ec:	86 95       	lsr	r24
    14ee:	71 05       	cpc	r23, r1
    14f0:	61 05       	cpc	r22, r1
    14f2:	08 94       	sec
    14f4:	08 95       	ret

000014f6 <__fp_zero>:
    14f6:	e8 94       	clt

000014f8 <__fp_szero>:
    14f8:	bb 27       	eor	r27, r27
    14fa:	66 27       	eor	r22, r22
    14fc:	77 27       	eor	r23, r23
    14fe:	cb 01       	movw	r24, r22
    1500:	97 f9       	bld	r25, 7
    1502:	08 95       	ret

00001504 <__mulsf3>:
    1504:	0b d0       	rcall	.+22     	; 0x151c <__mulsf3x>
    1506:	c4 cf       	rjmp	.-120    	; 0x1490 <__fp_round>
    1508:	b5 df       	rcall	.-150    	; 0x1474 <__fp_pscA>
    150a:	28 f0       	brcs	.+10     	; 0x1516 <__mulsf3+0x12>
    150c:	ba df       	rcall	.-140    	; 0x1482 <__fp_pscB>
    150e:	18 f0       	brcs	.+6      	; 0x1516 <__mulsf3+0x12>
    1510:	95 23       	and	r25, r21
    1512:	09 f0       	breq	.+2      	; 0x1516 <__mulsf3+0x12>
    1514:	96 cf       	rjmp	.-212    	; 0x1442 <__fp_inf>
    1516:	9b cf       	rjmp	.-202    	; 0x144e <__fp_nan>
    1518:	11 24       	eor	r1, r1
    151a:	ee cf       	rjmp	.-36     	; 0x14f8 <__fp_szero>

0000151c <__mulsf3x>:
    151c:	ca df       	rcall	.-108    	; 0x14b2 <__fp_split3>
    151e:	a0 f3       	brcs	.-24     	; 0x1508 <__mulsf3+0x4>

00001520 <__mulsf3_pse>:
    1520:	95 9f       	mul	r25, r21
    1522:	d1 f3       	breq	.-12     	; 0x1518 <__mulsf3+0x14>
    1524:	95 0f       	add	r25, r21
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	55 1f       	adc	r21, r21
    152a:	62 9f       	mul	r22, r18
    152c:	f0 01       	movw	r30, r0
    152e:	72 9f       	mul	r23, r18
    1530:	bb 27       	eor	r27, r27
    1532:	f0 0d       	add	r31, r0
    1534:	b1 1d       	adc	r27, r1
    1536:	63 9f       	mul	r22, r19
    1538:	aa 27       	eor	r26, r26
    153a:	f0 0d       	add	r31, r0
    153c:	b1 1d       	adc	r27, r1
    153e:	aa 1f       	adc	r26, r26
    1540:	64 9f       	mul	r22, r20
    1542:	66 27       	eor	r22, r22
    1544:	b0 0d       	add	r27, r0
    1546:	a1 1d       	adc	r26, r1
    1548:	66 1f       	adc	r22, r22
    154a:	82 9f       	mul	r24, r18
    154c:	22 27       	eor	r18, r18
    154e:	b0 0d       	add	r27, r0
    1550:	a1 1d       	adc	r26, r1
    1552:	62 1f       	adc	r22, r18
    1554:	73 9f       	mul	r23, r19
    1556:	b0 0d       	add	r27, r0
    1558:	a1 1d       	adc	r26, r1
    155a:	62 1f       	adc	r22, r18
    155c:	83 9f       	mul	r24, r19
    155e:	a0 0d       	add	r26, r0
    1560:	61 1d       	adc	r22, r1
    1562:	22 1f       	adc	r18, r18
    1564:	74 9f       	mul	r23, r20
    1566:	33 27       	eor	r19, r19
    1568:	a0 0d       	add	r26, r0
    156a:	61 1d       	adc	r22, r1
    156c:	23 1f       	adc	r18, r19
    156e:	84 9f       	mul	r24, r20
    1570:	60 0d       	add	r22, r0
    1572:	21 1d       	adc	r18, r1
    1574:	82 2f       	mov	r24, r18
    1576:	76 2f       	mov	r23, r22
    1578:	6a 2f       	mov	r22, r26
    157a:	11 24       	eor	r1, r1
    157c:	9f 57       	subi	r25, 0x7F	; 127
    157e:	50 40       	sbci	r21, 0x00	; 0
    1580:	8a f0       	brmi	.+34     	; 0x15a4 <__mulsf3_pse+0x84>
    1582:	e1 f0       	breq	.+56     	; 0x15bc <__mulsf3_pse+0x9c>
    1584:	88 23       	and	r24, r24
    1586:	4a f0       	brmi	.+18     	; 0x159a <__mulsf3_pse+0x7a>
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	bb 1f       	adc	r27, r27
    158e:	66 1f       	adc	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	91 50       	subi	r25, 0x01	; 1
    1596:	50 40       	sbci	r21, 0x00	; 0
    1598:	a9 f7       	brne	.-22     	; 0x1584 <__mulsf3_pse+0x64>
    159a:	9e 3f       	cpi	r25, 0xFE	; 254
    159c:	51 05       	cpc	r21, r1
    159e:	70 f0       	brcs	.+28     	; 0x15bc <__mulsf3_pse+0x9c>
    15a0:	50 cf       	rjmp	.-352    	; 0x1442 <__fp_inf>
    15a2:	aa cf       	rjmp	.-172    	; 0x14f8 <__fp_szero>
    15a4:	5f 3f       	cpi	r21, 0xFF	; 255
    15a6:	ec f3       	brlt	.-6      	; 0x15a2 <__mulsf3_pse+0x82>
    15a8:	98 3e       	cpi	r25, 0xE8	; 232
    15aa:	dc f3       	brlt	.-10     	; 0x15a2 <__mulsf3_pse+0x82>
    15ac:	86 95       	lsr	r24
    15ae:	77 95       	ror	r23
    15b0:	67 95       	ror	r22
    15b2:	b7 95       	ror	r27
    15b4:	f7 95       	ror	r31
    15b6:	e7 95       	ror	r30
    15b8:	9f 5f       	subi	r25, 0xFF	; 255
    15ba:	c1 f7       	brne	.-16     	; 0x15ac <__mulsf3_pse+0x8c>
    15bc:	fe 2b       	or	r31, r30
    15be:	88 0f       	add	r24, r24
    15c0:	91 1d       	adc	r25, r1
    15c2:	96 95       	lsr	r25
    15c4:	87 95       	ror	r24
    15c6:	97 f9       	bld	r25, 7
    15c8:	08 95       	ret

000015ca <sprintf>:
    15ca:	ae e0       	ldi	r26, 0x0E	; 14
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb ee       	ldi	r30, 0xEB	; 235
    15d0:	fa e0       	ldi	r31, 0x0A	; 10
    15d2:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__prologue_saves__+0x1c>
    15d6:	0d 89       	ldd	r16, Y+21	; 0x15
    15d8:	1e 89       	ldd	r17, Y+22	; 0x16
    15da:	86 e0       	ldi	r24, 0x06	; 6
    15dc:	8c 83       	std	Y+4, r24	; 0x04
    15de:	1a 83       	std	Y+2, r17	; 0x02
    15e0:	09 83       	std	Y+1, r16	; 0x01
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f e7       	ldi	r25, 0x7F	; 127
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	ae 01       	movw	r20, r28
    15ec:	47 5e       	subi	r20, 0xE7	; 231
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	6f 89       	ldd	r22, Y+23	; 0x17
    15f6:	78 8d       	ldd	r23, Y+24	; 0x18
    15f8:	0e 94 07 0b 	call	0x160e	; 0x160e <vfprintf>
    15fc:	ef 81       	ldd	r30, Y+7	; 0x07
    15fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1600:	e0 0f       	add	r30, r16
    1602:	f1 1f       	adc	r31, r17
    1604:	10 82       	st	Z, r1
    1606:	2e 96       	adiw	r28, 0x0e	; 14
    1608:	e4 e0       	ldi	r30, 0x04	; 4
    160a:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__epilogue_restores__+0x1c>

0000160e <vfprintf>:
    160e:	ad e0       	ldi	r26, 0x0D	; 13
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__prologue_saves__>
    161a:	3c 01       	movw	r6, r24
    161c:	7d 87       	std	Y+13, r23	; 0x0d
    161e:	6c 87       	std	Y+12, r22	; 0x0c
    1620:	5a 01       	movw	r10, r20
    1622:	fc 01       	movw	r30, r24
    1624:	17 82       	std	Z+7, r1	; 0x07
    1626:	16 82       	std	Z+6, r1	; 0x06
    1628:	83 81       	ldd	r24, Z+3	; 0x03
    162a:	81 ff       	sbrs	r24, 1
    162c:	c8 c1       	rjmp	.+912    	; 0x19be <vfprintf+0x3b0>
    162e:	2e 01       	movw	r4, r28
    1630:	08 94       	sec
    1632:	41 1c       	adc	r4, r1
    1634:	51 1c       	adc	r5, r1
    1636:	f3 01       	movw	r30, r6
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	ec 85       	ldd	r30, Y+12	; 0x0c
    163c:	fd 85       	ldd	r31, Y+13	; 0x0d
    163e:	93 fd       	sbrc	r25, 3
    1640:	85 91       	lpm	r24, Z+
    1642:	93 ff       	sbrs	r25, 3
    1644:	81 91       	ld	r24, Z+
    1646:	fd 87       	std	Y+13, r31	; 0x0d
    1648:	ec 87       	std	Y+12, r30	; 0x0c
    164a:	88 23       	and	r24, r24
    164c:	09 f4       	brne	.+2      	; 0x1650 <vfprintf+0x42>
    164e:	b3 c1       	rjmp	.+870    	; 0x19b6 <vfprintf+0x3a8>
    1650:	85 32       	cpi	r24, 0x25	; 37
    1652:	41 f4       	brne	.+16     	; 0x1664 <vfprintf+0x56>
    1654:	93 fd       	sbrc	r25, 3
    1656:	85 91       	lpm	r24, Z+
    1658:	93 ff       	sbrs	r25, 3
    165a:	81 91       	ld	r24, Z+
    165c:	fd 87       	std	Y+13, r31	; 0x0d
    165e:	ec 87       	std	Y+12, r30	; 0x0c
    1660:	85 32       	cpi	r24, 0x25	; 37
    1662:	29 f4       	brne	.+10     	; 0x166e <vfprintf+0x60>
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	b3 01       	movw	r22, r6
    1668:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    166c:	e4 cf       	rjmp	.-56     	; 0x1636 <vfprintf+0x28>
    166e:	ff 24       	eor	r15, r15
    1670:	ee 24       	eor	r14, r14
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	10 32       	cpi	r17, 0x20	; 32
    1676:	b0 f4       	brcc	.+44     	; 0x16a4 <vfprintf+0x96>
    1678:	8b 32       	cpi	r24, 0x2B	; 43
    167a:	69 f0       	breq	.+26     	; 0x1696 <vfprintf+0x88>
    167c:	8c 32       	cpi	r24, 0x2C	; 44
    167e:	28 f4       	brcc	.+10     	; 0x168a <vfprintf+0x7c>
    1680:	80 32       	cpi	r24, 0x20	; 32
    1682:	51 f0       	breq	.+20     	; 0x1698 <vfprintf+0x8a>
    1684:	83 32       	cpi	r24, 0x23	; 35
    1686:	71 f4       	brne	.+28     	; 0x16a4 <vfprintf+0x96>
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <vfprintf+0x92>
    168a:	8d 32       	cpi	r24, 0x2D	; 45
    168c:	39 f0       	breq	.+14     	; 0x169c <vfprintf+0x8e>
    168e:	80 33       	cpi	r24, 0x30	; 48
    1690:	49 f4       	brne	.+18     	; 0x16a4 <vfprintf+0x96>
    1692:	11 60       	ori	r17, 0x01	; 1
    1694:	2c c0       	rjmp	.+88     	; 0x16ee <vfprintf+0xe0>
    1696:	12 60       	ori	r17, 0x02	; 2
    1698:	14 60       	ori	r17, 0x04	; 4
    169a:	29 c0       	rjmp	.+82     	; 0x16ee <vfprintf+0xe0>
    169c:	18 60       	ori	r17, 0x08	; 8
    169e:	27 c0       	rjmp	.+78     	; 0x16ee <vfprintf+0xe0>
    16a0:	10 61       	ori	r17, 0x10	; 16
    16a2:	25 c0       	rjmp	.+74     	; 0x16ee <vfprintf+0xe0>
    16a4:	17 fd       	sbrc	r17, 7
    16a6:	2e c0       	rjmp	.+92     	; 0x1704 <vfprintf+0xf6>
    16a8:	28 2f       	mov	r18, r24
    16aa:	20 53       	subi	r18, 0x30	; 48
    16ac:	2a 30       	cpi	r18, 0x0A	; 10
    16ae:	98 f4       	brcc	.+38     	; 0x16d6 <vfprintf+0xc8>
    16b0:	16 ff       	sbrs	r17, 6
    16b2:	08 c0       	rjmp	.+16     	; 0x16c4 <vfprintf+0xb6>
    16b4:	8f 2d       	mov	r24, r15
    16b6:	88 0f       	add	r24, r24
    16b8:	f8 2e       	mov	r15, r24
    16ba:	ff 0c       	add	r15, r15
    16bc:	ff 0c       	add	r15, r15
    16be:	f8 0e       	add	r15, r24
    16c0:	f2 0e       	add	r15, r18
    16c2:	15 c0       	rjmp	.+42     	; 0x16ee <vfprintf+0xe0>
    16c4:	8e 2d       	mov	r24, r14
    16c6:	88 0f       	add	r24, r24
    16c8:	e8 2e       	mov	r14, r24
    16ca:	ee 0c       	add	r14, r14
    16cc:	ee 0c       	add	r14, r14
    16ce:	e8 0e       	add	r14, r24
    16d0:	e2 0e       	add	r14, r18
    16d2:	10 62       	ori	r17, 0x20	; 32
    16d4:	0c c0       	rjmp	.+24     	; 0x16ee <vfprintf+0xe0>
    16d6:	8e 32       	cpi	r24, 0x2E	; 46
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <vfprintf+0xd4>
    16da:	16 fd       	sbrc	r17, 6
    16dc:	6c c1       	rjmp	.+728    	; 0x19b6 <vfprintf+0x3a8>
    16de:	10 64       	ori	r17, 0x40	; 64
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0xe0>
    16e2:	8c 36       	cpi	r24, 0x6C	; 108
    16e4:	11 f4       	brne	.+4      	; 0x16ea <vfprintf+0xdc>
    16e6:	10 68       	ori	r17, 0x80	; 128
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0xe0>
    16ea:	88 36       	cpi	r24, 0x68	; 104
    16ec:	59 f4       	brne	.+22     	; 0x1704 <vfprintf+0xf6>
    16ee:	ec 85       	ldd	r30, Y+12	; 0x0c
    16f0:	fd 85       	ldd	r31, Y+13	; 0x0d
    16f2:	93 fd       	sbrc	r25, 3
    16f4:	85 91       	lpm	r24, Z+
    16f6:	93 ff       	sbrs	r25, 3
    16f8:	81 91       	ld	r24, Z+
    16fa:	fd 87       	std	Y+13, r31	; 0x0d
    16fc:	ec 87       	std	Y+12, r30	; 0x0c
    16fe:	88 23       	and	r24, r24
    1700:	09 f0       	breq	.+2      	; 0x1704 <vfprintf+0xf6>
    1702:	b8 cf       	rjmp	.-144    	; 0x1674 <vfprintf+0x66>
    1704:	98 2f       	mov	r25, r24
    1706:	95 54       	subi	r25, 0x45	; 69
    1708:	93 30       	cpi	r25, 0x03	; 3
    170a:	18 f0       	brcs	.+6      	; 0x1712 <vfprintf+0x104>
    170c:	90 52       	subi	r25, 0x20	; 32
    170e:	93 30       	cpi	r25, 0x03	; 3
    1710:	38 f4       	brcc	.+14     	; 0x1720 <vfprintf+0x112>
    1712:	24 e0       	ldi	r18, 0x04	; 4
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	a2 0e       	add	r10, r18
    1718:	b3 1e       	adc	r11, r19
    171a:	3f e3       	ldi	r19, 0x3F	; 63
    171c:	39 83       	std	Y+1, r19	; 0x01
    171e:	0f c0       	rjmp	.+30     	; 0x173e <vfprintf+0x130>
    1720:	83 36       	cpi	r24, 0x63	; 99
    1722:	31 f0       	breq	.+12     	; 0x1730 <vfprintf+0x122>
    1724:	83 37       	cpi	r24, 0x73	; 115
    1726:	81 f0       	breq	.+32     	; 0x1748 <vfprintf+0x13a>
    1728:	83 35       	cpi	r24, 0x53	; 83
    172a:	09 f0       	breq	.+2      	; 0x172e <vfprintf+0x120>
    172c:	5a c0       	rjmp	.+180    	; 0x17e2 <vfprintf+0x1d4>
    172e:	22 c0       	rjmp	.+68     	; 0x1774 <vfprintf+0x166>
    1730:	f5 01       	movw	r30, r10
    1732:	80 81       	ld	r24, Z
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	22 e0       	ldi	r18, 0x02	; 2
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	a2 0e       	add	r10, r18
    173c:	b3 1e       	adc	r11, r19
    173e:	21 e0       	ldi	r18, 0x01	; 1
    1740:	c2 2e       	mov	r12, r18
    1742:	d1 2c       	mov	r13, r1
    1744:	42 01       	movw	r8, r4
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <vfprintf+0x162>
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	29 2e       	mov	r2, r25
    174c:	31 2c       	mov	r3, r1
    174e:	2a 0c       	add	r2, r10
    1750:	3b 1c       	adc	r3, r11
    1752:	f5 01       	movw	r30, r10
    1754:	80 80       	ld	r8, Z
    1756:	91 80       	ldd	r9, Z+1	; 0x01
    1758:	16 ff       	sbrs	r17, 6
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <vfprintf+0x154>
    175c:	6f 2d       	mov	r22, r15
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x158>
    1762:	6f ef       	ldi	r22, 0xFF	; 255
    1764:	7f ef       	ldi	r23, 0xFF	; 255
    1766:	c4 01       	movw	r24, r8
    1768:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strnlen>
    176c:	6c 01       	movw	r12, r24
    176e:	51 01       	movw	r10, r2
    1770:	1f 77       	andi	r17, 0x7F	; 127
    1772:	15 c0       	rjmp	.+42     	; 0x179e <vfprintf+0x190>
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	28 2e       	mov	r2, r24
    1778:	31 2c       	mov	r3, r1
    177a:	2a 0c       	add	r2, r10
    177c:	3b 1c       	adc	r3, r11
    177e:	f5 01       	movw	r30, r10
    1780:	80 80       	ld	r8, Z
    1782:	91 80       	ldd	r9, Z+1	; 0x01
    1784:	16 ff       	sbrs	r17, 6
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x180>
    1788:	6f 2d       	mov	r22, r15
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x184>
    178e:	6f ef       	ldi	r22, 0xFF	; 255
    1790:	7f ef       	ldi	r23, 0xFF	; 255
    1792:	c4 01       	movw	r24, r8
    1794:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <strnlen_P>
    1798:	6c 01       	movw	r12, r24
    179a:	10 68       	ori	r17, 0x80	; 128
    179c:	51 01       	movw	r10, r2
    179e:	13 fd       	sbrc	r17, 3
    17a0:	1c c0       	rjmp	.+56     	; 0x17da <vfprintf+0x1cc>
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <vfprintf+0x1a2>
    17a4:	80 e2       	ldi	r24, 0x20	; 32
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	b3 01       	movw	r22, r6
    17aa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    17ae:	ea 94       	dec	r14
    17b0:	8e 2d       	mov	r24, r14
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	c8 16       	cp	r12, r24
    17b6:	d9 06       	cpc	r13, r25
    17b8:	a8 f3       	brcs	.-22     	; 0x17a4 <vfprintf+0x196>
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <vfprintf+0x1cc>
    17bc:	f4 01       	movw	r30, r8
    17be:	17 fd       	sbrc	r17, 7
    17c0:	85 91       	lpm	r24, Z+
    17c2:	17 ff       	sbrs	r17, 7
    17c4:	81 91       	ld	r24, Z+
    17c6:	4f 01       	movw	r8, r30
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	b3 01       	movw	r22, r6
    17cc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    17d0:	e1 10       	cpse	r14, r1
    17d2:	ea 94       	dec	r14
    17d4:	08 94       	sec
    17d6:	c1 08       	sbc	r12, r1
    17d8:	d1 08       	sbc	r13, r1
    17da:	c1 14       	cp	r12, r1
    17dc:	d1 04       	cpc	r13, r1
    17de:	71 f7       	brne	.-36     	; 0x17bc <vfprintf+0x1ae>
    17e0:	e7 c0       	rjmp	.+462    	; 0x19b0 <vfprintf+0x3a2>
    17e2:	84 36       	cpi	r24, 0x64	; 100
    17e4:	11 f0       	breq	.+4      	; 0x17ea <vfprintf+0x1dc>
    17e6:	89 36       	cpi	r24, 0x69	; 105
    17e8:	51 f5       	brne	.+84     	; 0x183e <vfprintf+0x230>
    17ea:	f5 01       	movw	r30, r10
    17ec:	17 ff       	sbrs	r17, 7
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <vfprintf+0x1f0>
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	a2 81       	ldd	r26, Z+2	; 0x02
    17f6:	b3 81       	ldd	r27, Z+3	; 0x03
    17f8:	24 e0       	ldi	r18, 0x04	; 4
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <vfprintf+0x200>
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	aa 27       	eor	r26, r26
    1804:	97 fd       	sbrc	r25, 7
    1806:	a0 95       	com	r26
    1808:	ba 2f       	mov	r27, r26
    180a:	22 e0       	ldi	r18, 0x02	; 2
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	a2 0e       	add	r10, r18
    1810:	b3 1e       	adc	r11, r19
    1812:	01 2f       	mov	r16, r17
    1814:	0f 76       	andi	r16, 0x6F	; 111
    1816:	b7 ff       	sbrs	r27, 7
    1818:	08 c0       	rjmp	.+16     	; 0x182a <vfprintf+0x21c>
    181a:	b0 95       	com	r27
    181c:	a0 95       	com	r26
    181e:	90 95       	com	r25
    1820:	81 95       	neg	r24
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	af 4f       	sbci	r26, 0xFF	; 255
    1826:	bf 4f       	sbci	r27, 0xFF	; 255
    1828:	00 68       	ori	r16, 0x80	; 128
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	a2 01       	movw	r20, r4
    1830:	2a e0       	ldi	r18, 0x0A	; 10
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__ultoa_invert>
    1838:	d8 2e       	mov	r13, r24
    183a:	d4 18       	sub	r13, r4
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <vfprintf+0x2ae>
    183e:	85 37       	cpi	r24, 0x75	; 117
    1840:	21 f4       	brne	.+8      	; 0x184a <vfprintf+0x23c>
    1842:	1f 7e       	andi	r17, 0xEF	; 239
    1844:	2a e0       	ldi	r18, 0x0A	; 10
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	20 c0       	rjmp	.+64     	; 0x188a <vfprintf+0x27c>
    184a:	19 7f       	andi	r17, 0xF9	; 249
    184c:	8f 36       	cpi	r24, 0x6F	; 111
    184e:	a9 f0       	breq	.+42     	; 0x187a <vfprintf+0x26c>
    1850:	80 37       	cpi	r24, 0x70	; 112
    1852:	20 f4       	brcc	.+8      	; 0x185c <vfprintf+0x24e>
    1854:	88 35       	cpi	r24, 0x58	; 88
    1856:	09 f0       	breq	.+2      	; 0x185a <vfprintf+0x24c>
    1858:	ae c0       	rjmp	.+348    	; 0x19b6 <vfprintf+0x3a8>
    185a:	0b c0       	rjmp	.+22     	; 0x1872 <vfprintf+0x264>
    185c:	80 37       	cpi	r24, 0x70	; 112
    185e:	21 f0       	breq	.+8      	; 0x1868 <vfprintf+0x25a>
    1860:	88 37       	cpi	r24, 0x78	; 120
    1862:	09 f0       	breq	.+2      	; 0x1866 <vfprintf+0x258>
    1864:	a8 c0       	rjmp	.+336    	; 0x19b6 <vfprintf+0x3a8>
    1866:	01 c0       	rjmp	.+2      	; 0x186a <vfprintf+0x25c>
    1868:	10 61       	ori	r17, 0x10	; 16
    186a:	14 ff       	sbrs	r17, 4
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <vfprintf+0x272>
    186e:	14 60       	ori	r17, 0x04	; 4
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <vfprintf+0x272>
    1872:	14 ff       	sbrs	r17, 4
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <vfprintf+0x278>
    1876:	16 60       	ori	r17, 0x06	; 6
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0x278>
    187a:	28 e0       	ldi	r18, 0x08	; 8
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	05 c0       	rjmp	.+10     	; 0x188a <vfprintf+0x27c>
    1880:	20 e1       	ldi	r18, 0x10	; 16
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x27c>
    1886:	20 e1       	ldi	r18, 0x10	; 16
    1888:	32 e0       	ldi	r19, 0x02	; 2
    188a:	f5 01       	movw	r30, r10
    188c:	17 ff       	sbrs	r17, 7
    188e:	07 c0       	rjmp	.+14     	; 0x189e <vfprintf+0x290>
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	44 e0       	ldi	r20, 0x04	; 4
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x29c>
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	42 e0       	ldi	r20, 0x02	; 2
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	a4 0e       	add	r10, r20
    18ac:	b5 1e       	adc	r11, r21
    18ae:	a2 01       	movw	r20, r4
    18b0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__ultoa_invert>
    18b4:	d8 2e       	mov	r13, r24
    18b6:	d4 18       	sub	r13, r4
    18b8:	01 2f       	mov	r16, r17
    18ba:	0f 77       	andi	r16, 0x7F	; 127
    18bc:	06 ff       	sbrs	r16, 6
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <vfprintf+0x2c4>
    18c0:	0e 7f       	andi	r16, 0xFE	; 254
    18c2:	df 14       	cp	r13, r15
    18c4:	30 f4       	brcc	.+12     	; 0x18d2 <vfprintf+0x2c4>
    18c6:	04 ff       	sbrs	r16, 4
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x2c8>
    18ca:	02 fd       	sbrc	r16, 2
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <vfprintf+0x2c8>
    18ce:	0f 7e       	andi	r16, 0xEF	; 239
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <vfprintf+0x2c8>
    18d2:	1d 2d       	mov	r17, r13
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <vfprintf+0x2ca>
    18d6:	1f 2d       	mov	r17, r15
    18d8:	80 2f       	mov	r24, r16
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	04 ff       	sbrs	r16, 4
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <vfprintf+0x2ea>
    18e0:	fe 01       	movw	r30, r28
    18e2:	ed 0d       	add	r30, r13
    18e4:	f1 1d       	adc	r31, r1
    18e6:	20 81       	ld	r18, Z
    18e8:	20 33       	cpi	r18, 0x30	; 48
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <vfprintf+0x2e2>
    18ec:	09 7e       	andi	r16, 0xE9	; 233
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <vfprintf+0x2f4>
    18f0:	02 ff       	sbrs	r16, 2
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <vfprintf+0x2f2>
    18f4:	1e 5f       	subi	r17, 0xFE	; 254
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <vfprintf+0x2f4>
    18f8:	86 78       	andi	r24, 0x86	; 134
    18fa:	90 70       	andi	r25, 0x00	; 0
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	09 f0       	breq	.+2      	; 0x1902 <vfprintf+0x2f4>
    1900:	1f 5f       	subi	r17, 0xFF	; 255
    1902:	80 2e       	mov	r8, r16
    1904:	99 24       	eor	r9, r9
    1906:	03 fd       	sbrc	r16, 3
    1908:	12 c0       	rjmp	.+36     	; 0x192e <vfprintf+0x320>
    190a:	00 ff       	sbrs	r16, 0
    190c:	0d c0       	rjmp	.+26     	; 0x1928 <vfprintf+0x31a>
    190e:	fd 2c       	mov	r15, r13
    1910:	1e 15       	cp	r17, r14
    1912:	50 f4       	brcc	.+20     	; 0x1928 <vfprintf+0x31a>
    1914:	fe 0c       	add	r15, r14
    1916:	f1 1a       	sub	r15, r17
    1918:	1e 2d       	mov	r17, r14
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <vfprintf+0x31a>
    191c:	80 e2       	ldi	r24, 0x20	; 32
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	b3 01       	movw	r22, r6
    1922:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    1926:	1f 5f       	subi	r17, 0xFF	; 255
    1928:	1e 15       	cp	r17, r14
    192a:	c0 f3       	brcs	.-16     	; 0x191c <vfprintf+0x30e>
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <vfprintf+0x328>
    192e:	1e 15       	cp	r17, r14
    1930:	10 f4       	brcc	.+4      	; 0x1936 <vfprintf+0x328>
    1932:	e1 1a       	sub	r14, r17
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <vfprintf+0x32a>
    1936:	ee 24       	eor	r14, r14
    1938:	84 fe       	sbrs	r8, 4
    193a:	0f c0       	rjmp	.+30     	; 0x195a <vfprintf+0x34c>
    193c:	80 e3       	ldi	r24, 0x30	; 48
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b3 01       	movw	r22, r6
    1942:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    1946:	82 fe       	sbrs	r8, 2
    1948:	1f c0       	rjmp	.+62     	; 0x1988 <vfprintf+0x37a>
    194a:	81 fe       	sbrs	r8, 1
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <vfprintf+0x346>
    194e:	88 e5       	ldi	r24, 0x58	; 88
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	10 c0       	rjmp	.+32     	; 0x1974 <vfprintf+0x366>
    1954:	88 e7       	ldi	r24, 0x78	; 120
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0d c0       	rjmp	.+26     	; 0x1974 <vfprintf+0x366>
    195a:	c4 01       	movw	r24, r8
    195c:	86 78       	andi	r24, 0x86	; 134
    195e:	90 70       	andi	r25, 0x00	; 0
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	91 f0       	breq	.+36     	; 0x1988 <vfprintf+0x37a>
    1964:	81 fc       	sbrc	r8, 1
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x35e>
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	01 c0       	rjmp	.+2      	; 0x196e <vfprintf+0x360>
    196c:	8b e2       	ldi	r24, 0x2B	; 43
    196e:	07 fd       	sbrc	r16, 7
    1970:	8d e2       	ldi	r24, 0x2D	; 45
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	b3 01       	movw	r22, r6
    1976:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x37a>
    197c:	80 e3       	ldi	r24, 0x30	; 48
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	b3 01       	movw	r22, r6
    1982:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    1986:	fa 94       	dec	r15
    1988:	df 14       	cp	r13, r15
    198a:	c0 f3       	brcs	.-16     	; 0x197c <vfprintf+0x36e>
    198c:	da 94       	dec	r13
    198e:	f2 01       	movw	r30, r4
    1990:	ed 0d       	add	r30, r13
    1992:	f1 1d       	adc	r31, r1
    1994:	80 81       	ld	r24, Z
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b3 01       	movw	r22, r6
    199a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    199e:	dd 20       	and	r13, r13
    19a0:	a9 f7       	brne	.-22     	; 0x198c <vfprintf+0x37e>
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <vfprintf+0x3a2>
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	b3 01       	movw	r22, r6
    19aa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <fputc>
    19ae:	ea 94       	dec	r14
    19b0:	ee 20       	and	r14, r14
    19b2:	c1 f7       	brne	.-16     	; 0x19a4 <vfprintf+0x396>
    19b4:	40 ce       	rjmp	.-896    	; 0x1636 <vfprintf+0x28>
    19b6:	f3 01       	movw	r30, r6
    19b8:	86 81       	ldd	r24, Z+6	; 0x06
    19ba:	97 81       	ldd	r25, Z+7	; 0x07
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <vfprintf+0x3b4>
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	9f ef       	ldi	r25, 0xFF	; 255
    19c2:	2d 96       	adiw	r28, 0x0d	; 13
    19c4:	e2 e1       	ldi	r30, 0x12	; 18
    19c6:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__epilogue_restores__>

000019ca <strnlen_P>:
    19ca:	fc 01       	movw	r30, r24
    19cc:	05 90       	lpm	r0, Z+
    19ce:	61 50       	subi	r22, 0x01	; 1
    19d0:	70 40       	sbci	r23, 0x00	; 0
    19d2:	01 10       	cpse	r0, r1
    19d4:	d8 f7       	brcc	.-10     	; 0x19cc <strnlen_P+0x2>
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	8e 0f       	add	r24, r30
    19dc:	9f 1f       	adc	r25, r31
    19de:	08 95       	ret

000019e0 <strnlen>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	61 50       	subi	r22, 0x01	; 1
    19e4:	70 40       	sbci	r23, 0x00	; 0
    19e6:	01 90       	ld	r0, Z+
    19e8:	01 10       	cpse	r0, r1
    19ea:	d8 f7       	brcc	.-10     	; 0x19e2 <strnlen+0x2>
    19ec:	80 95       	com	r24
    19ee:	90 95       	com	r25
    19f0:	8e 0f       	add	r24, r30
    19f2:	9f 1f       	adc	r25, r31
    19f4:	08 95       	ret

000019f6 <fputc>:
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	8c 01       	movw	r16, r24
    1a00:	eb 01       	movw	r28, r22
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	81 ff       	sbrs	r24, 1
    1a06:	1b c0       	rjmp	.+54     	; 0x1a3e <fputc+0x48>
    1a08:	82 ff       	sbrs	r24, 2
    1a0a:	0d c0       	rjmp	.+26     	; 0x1a26 <fputc+0x30>
    1a0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	64 f4       	brge	.+24     	; 0x1a32 <fputc+0x3c>
    1a1a:	e8 81       	ld	r30, Y
    1a1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a1e:	01 93       	st	Z+, r16
    1a20:	f9 83       	std	Y+1, r31	; 0x01
    1a22:	e8 83       	st	Y, r30
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <fputc+0x3c>
    1a26:	e8 85       	ldd	r30, Y+8	; 0x08
    1a28:	f9 85       	ldd	r31, Y+9	; 0x09
    1a2a:	80 2f       	mov	r24, r16
    1a2c:	09 95       	icall
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	31 f4       	brne	.+12     	; 0x1a3e <fputc+0x48>
    1a32:	8e 81       	ldd	r24, Y+6	; 0x06
    1a34:	9f 81       	ldd	r25, Y+7	; 0x07
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	9f 83       	std	Y+7, r25	; 0x07
    1a3a:	8e 83       	std	Y+6, r24	; 0x06
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <fputc+0x4c>
    1a3e:	0f ef       	ldi	r16, 0xFF	; 255
    1a40:	1f ef       	ldi	r17, 0xFF	; 255
    1a42:	c8 01       	movw	r24, r16
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	08 95       	ret

00001a4e <__ultoa_invert>:
    1a4e:	fa 01       	movw	r30, r20
    1a50:	aa 27       	eor	r26, r26
    1a52:	28 30       	cpi	r18, 0x08	; 8
    1a54:	51 f1       	breq	.+84     	; 0x1aaa <__ultoa_invert+0x5c>
    1a56:	20 31       	cpi	r18, 0x10	; 16
    1a58:	81 f1       	breq	.+96     	; 0x1aba <__ultoa_invert+0x6c>
    1a5a:	e8 94       	clt
    1a5c:	6f 93       	push	r22
    1a5e:	6e 7f       	andi	r22, 0xFE	; 254
    1a60:	6e 5f       	subi	r22, 0xFE	; 254
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	8f 4f       	sbci	r24, 0xFF	; 255
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	af 4f       	sbci	r26, 0xFF	; 255
    1a6a:	b1 e0       	ldi	r27, 0x01	; 1
    1a6c:	3e d0       	rcall	.+124    	; 0x1aea <__ultoa_invert+0x9c>
    1a6e:	b4 e0       	ldi	r27, 0x04	; 4
    1a70:	3c d0       	rcall	.+120    	; 0x1aea <__ultoa_invert+0x9c>
    1a72:	67 0f       	add	r22, r23
    1a74:	78 1f       	adc	r23, r24
    1a76:	89 1f       	adc	r24, r25
    1a78:	9a 1f       	adc	r25, r26
    1a7a:	a1 1d       	adc	r26, r1
    1a7c:	68 0f       	add	r22, r24
    1a7e:	79 1f       	adc	r23, r25
    1a80:	8a 1f       	adc	r24, r26
    1a82:	91 1d       	adc	r25, r1
    1a84:	a1 1d       	adc	r26, r1
    1a86:	6a 0f       	add	r22, r26
    1a88:	71 1d       	adc	r23, r1
    1a8a:	81 1d       	adc	r24, r1
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	a1 1d       	adc	r26, r1
    1a90:	20 d0       	rcall	.+64     	; 0x1ad2 <__ultoa_invert+0x84>
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <__ultoa_invert+0x48>
    1a94:	68 94       	set
    1a96:	3f 91       	pop	r19
    1a98:	2a e0       	ldi	r18, 0x0A	; 10
    1a9a:	26 9f       	mul	r18, r22
    1a9c:	11 24       	eor	r1, r1
    1a9e:	30 19       	sub	r19, r0
    1aa0:	30 5d       	subi	r19, 0xD0	; 208
    1aa2:	31 93       	st	Z+, r19
    1aa4:	de f6       	brtc	.-74     	; 0x1a5c <__ultoa_invert+0xe>
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	08 95       	ret
    1aaa:	46 2f       	mov	r20, r22
    1aac:	47 70       	andi	r20, 0x07	; 7
    1aae:	40 5d       	subi	r20, 0xD0	; 208
    1ab0:	41 93       	st	Z+, r20
    1ab2:	b3 e0       	ldi	r27, 0x03	; 3
    1ab4:	0f d0       	rcall	.+30     	; 0x1ad4 <__ultoa_invert+0x86>
    1ab6:	c9 f7       	brne	.-14     	; 0x1aaa <__ultoa_invert+0x5c>
    1ab8:	f6 cf       	rjmp	.-20     	; 0x1aa6 <__ultoa_invert+0x58>
    1aba:	46 2f       	mov	r20, r22
    1abc:	4f 70       	andi	r20, 0x0F	; 15
    1abe:	40 5d       	subi	r20, 0xD0	; 208
    1ac0:	4a 33       	cpi	r20, 0x3A	; 58
    1ac2:	18 f0       	brcs	.+6      	; 0x1aca <__ultoa_invert+0x7c>
    1ac4:	49 5d       	subi	r20, 0xD9	; 217
    1ac6:	31 fd       	sbrc	r19, 1
    1ac8:	40 52       	subi	r20, 0x20	; 32
    1aca:	41 93       	st	Z+, r20
    1acc:	02 d0       	rcall	.+4      	; 0x1ad2 <__ultoa_invert+0x84>
    1ace:	a9 f7       	brne	.-22     	; 0x1aba <__ultoa_invert+0x6c>
    1ad0:	ea cf       	rjmp	.-44     	; 0x1aa6 <__ultoa_invert+0x58>
    1ad2:	b4 e0       	ldi	r27, 0x04	; 4
    1ad4:	a6 95       	lsr	r26
    1ad6:	97 95       	ror	r25
    1ad8:	87 95       	ror	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	ba 95       	dec	r27
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <__ultoa_invert+0x86>
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	61 05       	cpc	r22, r1
    1ae6:	71 05       	cpc	r23, r1
    1ae8:	08 95       	ret
    1aea:	9b 01       	movw	r18, r22
    1aec:	ac 01       	movw	r20, r24
    1aee:	0a 2e       	mov	r0, r26
    1af0:	06 94       	lsr	r0
    1af2:	57 95       	ror	r21
    1af4:	47 95       	ror	r20
    1af6:	37 95       	ror	r19
    1af8:	27 95       	ror	r18
    1afa:	ba 95       	dec	r27
    1afc:	c9 f7       	brne	.-14     	; 0x1af0 <__ultoa_invert+0xa2>
    1afe:	62 0f       	add	r22, r18
    1b00:	73 1f       	adc	r23, r19
    1b02:	84 1f       	adc	r24, r20
    1b04:	95 1f       	adc	r25, r21
    1b06:	a0 1d       	adc	r26, r0
    1b08:	08 95       	ret

00001b0a <__prologue_saves__>:
    1b0a:	2f 92       	push	r2
    1b0c:	3f 92       	push	r3
    1b0e:	4f 92       	push	r4
    1b10:	5f 92       	push	r5
    1b12:	6f 92       	push	r6
    1b14:	7f 92       	push	r7
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	ca 1b       	sub	r28, r26
    1b34:	db 0b       	sbc	r29, r27
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	09 94       	ijmp

00001b42 <__epilogue_restores__>:
    1b42:	2a 88       	ldd	r2, Y+18	; 0x12
    1b44:	39 88       	ldd	r3, Y+17	; 0x11
    1b46:	48 88       	ldd	r4, Y+16	; 0x10
    1b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b54:	b9 84       	ldd	r11, Y+9	; 0x09
    1b56:	c8 84       	ldd	r12, Y+8	; 0x08
    1b58:	df 80       	ldd	r13, Y+7	; 0x07
    1b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b60:	1b 81       	ldd	r17, Y+3	; 0x03
    1b62:	aa 81       	ldd	r26, Y+2	; 0x02
    1b64:	b9 81       	ldd	r27, Y+1	; 0x01
    1b66:	ce 0f       	add	r28, r30
    1b68:	d1 1d       	adc	r29, r1
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	ed 01       	movw	r28, r26
    1b76:	08 95       	ret

00001b78 <_exit>:
    1b78:	f8 94       	cli

00001b7a <__stop_program>:
    1b7a:	ff cf       	rjmp	.-2      	; 0x1b7a <__stop_program>
