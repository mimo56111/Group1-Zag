
driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002e08  00002e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800090  00800090  00002ecc  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000089b  00000000  00000000  00005860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e0  00000000  00000000  00006100  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042df  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015f5  00000000  00000000  0000a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b8c  00000000  00000000  0000bdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cb4  00000000  00000000  0000d940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e3  00000000  00000000  0000e5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032be  00000000  00000000  0000f7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00012a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_4>
      14:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__vector_10>
      2c:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      8a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
#include "stdmacros.h"
#include "Register.h"
#include "Data_type.h"
void ADC_vInit(){
	/* Configure Vref (Vcc on AVCC with external capacitor at Vref pin)*/
	SET_BIT(myADMUX,myREFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(myADMUX,myREFS1);
      94:	3f 9a       	sbi	0x07, 7	; 7
	/* Enable ADC */
	SET_BIT(myADCSRA,myADEN);
      96:	37 9a       	sbi	0x06, 7	; 6
	/* Adjust ADC Clock make the division factor 64 because we use freq. 8M so 8M/64=125KHz */
	SET_BIT(myADCSRA,myADPS2);
      98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(myADCSRA,myADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
	CLR_BIT(myADCSRA,myADPS0);
      9c:	30 98       	cbi	0x06, 0	; 6
}
      9e:	08 95       	ret

000000a0 <ADC_u16Read_Single_Endded>:
u16 ADC_u16Read_Single_Endded(u8 channel_number){
	u16 read_value ;
	/* Must be from 0>>7 to select one of these pin ADC0,1,2 */
	channel_number &=0x07;   
	/* Clear from MUX4 to MUX0 before set the required bit */
	myADMUX &=0xE0;    
      a0:	97 b1       	in	r25, 0x07	; 7
      a2:	90 7e       	andi	r25, 0xE0	; 224
      a4:	97 b9       	out	0x07, r25	; 7
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	myADMUX = myADMUX | channel_number; 
      a6:	97 b1       	in	r25, 0x07	; 7
}

u16 ADC_u16Read_Single_Endded(u8 channel_number){
	u16 read_value ;
	/* Must be from 0>>7 to select one of these pin ADC0,1,2 */
	channel_number &=0x07;   
      a8:	87 70       	andi	r24, 0x07	; 7
	/* Clear from MUX4 to MUX0 before set the required bit */
	myADMUX &=0xE0;    
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	myADMUX = myADMUX | channel_number; 
      aa:	98 2b       	or	r25, r24
      ac:	97 b9       	out	0x07, r25	; 7
	/* Start the conversion by set Bit (ADSC) */
	SET_BIT(myADCSRA,myADSC);
      ae:	36 9a       	sbi	0x06, 6	; 6
	/*Wait for the conversion to complete and ADIF(Bit 4) become 1 */
	while(IS_BIT_CLR(myADCSRA,myADIF)); 
      b0:	34 9b       	sbis	0x06, 4	; 6
      b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_u16Read_Single_Endded+0x10>
	/* Clear ADIF by write'1' to it */
	SET_BIT(myADCSRA,myADIF);
      b4:	34 9a       	sbi	0x06, 4	; 6
	/* Combine ADCL +ADCH */
	read_value = myADCL; 
      b6:	84 b1       	in	r24, 0x04	; 4
      b8:	90 e0       	ldi	r25, 0x00	; 0
	read_value |= (myADCH<<8);   
      ba:	45 b1       	in	r20, 0x05	; 5
      bc:	34 2f       	mov	r19, r20
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	82 2b       	or	r24, r18
      c2:	93 2b       	or	r25, r19
	      
	
	/* Return value*/                             
	return read_value;
      c4:	08 95       	ret

000000c6 <button_vInit>:
#include "GPIO_MCAL.h"
#define F_CPU 8000000UL
#include "util/delay.h"

void button_vInit( u8 port,u8 pin ){
	GPIO_vsetPIN_DIR(port, pin,0);
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	
}
      cc:	08 95       	ret

000000ce <button_u8read>:

u8 button_u8read( u8 port,u8 pin ){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
      ce:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_u8read_PIN>
	
	return x;
}
      d2:	08 95       	ret

000000d4 <main>:
#include "Data_type.h"
#include "LED_driver_ECU.h"
#include "Button_driver_ECU.h"

int main(void){
	button_vInit('B',0);
      d4:	82 e4       	ldi	r24, 0x42	; 66
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	0e 94 63 00 	call	0xc6	; 0xc6 <button_vInit>
	LED_vintialize('D',2);
      dc:	84 e4       	ldi	r24, 0x44	; 68
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	0e 94 c5 08 	call	0x118a	; 0x118a <LED_vintialize>
	while(1){
		
		if (button_u8read('B',0)==1){
      e4:	82 e4       	ldi	r24, 0x42	; 66
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	0e 94 67 00 	call	0xce	; 0xce <button_u8read>
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	29 f4       	brne	.+10     	; 0xfa <main+0x26>
			LED_vTurnon('D',2);
      f0:	84 e4       	ldi	r24, 0x44	; 68
      f2:	62 e0       	ldi	r22, 0x02	; 2
      f4:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_vTurnon>
      f8:	f5 cf       	rjmp	.-22     	; 0xe4 <main+0x10>
		}else{
			LED_vTurnoff('D',2);
      fa:	84 e4       	ldi	r24, 0x44	; 68
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	0e 94 cd 08 	call	0x119a	; 0x119a <LED_vTurnoff>
     102:	f0 cf       	rjmp	.-32     	; 0xe4 <main+0x10>

00000104 <EEPROM_Write>:
 */ 
#include "Register.h"
#include "stdmacros.h"
#include "Data_type.h"
void EEPROM_Write(u16 address , u8 value){
	myEEARL = (u8)address;      
     104:	8e bb       	out	0x1e, r24	; 30
	myEEARH= (u8)(address>>8);
     106:	9f bb       	out	0x1f, r25	; 31
	myEEDR = value;
     108:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(myEECR , myEEMWE);
     10a:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(myEECR , myEEWE);
     10c:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(myEECR , myEEWE)==1);
     10e:	e1 99       	sbic	0x1c, 1	; 28
     110:	fe cf       	rjmp	.-4      	; 0x10e <EEPROM_Write+0xa>
}
     112:	08 95       	ret

00000114 <EEPROM_Read>:



u8 EEPROM_Read(const u16 address){
	myEEARL = (u8)address;
     114:	8e bb       	out	0x1e, r24	; 30
	myEEARH = (u8)(address>>8);
     116:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(myEECR , myEERE);
     118:	e0 9a       	sbi	0x1c, 0	; 28
	return myEEDR;
     11a:	8d b3       	in	r24, 0x1d	; 29
     11c:	08 95       	ret

0000011e <GPIO_voidInit>:
#include "GPIO_MCAL.h"

//================================Initialization=======================================
 void GPIO_voidInit(void){
	 /*Comment!: DDR initialization  */
	myDDRA = Init_direction_default;
     11e:	1a ba       	out	0x1a, r1	; 26
	myDDRB = Init_direction_default;
     120:	17 ba       	out	0x17, r1	; 23
	myDDRC = Init_direction_default;
     122:	14 ba       	out	0x14, r1	; 20
	myDDRD = Init_direction_default;
     124:	11 ba       	out	0x11, r1	; 17
 }
     126:	08 95       	ret

00000128 <GPIO_vsetPIN_DIR>:
//=====================================================================================

//===================================PIN===============================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir ){
	switch (portnum){
     128:	84 34       	cpi	r24, 0x44	; 68
     12a:	09 f4       	brne	.+2      	; 0x12e <GPIO_vsetPIN_DIR+0x6>
     12c:	71 c0       	rjmp	.+226    	; 0x210 <GPIO_vsetPIN_DIR+0xe8>
     12e:	85 34       	cpi	r24, 0x45	; 69
     130:	48 f4       	brcc	.+18     	; 0x144 <GPIO_vsetPIN_DIR+0x1c>
     132:	82 34       	cpi	r24, 0x42	; 66
     134:	99 f1       	breq	.+102    	; 0x19c <GPIO_vsetPIN_DIR+0x74>
     136:	83 34       	cpi	r24, 0x43	; 67
     138:	08 f0       	brcs	.+2      	; 0x13c <GPIO_vsetPIN_DIR+0x14>
     13a:	4d c0       	rjmp	.+154    	; 0x1d6 <GPIO_vsetPIN_DIR+0xae>
     13c:	81 34       	cpi	r24, 0x41	; 65
     13e:	09 f0       	breq	.+2      	; 0x142 <GPIO_vsetPIN_DIR+0x1a>
     140:	83 c0       	rjmp	.+262    	; 0x248 <GPIO_vsetPIN_DIR+0x120>
     142:	0f c0       	rjmp	.+30     	; 0x162 <GPIO_vsetPIN_DIR+0x3a>
     144:	82 36       	cpi	r24, 0x62	; 98
     146:	51 f1       	breq	.+84     	; 0x19c <GPIO_vsetPIN_DIR+0x74>
     148:	83 36       	cpi	r24, 0x63	; 99
     14a:	20 f4       	brcc	.+8      	; 0x154 <GPIO_vsetPIN_DIR+0x2c>
     14c:	81 36       	cpi	r24, 0x61	; 97
     14e:	09 f0       	breq	.+2      	; 0x152 <GPIO_vsetPIN_DIR+0x2a>
     150:	7b c0       	rjmp	.+246    	; 0x248 <GPIO_vsetPIN_DIR+0x120>
     152:	07 c0       	rjmp	.+14     	; 0x162 <GPIO_vsetPIN_DIR+0x3a>
     154:	83 36       	cpi	r24, 0x63	; 99
     156:	09 f4       	brne	.+2      	; 0x15a <GPIO_vsetPIN_DIR+0x32>
     158:	3e c0       	rjmp	.+124    	; 0x1d6 <GPIO_vsetPIN_DIR+0xae>
     15a:	84 36       	cpi	r24, 0x64	; 100
     15c:	09 f0       	breq	.+2      	; 0x160 <GPIO_vsetPIN_DIR+0x38>
     15e:	74 c0       	rjmp	.+232    	; 0x248 <GPIO_vsetPIN_DIR+0x120>
     160:	57 c0       	rjmp	.+174    	; 0x210 <GPIO_vsetPIN_DIR+0xe8>
		case 'A' :
		case 'a' :
			if(dir == 1){
     162:	41 30       	cpi	r20, 0x01	; 1
     164:	69 f4       	brne	.+26     	; 0x180 <GPIO_vsetPIN_DIR+0x58>
				SET_BIT(myDDRA , pinnum);
     166:	2a b3       	in	r18, 0x1a	; 26
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	ac 01       	movw	r20, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <GPIO_vsetPIN_DIR+0x4c>
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <GPIO_vsetPIN_DIR+0x48>
     178:	ba 01       	movw	r22, r20
     17a:	62 2b       	or	r22, r18
     17c:	6a bb       	out	0x1a, r22	; 26
     17e:	08 95       	ret
			}else{
				CLR_BIT(myDDRA , pinnum);
     180:	2a b3       	in	r18, 0x1a	; 26
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	ac 01       	movw	r20, r24
     188:	02 c0       	rjmp	.+4      	; 0x18e <GPIO_vsetPIN_DIR+0x66>
     18a:	44 0f       	add	r20, r20
     18c:	55 1f       	adc	r21, r21
     18e:	6a 95       	dec	r22
     190:	e2 f7       	brpl	.-8      	; 0x18a <GPIO_vsetPIN_DIR+0x62>
     192:	ba 01       	movw	r22, r20
     194:	60 95       	com	r22
     196:	62 23       	and	r22, r18
     198:	6a bb       	out	0x1a, r22	; 26
     19a:	08 95       	ret
			}
			break;
		case 'b' :
		case 'B' :
			if(dir == 1){
     19c:	41 30       	cpi	r20, 0x01	; 1
     19e:	69 f4       	brne	.+26     	; 0x1ba <GPIO_vsetPIN_DIR+0x92>
				SET_BIT(myDDRB , pinnum);
     1a0:	27 b3       	in	r18, 0x17	; 23
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	ac 01       	movw	r20, r24
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GPIO_vsetPIN_DIR+0x86>
     1aa:	44 0f       	add	r20, r20
     1ac:	55 1f       	adc	r21, r21
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GPIO_vsetPIN_DIR+0x82>
     1b2:	ba 01       	movw	r22, r20
     1b4:	62 2b       	or	r22, r18
     1b6:	67 bb       	out	0x17, r22	; 23
     1b8:	08 95       	ret
			}else{
				CLR_BIT(myDDRB , pinnum);
     1ba:	27 b3       	in	r18, 0x17	; 23
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <GPIO_vsetPIN_DIR+0xa0>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <GPIO_vsetPIN_DIR+0x9c>
     1cc:	ba 01       	movw	r22, r20
     1ce:	60 95       	com	r22
     1d0:	62 23       	and	r22, r18
     1d2:	67 bb       	out	0x17, r22	; 23
     1d4:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	69 f4       	brne	.+26     	; 0x1f4 <GPIO_vsetPIN_DIR+0xcc>
				SET_BIT(myDDRC , pinnum);
     1da:	24 b3       	in	r18, 0x14	; 20
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	ac 01       	movw	r20, r24
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <GPIO_vsetPIN_DIR+0xc0>
     1e4:	44 0f       	add	r20, r20
     1e6:	55 1f       	adc	r21, r21
     1e8:	6a 95       	dec	r22
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <GPIO_vsetPIN_DIR+0xbc>
     1ec:	ba 01       	movw	r22, r20
     1ee:	62 2b       	or	r22, r18
     1f0:	64 bb       	out	0x14, r22	; 20
     1f2:	08 95       	ret
			}else{
				CLR_BIT(myDDRC , pinnum);
     1f4:	24 b3       	in	r18, 0x14	; 20
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ac 01       	movw	r20, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <GPIO_vsetPIN_DIR+0xda>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <GPIO_vsetPIN_DIR+0xd6>
     206:	ba 01       	movw	r22, r20
     208:	60 95       	com	r22
     20a:	62 23       	and	r22, r18
     20c:	64 bb       	out	0x14, r22	; 20
     20e:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
     210:	41 30       	cpi	r20, 0x01	; 1
     212:	69 f4       	brne	.+26     	; 0x22e <GPIO_vsetPIN_DIR+0x106>
				SET_BIT(myDDRD , pinnum);
     214:	21 b3       	in	r18, 0x11	; 17
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	ac 01       	movw	r20, r24
     21c:	02 c0       	rjmp	.+4      	; 0x222 <GPIO_vsetPIN_DIR+0xfa>
     21e:	44 0f       	add	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <GPIO_vsetPIN_DIR+0xf6>
     226:	ba 01       	movw	r22, r20
     228:	62 2b       	or	r22, r18
     22a:	61 bb       	out	0x11, r22	; 17
     22c:	08 95       	ret
			}else{
				CLR_BIT(myDDRD , pinnum);
     22e:	21 b3       	in	r18, 0x11	; 17
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <GPIO_vsetPIN_DIR+0x114>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <GPIO_vsetPIN_DIR+0x110>
     240:	ba 01       	movw	r22, r20
     242:	60 95       	com	r22
     244:	62 23       	and	r22, r18
     246:	61 bb       	out	0x11, r22	; 17
     248:	08 95       	ret

0000024a <GPIO_vwrite_PIN>:
	}
	
}

void GPIO_vwrite_PIN(u8 portnum , u8 pinnum , u8 value ){
	switch(portnum){
     24a:	84 34       	cpi	r24, 0x44	; 68
     24c:	09 f4       	brne	.+2      	; 0x250 <GPIO_vwrite_PIN+0x6>
     24e:	71 c0       	rjmp	.+226    	; 0x332 <GPIO_vwrite_PIN+0xe8>
     250:	85 34       	cpi	r24, 0x45	; 69
     252:	48 f4       	brcc	.+18     	; 0x266 <GPIO_vwrite_PIN+0x1c>
     254:	82 34       	cpi	r24, 0x42	; 66
     256:	99 f1       	breq	.+102    	; 0x2be <GPIO_vwrite_PIN+0x74>
     258:	83 34       	cpi	r24, 0x43	; 67
     25a:	08 f0       	brcs	.+2      	; 0x25e <GPIO_vwrite_PIN+0x14>
     25c:	4d c0       	rjmp	.+154    	; 0x2f8 <GPIO_vwrite_PIN+0xae>
     25e:	81 34       	cpi	r24, 0x41	; 65
     260:	09 f0       	breq	.+2      	; 0x264 <GPIO_vwrite_PIN+0x1a>
     262:	83 c0       	rjmp	.+262    	; 0x36a <GPIO_vwrite_PIN+0x120>
     264:	0f c0       	rjmp	.+30     	; 0x284 <GPIO_vwrite_PIN+0x3a>
     266:	82 36       	cpi	r24, 0x62	; 98
     268:	51 f1       	breq	.+84     	; 0x2be <GPIO_vwrite_PIN+0x74>
     26a:	83 36       	cpi	r24, 0x63	; 99
     26c:	20 f4       	brcc	.+8      	; 0x276 <GPIO_vwrite_PIN+0x2c>
     26e:	81 36       	cpi	r24, 0x61	; 97
     270:	09 f0       	breq	.+2      	; 0x274 <GPIO_vwrite_PIN+0x2a>
     272:	7b c0       	rjmp	.+246    	; 0x36a <GPIO_vwrite_PIN+0x120>
     274:	07 c0       	rjmp	.+14     	; 0x284 <GPIO_vwrite_PIN+0x3a>
     276:	83 36       	cpi	r24, 0x63	; 99
     278:	09 f4       	brne	.+2      	; 0x27c <GPIO_vwrite_PIN+0x32>
     27a:	3e c0       	rjmp	.+124    	; 0x2f8 <GPIO_vwrite_PIN+0xae>
     27c:	84 36       	cpi	r24, 0x64	; 100
     27e:	09 f0       	breq	.+2      	; 0x282 <GPIO_vwrite_PIN+0x38>
     280:	74 c0       	rjmp	.+232    	; 0x36a <GPIO_vwrite_PIN+0x120>
     282:	57 c0       	rjmp	.+174    	; 0x332 <GPIO_vwrite_PIN+0xe8>
		case 'A':
		case 'a':
			if (value ==1){
     284:	41 30       	cpi	r20, 0x01	; 1
     286:	69 f4       	brne	.+26     	; 0x2a2 <GPIO_vwrite_PIN+0x58>
				SET_BIT(myPORTA , pinnum);
     288:	2b b3       	in	r18, 0x1b	; 27
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	ac 01       	movw	r20, r24
     290:	02 c0       	rjmp	.+4      	; 0x296 <GPIO_vwrite_PIN+0x4c>
     292:	44 0f       	add	r20, r20
     294:	55 1f       	adc	r21, r21
     296:	6a 95       	dec	r22
     298:	e2 f7       	brpl	.-8      	; 0x292 <GPIO_vwrite_PIN+0x48>
     29a:	ba 01       	movw	r22, r20
     29c:	62 2b       	or	r22, r18
     29e:	6b bb       	out	0x1b, r22	; 27
     2a0:	08 95       	ret
			}else {
				CLR_BIT(myPORTA , pinnum);
     2a2:	2b b3       	in	r18, 0x1b	; 27
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	ac 01       	movw	r20, r24
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <GPIO_vwrite_PIN+0x66>
     2ac:	44 0f       	add	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <GPIO_vwrite_PIN+0x62>
     2b4:	ba 01       	movw	r22, r20
     2b6:	60 95       	com	r22
     2b8:	62 23       	and	r22, r18
     2ba:	6b bb       	out	0x1b, r22	; 27
     2bc:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if (value ==1){
     2be:	41 30       	cpi	r20, 0x01	; 1
     2c0:	69 f4       	brne	.+26     	; 0x2dc <GPIO_vwrite_PIN+0x92>
				SET_BIT(myPORTB , pinnum);
     2c2:	28 b3       	in	r18, 0x18	; 24
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	ac 01       	movw	r20, r24
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <GPIO_vwrite_PIN+0x86>
     2cc:	44 0f       	add	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	6a 95       	dec	r22
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <GPIO_vwrite_PIN+0x82>
     2d4:	ba 01       	movw	r22, r20
     2d6:	62 2b       	or	r22, r18
     2d8:	68 bb       	out	0x18, r22	; 24
     2da:	08 95       	ret
			}else {
				CLR_BIT(myPORTB , pinnum);
     2dc:	28 b3       	in	r18, 0x18	; 24
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	ac 01       	movw	r20, r24
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GPIO_vwrite_PIN+0xa0>
     2e6:	44 0f       	add	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GPIO_vwrite_PIN+0x9c>
     2ee:	ba 01       	movw	r22, r20
     2f0:	60 95       	com	r22
     2f2:	62 23       	and	r22, r18
     2f4:	68 bb       	out	0x18, r22	; 24
     2f6:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (value ==1){
     2f8:	41 30       	cpi	r20, 0x01	; 1
     2fa:	69 f4       	brne	.+26     	; 0x316 <GPIO_vwrite_PIN+0xcc>
				SET_BIT(myPORTC , pinnum);
     2fc:	25 b3       	in	r18, 0x15	; 21
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	ac 01       	movw	r20, r24
     304:	02 c0       	rjmp	.+4      	; 0x30a <GPIO_vwrite_PIN+0xc0>
     306:	44 0f       	add	r20, r20
     308:	55 1f       	adc	r21, r21
     30a:	6a 95       	dec	r22
     30c:	e2 f7       	brpl	.-8      	; 0x306 <GPIO_vwrite_PIN+0xbc>
     30e:	ba 01       	movw	r22, r20
     310:	62 2b       	or	r22, r18
     312:	65 bb       	out	0x15, r22	; 21
     314:	08 95       	ret
			}else {
				CLR_BIT(myPORTC , pinnum);
     316:	25 b3       	in	r18, 0x15	; 21
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	ac 01       	movw	r20, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <GPIO_vwrite_PIN+0xda>
     320:	44 0f       	add	r20, r20
     322:	55 1f       	adc	r21, r21
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <GPIO_vwrite_PIN+0xd6>
     328:	ba 01       	movw	r22, r20
     32a:	60 95       	com	r22
     32c:	62 23       	and	r22, r18
     32e:	65 bb       	out	0x15, r22	; 21
     330:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (value ==1){
     332:	41 30       	cpi	r20, 0x01	; 1
     334:	69 f4       	brne	.+26     	; 0x350 <GPIO_vwrite_PIN+0x106>
				SET_BIT(myPORTD , pinnum);
     336:	22 b3       	in	r18, 0x12	; 18
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	ac 01       	movw	r20, r24
     33e:	02 c0       	rjmp	.+4      	; 0x344 <GPIO_vwrite_PIN+0xfa>
     340:	44 0f       	add	r20, r20
     342:	55 1f       	adc	r21, r21
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <GPIO_vwrite_PIN+0xf6>
     348:	ba 01       	movw	r22, r20
     34a:	62 2b       	or	r22, r18
     34c:	62 bb       	out	0x12, r22	; 18
     34e:	08 95       	ret
			}else {
				CLR_BIT(myPORTD , pinnum);
     350:	22 b3       	in	r18, 0x12	; 18
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	ac 01       	movw	r20, r24
     358:	02 c0       	rjmp	.+4      	; 0x35e <GPIO_vwrite_PIN+0x114>
     35a:	44 0f       	add	r20, r20
     35c:	55 1f       	adc	r21, r21
     35e:	6a 95       	dec	r22
     360:	e2 f7       	brpl	.-8      	; 0x35a <GPIO_vwrite_PIN+0x110>
     362:	ba 01       	movw	r22, r20
     364:	60 95       	com	r22
     366:	62 23       	and	r22, r18
     368:	62 bb       	out	0x12, r22	; 18
     36a:	08 95       	ret

0000036c <GPIO_u8read_PIN>:
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
     36c:	84 34       	cpi	r24, 0x44	; 68
     36e:	09 f4       	brne	.+2      	; 0x372 <GPIO_u8read_PIN+0x6>
     370:	4e c0       	rjmp	.+156    	; 0x40e <GPIO_u8read_PIN+0xa2>
     372:	85 34       	cpi	r24, 0x45	; 69
     374:	40 f4       	brcc	.+16     	; 0x386 <GPIO_u8read_PIN+0x1a>
     376:	82 34       	cpi	r24, 0x42	; 66
     378:	31 f1       	breq	.+76     	; 0x3c6 <GPIO_u8read_PIN+0x5a>
     37a:	83 34       	cpi	r24, 0x43	; 67
     37c:	b0 f5       	brcc	.+108    	; 0x3ea <GPIO_u8read_PIN+0x7e>
     37e:	81 34       	cpi	r24, 0x41	; 65
     380:	09 f0       	breq	.+2      	; 0x384 <GPIO_u8read_PIN+0x18>
     382:	57 c0       	rjmp	.+174    	; 0x432 <GPIO_u8read_PIN+0xc6>
     384:	0e c0       	rjmp	.+28     	; 0x3a2 <GPIO_u8read_PIN+0x36>
     386:	82 36       	cpi	r24, 0x62	; 98
     388:	f1 f0       	breq	.+60     	; 0x3c6 <GPIO_u8read_PIN+0x5a>
     38a:	83 36       	cpi	r24, 0x63	; 99
     38c:	20 f4       	brcc	.+8      	; 0x396 <GPIO_u8read_PIN+0x2a>
     38e:	81 36       	cpi	r24, 0x61	; 97
     390:	09 f0       	breq	.+2      	; 0x394 <GPIO_u8read_PIN+0x28>
     392:	4f c0       	rjmp	.+158    	; 0x432 <GPIO_u8read_PIN+0xc6>
     394:	06 c0       	rjmp	.+12     	; 0x3a2 <GPIO_u8read_PIN+0x36>
     396:	83 36       	cpi	r24, 0x63	; 99
     398:	41 f1       	breq	.+80     	; 0x3ea <GPIO_u8read_PIN+0x7e>
     39a:	84 36       	cpi	r24, 0x64	; 100
     39c:	09 f0       	breq	.+2      	; 0x3a0 <GPIO_u8read_PIN+0x34>
     39e:	49 c0       	rjmp	.+146    	; 0x432 <GPIO_u8read_PIN+0xc6>
     3a0:	36 c0       	rjmp	.+108    	; 0x40e <GPIO_u8read_PIN+0xa2>
		case 'A':
		case 'a':
			x= READ_BIT(myPINA, pinnum);
     3a2:	29 b3       	in	r18, 0x19	; 25
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	06 2e       	mov	r0, r22
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_u8read_PIN+0x44>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_u8read_PIN+0x40>
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	82 23       	and	r24, r18
     3b8:	93 23       	and	r25, r19
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <GPIO_u8read_PIN+0x54>
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	6a 95       	dec	r22
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <GPIO_u8read_PIN+0x50>
			break;
     3c4:	08 95       	ret
		case 'B':
		case 'b':
			x= READ_BIT(myPINB , pinnum);
     3c6:	26 b3       	in	r18, 0x16	; 22
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	06 2e       	mov	r0, r22
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <GPIO_u8read_PIN+0x68>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	0a 94       	dec	r0
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <GPIO_u8read_PIN+0x64>
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	82 23       	and	r24, r18
     3dc:	93 23       	and	r25, r19
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_u8read_PIN+0x78>
     3e0:	95 95       	asr	r25
     3e2:	87 95       	ror	r24
     3e4:	6a 95       	dec	r22
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_u8read_PIN+0x74>
			break;
     3e8:	08 95       	ret
		case 'C':
		case 'c':
			x= READ_BIT(myPINC , pinnum);
     3ea:	23 b3       	in	r18, 0x13	; 19
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	06 2e       	mov	r0, r22
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <GPIO_u8read_PIN+0x8c>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <GPIO_u8read_PIN+0x88>
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	82 23       	and	r24, r18
     400:	93 23       	and	r25, r19
     402:	02 c0       	rjmp	.+4      	; 0x408 <GPIO_u8read_PIN+0x9c>
     404:	95 95       	asr	r25
     406:	87 95       	ror	r24
     408:	6a 95       	dec	r22
     40a:	e2 f7       	brpl	.-8      	; 0x404 <GPIO_u8read_PIN+0x98>
			break;
     40c:	08 95       	ret
		case 'D':
		case 'd':
			x= READ_BIT(myPIND, pinnum);
     40e:	20 b3       	in	r18, 0x10	; 16
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	06 2e       	mov	r0, r22
     416:	02 c0       	rjmp	.+4      	; 0x41c <GPIO_u8read_PIN+0xb0>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <GPIO_u8read_PIN+0xac>
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	82 23       	and	r24, r18
     424:	93 23       	and	r25, r19
     426:	02 c0       	rjmp	.+4      	; 0x42c <GPIO_u8read_PIN+0xc0>
     428:	95 95       	asr	r25
     42a:	87 95       	ror	r24
     42c:	6a 95       	dec	r22
     42e:	e2 f7       	brpl	.-8      	; 0x428 <GPIO_u8read_PIN+0xbc>
			break;
     430:	08 95       	ret
		default: break;
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
     432:	80 e0       	ldi	r24, 0x00	; 0
			x= READ_BIT(myPIND, pinnum);
			break;
		default: break;
	}
	return x;
}
     434:	08 95       	ret

00000436 <GPIO_vtoggle_PIN>:

void GPIO_vtoggle_PIN(u8 portnum, u8 pinnum){
	switch (portnum){
     436:	84 34       	cpi	r24, 0x44	; 68
     438:	09 f4       	brne	.+2      	; 0x43c <GPIO_vtoggle_PIN+0x6>
     43a:	3d c0       	rjmp	.+122    	; 0x4b6 <GPIO_vtoggle_PIN+0x80>
     43c:	85 34       	cpi	r24, 0x45	; 69
     43e:	40 f4       	brcc	.+16     	; 0x450 <GPIO_vtoggle_PIN+0x1a>
     440:	82 34       	cpi	r24, 0x42	; 66
     442:	f9 f0       	breq	.+62     	; 0x482 <GPIO_vtoggle_PIN+0x4c>
     444:	83 34       	cpi	r24, 0x43	; 67
     446:	50 f5       	brcc	.+84     	; 0x49c <GPIO_vtoggle_PIN+0x66>
     448:	81 34       	cpi	r24, 0x41	; 65
     44a:	09 f0       	breq	.+2      	; 0x44e <GPIO_vtoggle_PIN+0x18>
     44c:	40 c0       	rjmp	.+128    	; 0x4ce <GPIO_vtoggle_PIN+0x98>
     44e:	0c c0       	rjmp	.+24     	; 0x468 <GPIO_vtoggle_PIN+0x32>
     450:	82 36       	cpi	r24, 0x62	; 98
     452:	b9 f0       	breq	.+46     	; 0x482 <GPIO_vtoggle_PIN+0x4c>
     454:	83 36       	cpi	r24, 0x63	; 99
     456:	18 f4       	brcc	.+6      	; 0x45e <GPIO_vtoggle_PIN+0x28>
     458:	81 36       	cpi	r24, 0x61	; 97
     45a:	c9 f5       	brne	.+114    	; 0x4ce <GPIO_vtoggle_PIN+0x98>
     45c:	05 c0       	rjmp	.+10     	; 0x468 <GPIO_vtoggle_PIN+0x32>
     45e:	83 36       	cpi	r24, 0x63	; 99
     460:	e9 f0       	breq	.+58     	; 0x49c <GPIO_vtoggle_PIN+0x66>
     462:	84 36       	cpi	r24, 0x64	; 100
     464:	a1 f5       	brne	.+104    	; 0x4ce <GPIO_vtoggle_PIN+0x98>
     466:	27 c0       	rjmp	.+78     	; 0x4b6 <GPIO_vtoggle_PIN+0x80>
		case 'a' :
		case 'A' :
			TOGGLE_BIT(myPORTA, pinnum);
     468:	2b b3       	in	r18, 0x1b	; 27
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	ac 01       	movw	r20, r24
     470:	02 c0       	rjmp	.+4      	; 0x476 <GPIO_vtoggle_PIN+0x40>
     472:	44 0f       	add	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <GPIO_vtoggle_PIN+0x3c>
     47a:	ba 01       	movw	r22, r20
     47c:	62 27       	eor	r22, r18
     47e:	6b bb       	out	0x1b, r22	; 27
			break;
     480:	08 95       	ret
		case 'b' :
		case 'B' :
			TOGGLE_BIT(myPORTB, pinnum);
     482:	28 b3       	in	r18, 0x18	; 24
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	ac 01       	movw	r20, r24
     48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_vtoggle_PIN+0x5a>
     48c:	44 0f       	add	r20, r20
     48e:	55 1f       	adc	r21, r21
     490:	6a 95       	dec	r22
     492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_vtoggle_PIN+0x56>
     494:	ba 01       	movw	r22, r20
     496:	62 27       	eor	r22, r18
     498:	68 bb       	out	0x18, r22	; 24
			break;
     49a:	08 95       	ret
		case 'c' :
		case 'C' :
			TOGGLE_BIT(myPORTC, pinnum);
     49c:	25 b3       	in	r18, 0x15	; 21
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	ac 01       	movw	r20, r24
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <GPIO_vtoggle_PIN+0x74>
     4a6:	44 0f       	add	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	6a 95       	dec	r22
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <GPIO_vtoggle_PIN+0x70>
     4ae:	ba 01       	movw	r22, r20
     4b0:	62 27       	eor	r22, r18
     4b2:	65 bb       	out	0x15, r22	; 21
			break;
     4b4:	08 95       	ret
		case 'd' :
		case 'D' :
			TOGGLE_BIT(myPORTD, pinnum);
     4b6:	22 b3       	in	r18, 0x12	; 18
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ac 01       	movw	r20, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <GPIO_vtoggle_PIN+0x8e>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <GPIO_vtoggle_PIN+0x8a>
     4c8:	ba 01       	movw	r22, r20
     4ca:	62 27       	eor	r22, r18
     4cc:	62 bb       	out	0x12, r22	; 18
     4ce:	08 95       	ret

000004d0 <GPIO_vconnectpullup>:
		default: break;
	}
}

void GPIO_vconnectpullup( u8 port, u8 pin , u8 connect_pullup ){
	switch (port){
     4d0:	84 34       	cpi	r24, 0x44	; 68
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <GPIO_vconnectpullup+0x6>
     4d4:	7a c0       	rjmp	.+244    	; 0x5ca <GPIO_vconnectpullup+0xfa>
     4d6:	85 34       	cpi	r24, 0x45	; 69
     4d8:	48 f4       	brcc	.+18     	; 0x4ec <GPIO_vconnectpullup+0x1c>
     4da:	82 34       	cpi	r24, 0x42	; 66
     4dc:	b1 f1       	breq	.+108    	; 0x54a <GPIO_vconnectpullup+0x7a>
     4de:	83 34       	cpi	r24, 0x43	; 67
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <GPIO_vconnectpullup+0x14>
     4e2:	53 c0       	rjmp	.+166    	; 0x58a <GPIO_vconnectpullup+0xba>
     4e4:	81 34       	cpi	r24, 0x41	; 65
     4e6:	09 f0       	breq	.+2      	; 0x4ea <GPIO_vconnectpullup+0x1a>
     4e8:	8f c0       	rjmp	.+286    	; 0x608 <GPIO_vconnectpullup+0x138>
     4ea:	0f c0       	rjmp	.+30     	; 0x50a <GPIO_vconnectpullup+0x3a>
     4ec:	82 36       	cpi	r24, 0x62	; 98
     4ee:	69 f1       	breq	.+90     	; 0x54a <GPIO_vconnectpullup+0x7a>
     4f0:	83 36       	cpi	r24, 0x63	; 99
     4f2:	20 f4       	brcc	.+8      	; 0x4fc <GPIO_vconnectpullup+0x2c>
     4f4:	81 36       	cpi	r24, 0x61	; 97
     4f6:	09 f0       	breq	.+2      	; 0x4fa <GPIO_vconnectpullup+0x2a>
     4f8:	87 c0       	rjmp	.+270    	; 0x608 <GPIO_vconnectpullup+0x138>
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <GPIO_vconnectpullup+0x3a>
     4fc:	83 36       	cpi	r24, 0x63	; 99
     4fe:	09 f4       	brne	.+2      	; 0x502 <GPIO_vconnectpullup+0x32>
     500:	44 c0       	rjmp	.+136    	; 0x58a <GPIO_vconnectpullup+0xba>
     502:	84 36       	cpi	r24, 0x64	; 100
     504:	09 f0       	breq	.+2      	; 0x508 <GPIO_vconnectpullup+0x38>
     506:	80 c0       	rjmp	.+256    	; 0x608 <GPIO_vconnectpullup+0x138>
     508:	60 c0       	rjmp	.+192    	; 0x5ca <GPIO_vconnectpullup+0xfa>
		case 'A' :
		case 'a' :
			if (Connect==connect_pullup){
     50a:	41 30       	cpi	r20, 0x01	; 1
     50c:	81 f4       	brne	.+32     	; 0x52e <GPIO_vconnectpullup+0x5e>
				SET_BIT(myPORTA,pin);
     50e:	2b b3       	in	r18, 0x1b	; 27
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	ac 01       	movw	r20, r24
     516:	02 c0       	rjmp	.+4      	; 0x51c <GPIO_vconnectpullup+0x4c>
     518:	44 0f       	add	r20, r20
     51a:	55 1f       	adc	r21, r21
     51c:	6a 95       	dec	r22
     51e:	e2 f7       	brpl	.-8      	; 0x518 <GPIO_vconnectpullup+0x48>
     520:	ba 01       	movw	r22, r20
     522:	62 2b       	or	r22, r18
     524:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
     526:	80 b7       	in	r24, 0x30	; 48
     528:	8b 7f       	andi	r24, 0xFB	; 251
     52a:	80 bf       	out	0x30, r24	; 48
     52c:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pin);
     52e:	2b b3       	in	r18, 0x1b	; 27
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	ac 01       	movw	r20, r24
     536:	02 c0       	rjmp	.+4      	; 0x53c <GPIO_vconnectpullup+0x6c>
     538:	44 0f       	add	r20, r20
     53a:	55 1f       	adc	r21, r21
     53c:	6a 95       	dec	r22
     53e:	e2 f7       	brpl	.-8      	; 0x538 <GPIO_vconnectpullup+0x68>
     540:	ba 01       	movw	r22, r20
     542:	60 95       	com	r22
     544:	62 23       	and	r22, r18
     546:	6b bb       	out	0x1b, r22	; 27
     548:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect==connect_pullup){
     54a:	41 30       	cpi	r20, 0x01	; 1
     54c:	81 f4       	brne	.+32     	; 0x56e <GPIO_vconnectpullup+0x9e>
				SET_BIT(myPORTB,pin);
     54e:	28 b3       	in	r18, 0x18	; 24
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	ac 01       	movw	r20, r24
     556:	02 c0       	rjmp	.+4      	; 0x55c <GPIO_vconnectpullup+0x8c>
     558:	44 0f       	add	r20, r20
     55a:	55 1f       	adc	r21, r21
     55c:	6a 95       	dec	r22
     55e:	e2 f7       	brpl	.-8      	; 0x558 <GPIO_vconnectpullup+0x88>
     560:	ba 01       	movw	r22, r20
     562:	62 2b       	or	r22, r18
     564:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
     566:	80 b7       	in	r24, 0x30	; 48
     568:	8b 7f       	andi	r24, 0xFB	; 251
     56a:	80 bf       	out	0x30, r24	; 48
     56c:	08 95       	ret
			}else{
				CLR_BIT(myPORTB,pin);
     56e:	28 b3       	in	r18, 0x18	; 24
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	ac 01       	movw	r20, r24
     576:	02 c0       	rjmp	.+4      	; 0x57c <GPIO_vconnectpullup+0xac>
     578:	44 0f       	add	r20, r20
     57a:	55 1f       	adc	r21, r21
     57c:	6a 95       	dec	r22
     57e:	e2 f7       	brpl	.-8      	; 0x578 <GPIO_vconnectpullup+0xa8>
     580:	ba 01       	movw	r22, r20
     582:	60 95       	com	r22
     584:	62 23       	and	r22, r18
     586:	68 bb       	out	0x18, r22	; 24
     588:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect==connect_pullup){
     58a:	41 30       	cpi	r20, 0x01	; 1
     58c:	81 f4       	brne	.+32     	; 0x5ae <GPIO_vconnectpullup+0xde>
				SET_BIT(myPORTC,pin);
     58e:	25 b3       	in	r18, 0x15	; 21
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	ac 01       	movw	r20, r24
     596:	02 c0       	rjmp	.+4      	; 0x59c <GPIO_vconnectpullup+0xcc>
     598:	44 0f       	add	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	6a 95       	dec	r22
     59e:	e2 f7       	brpl	.-8      	; 0x598 <GPIO_vconnectpullup+0xc8>
     5a0:	ba 01       	movw	r22, r20
     5a2:	62 2b       	or	r22, r18
     5a4:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
     5a6:	80 b7       	in	r24, 0x30	; 48
     5a8:	8b 7f       	andi	r24, 0xFB	; 251
     5aa:	80 bf       	out	0x30, r24	; 48
     5ac:	08 95       	ret
			}else{
				CLR_BIT(myPORTC,pin);
     5ae:	25 b3       	in	r18, 0x15	; 21
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	ac 01       	movw	r20, r24
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <GPIO_vconnectpullup+0xec>
     5b8:	44 0f       	add	r20, r20
     5ba:	55 1f       	adc	r21, r21
     5bc:	6a 95       	dec	r22
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <GPIO_vconnectpullup+0xe8>
     5c0:	ba 01       	movw	r22, r20
     5c2:	60 95       	com	r22
     5c4:	62 23       	and	r22, r18
     5c6:	65 bb       	out	0x15, r22	; 21
     5c8:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect==connect_pullup){
     5ca:	41 30       	cpi	r20, 0x01	; 1
     5cc:	81 f4       	brne	.+32     	; 0x5ee <GPIO_vconnectpullup+0x11e>
				SET_BIT(myPORTD,pin);
     5ce:	22 b3       	in	r18, 0x12	; 18
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	ac 01       	movw	r20, r24
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPIO_vconnectpullup+0x10c>
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <GPIO_vconnectpullup+0x108>
     5e0:	ba 01       	movw	r22, r20
     5e2:	62 2b       	or	r22, r18
     5e4:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
     5e6:	80 b7       	in	r24, 0x30	; 48
     5e8:	8b 7f       	andi	r24, 0xFB	; 251
     5ea:	80 bf       	out	0x30, r24	; 48
     5ec:	08 95       	ret
			}else{
				CLR_BIT(myPORTD,pin);
     5ee:	22 b3       	in	r18, 0x12	; 18
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	ac 01       	movw	r20, r24
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <GPIO_vconnectpullup+0x12c>
     5f8:	44 0f       	add	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	6a 95       	dec	r22
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <GPIO_vconnectpullup+0x128>
     600:	ba 01       	movw	r22, r20
     602:	60 95       	com	r22
     604:	62 23       	and	r22, r18
     606:	62 bb       	out	0x12, r22	; 18
     608:	08 95       	ret

0000060a <GPIO_vset_PORT_DIR>:
}

//==================================PORT=============================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
     60a:	84 34       	cpi	r24, 0x44	; 68
     60c:	d9 f0       	breq	.+54     	; 0x644 <GPIO_vset_PORT_DIR+0x3a>
     60e:	85 34       	cpi	r24, 0x45	; 69
     610:	38 f4       	brcc	.+14     	; 0x620 <GPIO_vset_PORT_DIR+0x16>
     612:	82 34       	cpi	r24, 0x42	; 66
     614:	99 f0       	breq	.+38     	; 0x63c <GPIO_vset_PORT_DIR+0x32>
     616:	83 34       	cpi	r24, 0x43	; 67
     618:	98 f4       	brcc	.+38     	; 0x640 <GPIO_vset_PORT_DIR+0x36>
     61a:	81 34       	cpi	r24, 0x41	; 65
     61c:	a1 f4       	brne	.+40     	; 0x646 <GPIO_vset_PORT_DIR+0x3c>
     61e:	0c c0       	rjmp	.+24     	; 0x638 <GPIO_vset_PORT_DIR+0x2e>
     620:	82 36       	cpi	r24, 0x62	; 98
     622:	61 f0       	breq	.+24     	; 0x63c <GPIO_vset_PORT_DIR+0x32>
     624:	83 36       	cpi	r24, 0x63	; 99
     626:	18 f4       	brcc	.+6      	; 0x62e <GPIO_vset_PORT_DIR+0x24>
     628:	81 36       	cpi	r24, 0x61	; 97
     62a:	69 f4       	brne	.+26     	; 0x646 <GPIO_vset_PORT_DIR+0x3c>
     62c:	05 c0       	rjmp	.+10     	; 0x638 <GPIO_vset_PORT_DIR+0x2e>
     62e:	83 36       	cpi	r24, 0x63	; 99
     630:	39 f0       	breq	.+14     	; 0x640 <GPIO_vset_PORT_DIR+0x36>
     632:	84 36       	cpi	r24, 0x64	; 100
     634:	41 f4       	brne	.+16     	; 0x646 <GPIO_vset_PORT_DIR+0x3c>
     636:	06 c0       	rjmp	.+12     	; 0x644 <GPIO_vset_PORT_DIR+0x3a>
		case 'A' :
		case 'a' :
			myDDRA = dir;
     638:	6a bb       	out	0x1a, r22	; 26
			break;
     63a:	08 95       	ret
		case 'b' :
		case 'B' :
			myDDRB = dir;
     63c:	67 bb       	out	0x17, r22	; 23
			break;
     63e:	08 95       	ret
		case 'c' :
		case 'C' :
			myDDRC = dir;
     640:	64 bb       	out	0x14, r22	; 20
			break;
     642:	08 95       	ret
		case 'd' :
		case 'D' :
			myDDRD = dir;
     644:	61 bb       	out	0x11, r22	; 17
     646:	08 95       	ret

00000648 <GPIO_vwrite_PORT>:
		default: break;
	}
}

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
     648:	84 34       	cpi	r24, 0x44	; 68
     64a:	d9 f0       	breq	.+54     	; 0x682 <GPIO_vwrite_PORT+0x3a>
     64c:	85 34       	cpi	r24, 0x45	; 69
     64e:	38 f4       	brcc	.+14     	; 0x65e <GPIO_vwrite_PORT+0x16>
     650:	82 34       	cpi	r24, 0x42	; 66
     652:	99 f0       	breq	.+38     	; 0x67a <GPIO_vwrite_PORT+0x32>
     654:	83 34       	cpi	r24, 0x43	; 67
     656:	98 f4       	brcc	.+38     	; 0x67e <GPIO_vwrite_PORT+0x36>
     658:	81 34       	cpi	r24, 0x41	; 65
     65a:	a1 f4       	brne	.+40     	; 0x684 <GPIO_vwrite_PORT+0x3c>
     65c:	0c c0       	rjmp	.+24     	; 0x676 <GPIO_vwrite_PORT+0x2e>
     65e:	82 36       	cpi	r24, 0x62	; 98
     660:	61 f0       	breq	.+24     	; 0x67a <GPIO_vwrite_PORT+0x32>
     662:	83 36       	cpi	r24, 0x63	; 99
     664:	18 f4       	brcc	.+6      	; 0x66c <GPIO_vwrite_PORT+0x24>
     666:	81 36       	cpi	r24, 0x61	; 97
     668:	69 f4       	brne	.+26     	; 0x684 <GPIO_vwrite_PORT+0x3c>
     66a:	05 c0       	rjmp	.+10     	; 0x676 <GPIO_vwrite_PORT+0x2e>
     66c:	83 36       	cpi	r24, 0x63	; 99
     66e:	39 f0       	breq	.+14     	; 0x67e <GPIO_vwrite_PORT+0x36>
     670:	84 36       	cpi	r24, 0x64	; 100
     672:	41 f4       	brne	.+16     	; 0x684 <GPIO_vwrite_PORT+0x3c>
     674:	06 c0       	rjmp	.+12     	; 0x682 <GPIO_vwrite_PORT+0x3a>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
     676:	6b bb       	out	0x1b, r22	; 27
			break;
     678:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
     67a:	68 bb       	out	0x18, r22	; 24
			break;
     67c:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
     67e:	65 bb       	out	0x15, r22	; 21
			break;
     680:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
     682:	62 bb       	out	0x12, r22	; 18
     684:	08 95       	ret

00000686 <GPIO_vtoggle_PORT>:
		default: break;
	}
}

void GPIO_vtoggle_PORT(u8 portnum){
	switch (portnum){
     686:	84 34       	cpi	r24, 0x44	; 68
     688:	09 f1       	breq	.+66     	; 0x6cc <GPIO_vtoggle_PORT+0x46>
     68a:	85 34       	cpi	r24, 0x45	; 69
     68c:	38 f4       	brcc	.+14     	; 0x69c <GPIO_vtoggle_PORT+0x16>
     68e:	82 34       	cpi	r24, 0x42	; 66
     690:	a9 f0       	breq	.+42     	; 0x6bc <GPIO_vtoggle_PORT+0x36>
     692:	83 34       	cpi	r24, 0x43	; 67
     694:	b8 f4       	brcc	.+46     	; 0x6c4 <GPIO_vtoggle_PORT+0x3e>
     696:	81 34       	cpi	r24, 0x41	; 65
     698:	e1 f4       	brne	.+56     	; 0x6d2 <GPIO_vtoggle_PORT+0x4c>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <GPIO_vtoggle_PORT+0x2e>
     69c:	82 36       	cpi	r24, 0x62	; 98
     69e:	71 f0       	breq	.+28     	; 0x6bc <GPIO_vtoggle_PORT+0x36>
     6a0:	83 36       	cpi	r24, 0x63	; 99
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <GPIO_vtoggle_PORT+0x24>
     6a4:	81 36       	cpi	r24, 0x61	; 97
     6a6:	a9 f4       	brne	.+42     	; 0x6d2 <GPIO_vtoggle_PORT+0x4c>
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <GPIO_vtoggle_PORT+0x2e>
     6aa:	83 36       	cpi	r24, 0x63	; 99
     6ac:	59 f0       	breq	.+22     	; 0x6c4 <GPIO_vtoggle_PORT+0x3e>
     6ae:	84 36       	cpi	r24, 0x64	; 100
     6b0:	81 f4       	brne	.+32     	; 0x6d2 <GPIO_vtoggle_PORT+0x4c>
     6b2:	0c c0       	rjmp	.+24     	; 0x6cc <GPIO_vtoggle_PORT+0x46>
		case 'A' :
		case 'a' :
			myPORTA = ~myPORTA;
     6b4:	8b b3       	in	r24, 0x1b	; 27
     6b6:	80 95       	com	r24
     6b8:	8b bb       	out	0x1b, r24	; 27
			break;
     6ba:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = ~myPORTB;
     6bc:	88 b3       	in	r24, 0x18	; 24
     6be:	80 95       	com	r24
     6c0:	88 bb       	out	0x18, r24	; 24
			break;
     6c2:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = ~myPORTC;
     6c4:	85 b3       	in	r24, 0x15	; 21
     6c6:	80 95       	com	r24
     6c8:	85 bb       	out	0x15, r24	; 21
			break;
     6ca:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = ~myPORTD;
     6cc:	82 b3       	in	r24, 0x12	; 18
     6ce:	80 95       	com	r24
     6d0:	82 bb       	out	0x12, r24	; 18
     6d2:	08 95       	ret

000006d4 <GPIO_read_PORT>:
			break;
		default: break;
	}
}
u8 GPIO_read_PORT(u8 portnum){
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	0f 92       	push	r0
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
	volatile u8 val=0;
     6de:	19 82       	std	Y+1, r1	; 0x01
	switch (portnum){
     6e0:	84 34       	cpi	r24, 0x44	; 68
     6e2:	f1 f0       	breq	.+60     	; 0x720 <GPIO_read_PORT+0x4c>
     6e4:	85 34       	cpi	r24, 0x45	; 69
     6e6:	38 f4       	brcc	.+14     	; 0x6f6 <GPIO_read_PORT+0x22>
     6e8:	82 34       	cpi	r24, 0x42	; 66
     6ea:	a1 f0       	breq	.+40     	; 0x714 <GPIO_read_PORT+0x40>
     6ec:	83 34       	cpi	r24, 0x43	; 67
     6ee:	a8 f4       	brcc	.+42     	; 0x71a <GPIO_read_PORT+0x46>
     6f0:	81 34       	cpi	r24, 0x41	; 65
     6f2:	c1 f4       	brne	.+48     	; 0x724 <GPIO_read_PORT+0x50>
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <GPIO_read_PORT+0x3a>
     6f6:	82 36       	cpi	r24, 0x62	; 98
     6f8:	69 f0       	breq	.+26     	; 0x714 <GPIO_read_PORT+0x40>
     6fa:	83 36       	cpi	r24, 0x63	; 99
     6fc:	18 f4       	brcc	.+6      	; 0x704 <GPIO_read_PORT+0x30>
     6fe:	81 36       	cpi	r24, 0x61	; 97
     700:	89 f4       	brne	.+34     	; 0x724 <GPIO_read_PORT+0x50>
     702:	05 c0       	rjmp	.+10     	; 0x70e <GPIO_read_PORT+0x3a>
     704:	83 36       	cpi	r24, 0x63	; 99
     706:	49 f0       	breq	.+18     	; 0x71a <GPIO_read_PORT+0x46>
     708:	84 36       	cpi	r24, 0x64	; 100
     70a:	61 f4       	brne	.+24     	; 0x724 <GPIO_read_PORT+0x50>
     70c:	09 c0       	rjmp	.+18     	; 0x720 <GPIO_read_PORT+0x4c>
		case 'a' :
		case 'A' :
			val = myPINA;
     70e:	89 b3       	in	r24, 0x19	; 25
     710:	89 83       	std	Y+1, r24	; 0x01
			break;
     712:	08 c0       	rjmp	.+16     	; 0x724 <GPIO_read_PORT+0x50>
		case 'b' :
		case 'B' :
			val = myPINB;
     714:	86 b3       	in	r24, 0x16	; 22
     716:	89 83       	std	Y+1, r24	; 0x01
			break;
     718:	05 c0       	rjmp	.+10     	; 0x724 <GPIO_read_PORT+0x50>
		case 'c' :
		case 'C' :
			val = myPINC;
     71a:	83 b3       	in	r24, 0x13	; 19
     71c:	89 83       	std	Y+1, r24	; 0x01
			break;
     71e:	02 c0       	rjmp	.+4      	; 0x724 <GPIO_read_PORT+0x50>
		case 'd' :
		case 'D' :
			val = myPIND;
     720:	80 b3       	in	r24, 0x10	; 16
     722:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
}
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <GPIO_High_Nibble_vset_dir>:
//=====================================================================================

//==================================Nibble=============================================

//==================================High Nibble========================================
void GPIO_High_Nibble_vset_dir(u8 port,u8 dir){
     72c:	cf 93       	push	r28
     72e:	c8 2f       	mov	r28, r24
	if (1==dir){
     730:	61 30       	cpi	r22, 0x01	; 1
     732:	a1 f4       	brne	.+40     	; 0x75c <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
     734:	64 e0       	ldi	r22, 0x04	; 4
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
     73c:	8c 2f       	mov	r24, r28
     73e:	65 e0       	ldi	r22, 0x05	; 5
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
     746:	8c 2f       	mov	r24, r28
     748:	66 e0       	ldi	r22, 0x06	; 6
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
     750:	8c 2f       	mov	r24, r28
     752:	67 e0       	ldi	r22, 0x07	; 7
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
     75a:	13 c0       	rjmp	.+38     	; 0x782 <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
     75c:	64 e0       	ldi	r22, 0x04	; 4
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
     764:	8c 2f       	mov	r24, r28
     766:	65 e0       	ldi	r22, 0x05	; 5
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
     76e:	8c 2f       	mov	r24, r28
     770:	66 e0       	ldi	r22, 0x06	; 6
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
     778:	8c 2f       	mov	r24, r28
     77a:	67 e0       	ldi	r22, 0x07	; 7
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	}
	
}
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <GPIO_High_Nibble_vwrite>:

void GPIO_High_Nibble_vwrite( u8 port , u8 value ){
	value <<= 4;   
     786:	62 95       	swap	r22
     788:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){    
     78a:	84 34       	cpi	r24, 0x44	; 68
     78c:	51 f1       	breq	.+84     	; 0x7e2 <GPIO_High_Nibble_vwrite+0x5c>
     78e:	85 34       	cpi	r24, 0x45	; 69
     790:	38 f4       	brcc	.+14     	; 0x7a0 <GPIO_High_Nibble_vwrite+0x1a>
     792:	82 34       	cpi	r24, 0x42	; 66
     794:	c1 f0       	breq	.+48     	; 0x7c6 <GPIO_High_Nibble_vwrite+0x40>
     796:	83 34       	cpi	r24, 0x43	; 67
     798:	e8 f4       	brcc	.+58     	; 0x7d4 <GPIO_High_Nibble_vwrite+0x4e>
     79a:	81 34       	cpi	r24, 0x41	; 65
     79c:	41 f5       	brne	.+80     	; 0x7ee <GPIO_High_Nibble_vwrite+0x68>
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <GPIO_High_Nibble_vwrite+0x32>
     7a0:	82 36       	cpi	r24, 0x62	; 98
     7a2:	89 f0       	breq	.+34     	; 0x7c6 <GPIO_High_Nibble_vwrite+0x40>
     7a4:	83 36       	cpi	r24, 0x63	; 99
     7a6:	18 f4       	brcc	.+6      	; 0x7ae <GPIO_High_Nibble_vwrite+0x28>
     7a8:	81 36       	cpi	r24, 0x61	; 97
     7aa:	09 f5       	brne	.+66     	; 0x7ee <GPIO_High_Nibble_vwrite+0x68>
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <GPIO_High_Nibble_vwrite+0x32>
     7ae:	83 36       	cpi	r24, 0x63	; 99
     7b0:	89 f0       	breq	.+34     	; 0x7d4 <GPIO_High_Nibble_vwrite+0x4e>
     7b2:	84 36       	cpi	r24, 0x64	; 100
     7b4:	e1 f4       	brne	.+56     	; 0x7ee <GPIO_High_Nibble_vwrite+0x68>
     7b6:	15 c0       	rjmp	.+42     	; 0x7e2 <GPIO_High_Nibble_vwrite+0x5c>
		case 'A':
		case 'a':			
			myPORTA &=0x0f; 
     7b8:	8b b3       	in	r24, 0x1b	; 27
     7ba:	8f 70       	andi	r24, 0x0F	; 15
     7bc:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     7be:	8b b3       	in	r24, 0x1b	; 27
     7c0:	68 2b       	or	r22, r24
     7c2:	6b bb       	out	0x1b, r22	; 27
			break;				
     7c4:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0x0f;
     7c6:	88 b3       	in	r24, 0x18	; 24
     7c8:	8f 70       	andi	r24, 0x0F	; 15
     7ca:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     7cc:	88 b3       	in	r24, 0x18	; 24
     7ce:	68 2b       	or	r22, r24
     7d0:	68 bb       	out	0x18, r22	; 24
			break;
     7d2:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0x0f;
     7d4:	85 b3       	in	r24, 0x15	; 21
     7d6:	8f 70       	andi	r24, 0x0F	; 15
     7d8:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     7da:	85 b3       	in	r24, 0x15	; 21
     7dc:	68 2b       	or	r22, r24
     7de:	65 bb       	out	0x15, r22	; 21
			break;
     7e0:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0x0f;
     7e2:	82 b3       	in	r24, 0x12	; 18
     7e4:	8f 70       	andi	r24, 0x0F	; 15
     7e6:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     7e8:	82 b3       	in	r24, 0x12	; 18
     7ea:	68 2b       	or	r22, r24
     7ec:	62 bb       	out	0x12, r22	; 18
     7ee:	08 95       	ret

000007f0 <GPIO_Low_Nibble_vset_dir>:
		default: break;
	}
}

//==================================Low Nibble========================================
void GPIO_Low_Nibble_vset_dir(u8 port,u8 dir){
     7f0:	cf 93       	push	r28
     7f2:	c8 2f       	mov	r28, r24
	if (1==dir){
     7f4:	61 30       	cpi	r22, 0x01	; 1
     7f6:	a1 f4       	brne	.+40     	; 0x820 <GPIO_Low_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,0,1);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
     800:	8c 2f       	mov	r24, r28
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
     80a:	8c 2f       	mov	r24, r28
     80c:	62 e0       	ldi	r22, 0x02	; 2
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
     814:	8c 2f       	mov	r24, r28
     816:	63 e0       	ldi	r22, 0x03	; 3
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
     81e:	13 c0       	rjmp	.+38     	; 0x846 <GPIO_Low_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,0,0);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
     828:	8c 2f       	mov	r24, r28
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
     832:	8c 2f       	mov	r24, r28
     834:	62 e0       	ldi	r22, 0x02	; 2
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
     83c:	8c 2f       	mov	r24, r28
     83e:	63 e0       	ldi	r22, 0x03	; 3
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	}
}
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <GPIO_Low_Nibble_vwrite>:

void GPIO_Low_Nibble_vwrite( u8 port , u8 value ){
	value &=0x0f;
     84a:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
     84c:	84 34       	cpi	r24, 0x44	; 68
     84e:	51 f1       	breq	.+84     	; 0x8a4 <__stack+0x45>
     850:	85 34       	cpi	r24, 0x45	; 69
     852:	38 f4       	brcc	.+14     	; 0x862 <__stack+0x3>
     854:	82 34       	cpi	r24, 0x42	; 66
     856:	c1 f0       	breq	.+48     	; 0x888 <__stack+0x29>
     858:	83 34       	cpi	r24, 0x43	; 67
     85a:	e8 f4       	brcc	.+58     	; 0x896 <__stack+0x37>
     85c:	81 34       	cpi	r24, 0x41	; 65
     85e:	41 f5       	brne	.+80     	; 0x8b0 <__stack+0x51>
     860:	0c c0       	rjmp	.+24     	; 0x87a <__stack+0x1b>
     862:	82 36       	cpi	r24, 0x62	; 98
     864:	89 f0       	breq	.+34     	; 0x888 <__stack+0x29>
     866:	83 36       	cpi	r24, 0x63	; 99
     868:	18 f4       	brcc	.+6      	; 0x870 <__stack+0x11>
     86a:	81 36       	cpi	r24, 0x61	; 97
     86c:	09 f5       	brne	.+66     	; 0x8b0 <__stack+0x51>
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
     870:	83 36       	cpi	r24, 0x63	; 99
     872:	89 f0       	breq	.+34     	; 0x896 <__stack+0x37>
     874:	84 36       	cpi	r24, 0x64	; 100
     876:	e1 f4       	brne	.+56     	; 0x8b0 <__stack+0x51>
     878:	15 c0       	rjmp	.+42     	; 0x8a4 <__stack+0x45>
		case 'A':
		case 'a':
			myPORTA &=0xf0;
     87a:	8b b3       	in	r24, 0x1b	; 27
     87c:	80 7f       	andi	r24, 0xF0	; 240
     87e:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     880:	8b b3       	in	r24, 0x1b	; 27
     882:	68 2b       	or	r22, r24
     884:	6b bb       	out	0x1b, r22	; 27
			break;
     886:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0xf0;
     888:	88 b3       	in	r24, 0x18	; 24
     88a:	80 7f       	andi	r24, 0xF0	; 240
     88c:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     88e:	88 b3       	in	r24, 0x18	; 24
     890:	68 2b       	or	r22, r24
     892:	68 bb       	out	0x18, r22	; 24
			break;
     894:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0xf0;
     896:	85 b3       	in	r24, 0x15	; 21
     898:	80 7f       	andi	r24, 0xF0	; 240
     89a:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     89c:	85 b3       	in	r24, 0x15	; 21
     89e:	68 2b       	or	r22, r24
     8a0:	65 bb       	out	0x15, r22	; 21
			break;
     8a2:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0xf0;
     8a4:	82 b3       	in	r24, 0x12	; 18
     8a6:	80 7f       	andi	r24, 0xF0	; 240
     8a8:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     8aa:	82 b3       	in	r24, 0x12	; 18
     8ac:	68 2b       	or	r22, r24
     8ae:	62 bb       	out	0x12, r22	; 18
     8b0:	08 95       	ret

000008b2 <keypad_vInit>:
 * Keypad_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "Keypad_ECU.h"
void keypad_vInit(u8 port){
     8b2:	cf 93       	push	r28
     8b4:	c8 2f       	mov	r28, r24
										
		GPIO_vset_PORT_DIR(port,0x0f);  
     8b6:	6f e0       	ldi	r22, 0x0F	; 15
     8b8:	0e 94 05 03 	call	0x60a	; 0x60a <GPIO_vset_PORT_DIR>
		GPIO_vconnectpullup(port,4,1);
     8bc:	8c 2f       	mov	r24, r28
     8be:	64 e0       	ldi	r22, 0x04	; 4
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,5,1);
     8c6:	8c 2f       	mov	r24, r28
     8c8:	65 e0       	ldi	r22, 0x05	; 5
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,6,1);
     8d0:	8c 2f       	mov	r24, r28
     8d2:	66 e0       	ldi	r22, 0x06	; 6
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,7,1);
     8da:	8c 2f       	mov	r24, r28
     8dc:	67 e0       	ldi	r22, 0x07	; 7
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_vconnectpullup>
	
}
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <keypad_u8check_press>:

u8 keypad_u8check_press(u8 port){
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	60 97       	sbiw	r28, 0x10	; 16
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	08 2f       	mov	r16, r24
	//u8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
     904:	de 01       	movw	r26, r28
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	e0 e6       	ldi	r30, 0x60	; 96
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 e1       	ldi	r24, 0x10	; 16
     90e:	01 90       	ld	r0, Z+
     910:	0d 92       	st	X+, r0
     912:	81 50       	subi	r24, 0x01	; 1
     914:	e1 f7       	brne	.-8      	; 0x90e <keypad_u8check_press+0x26>
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){									
     916:	ff 24       	eor	r15, r15
		GPIO_vwrite_PIN(port,0,1);								
     918:	80 2f       	mov	r24, r16
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,1,1);						
     922:	80 2f       	mov	r24, r16
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,2,1);						
     92c:	80 2f       	mov	r24, r16
     92e:	62 e0       	ldi	r22, 0x02	; 2
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,3,1);
     936:	80 2f       	mov	r24, r16
     938:	63 e0       	ldi	r22, 0x03	; 3
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,row,0);
     940:	80 2f       	mov	r24, r16
     942:	6f 2d       	mov	r22, r15
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		
			for (coloumn=0; coloumn < 4; coloumn++){
     94a:	10 e0       	ldi	r17, 0x00	; 0
				x=GPIO_u8read_PIN(port,(coloumn+4));
     94c:	61 2f       	mov	r22, r17
     94e:	6c 5f       	subi	r22, 0xFC	; 252
     950:	80 2f       	mov	r24, r16
     952:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_u8read_PIN>
				if(0==x){
     956:	88 23       	and	r24, r24
     958:	61 f4       	brne	.+24     	; 0x972 <keypad_u8check_press+0x8a>
					returnval = arr[row][coloumn];
     95a:	ef 2d       	mov	r30, r15
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ee 0f       	add	r30, r30
     960:	ff 1f       	adc	r31, r31
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	e1 0f       	add	r30, r17
     968:	f1 1d       	adc	r31, r1
     96a:	ec 0f       	add	r30, r28
     96c:	fd 1f       	adc	r31, r29
     96e:	81 81       	ldd	r24, Z+1	; 0x01
     970:	04 c0       	rjmp	.+8      	; 0x97a <keypad_u8check_press+0x92>
		GPIO_vwrite_PIN(port,1,1);						
		GPIO_vwrite_PIN(port,2,1);						
		GPIO_vwrite_PIN(port,3,1);
		GPIO_vwrite_PIN(port,row,0);
		
			for (coloumn=0; coloumn < 4; coloumn++){
     972:	1f 5f       	subi	r17, 0xFF	; 255
     974:	14 30       	cpi	r17, 0x04	; 4
     976:	51 f7       	brne	.-44     	; 0x94c <keypad_u8check_press+0x64>
     978:	0c c0       	rjmp	.+24     	; 0x992 <keypad_u8check_press+0xaa>
		if(0==x){
			break;
		}
	}	
	return returnval;
     97a:	60 96       	adiw	r28, 0x10	; 16
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	08 95       	ret
u8 keypad_u8check_press(u8 port){
	//u8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){									
     992:	f3 94       	inc	r15
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	f8 16       	cp	r15, r24
     998:	09 f0       	breq	.+2      	; 0x99c <keypad_u8check_press+0xb4>
     99a:	be cf       	rjmp	.-132    	; 0x918 <keypad_u8check_press+0x30>
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	ed cf       	rjmp	.-38     	; 0x97a <keypad_u8check_press+0x92>

000009a0 <send_falling_edge>:
			_delay_ms(1);
		}
	}
}

  static void send_falling_edge(u8 EN_port,u8 EN_pin){
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	d8 2f       	mov	r29, r24
     9a6:	c6 2f       	mov	r28, r22
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ae:	8f e9       	ldi	r24, 0x9F	; 159
     9b0:	9f e0       	ldi	r25, 0x0F	; 15
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <send_falling_edge+0x12>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <send_falling_edge+0x18>
     9b8:	00 00       	nop
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
     9ba:	8d 2f       	mov	r24, r29
     9bc:	6c 2f       	mov	r22, r28
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <LCD_vsend_cmd>:
			_delay_ms(1);
		}
	}
}

void LCD_vsend_cmd(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 cmd,u8 EN_port,u8 EN_pin){
     9ca:	af 92       	push	r10
     9cc:	cf 92       	push	r12
     9ce:	ef 92       	push	r14
     9d0:	0f 93       	push	r16
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	c4 2f       	mov	r28, r20
     9d8:	d2 2f       	mov	r29, r18
	if(1==Mode){
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	71 f4       	brne	.+28     	; 0x9fa <LCD_vsend_cmd+0x30>
		GPIO_vwrite_PORT(port,cmd);
     9de:	84 2f       	mov	r24, r20
     9e0:	6e 2d       	mov	r22, r14
     9e2:	0e 94 24 03 	call	0x648	; 0x648 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9e6:	8d 2f       	mov	r24, r29
     9e8:	60 2f       	mov	r22, r16
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     9f0:	8c 2d       	mov	r24, r12
     9f2:	6a 2d       	mov	r22, r10
     9f4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
     9f8:	47 c0       	rjmp	.+142    	; 0xa88 <LCD_vsend_cmd+0xbe>
	}else {
		if (1==Nibble){
     9fa:	61 30       	cpi	r22, 0x01	; 1
     9fc:	19 f5       	brne	.+70     	; 0xa44 <LCD_vsend_cmd+0x7a>
			GPIO_High_Nibble_vwrite(port,cmd>>4);     
     9fe:	6e 2d       	mov	r22, r14
     a00:	62 95       	swap	r22
     a02:	6f 70       	andi	r22, 0x0F	; 15
     a04:	84 2f       	mov	r24, r20
     a06:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a0a:	8d 2f       	mov	r24, r29
     a0c:	60 2f       	mov	r22, r16
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a14:	8c 2d       	mov	r24, r12
     a16:	6a 2d       	mov	r22, r10
     a18:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,cmd);
     a1c:	8c 2f       	mov	r24, r28
     a1e:	6e 2d       	mov	r22, r14
     a20:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a24:	8d 2f       	mov	r24, r29
     a26:	60 2f       	mov	r22, r16
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a2e:	8c 2d       	mov	r24, r12
     a30:	6a 2d       	mov	r22, r10
     a32:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
     a36:	8f ec       	ldi	r24, 0xCF	; 207
     a38:	97 e0       	ldi	r25, 0x07	; 7
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <LCD_vsend_cmd+0x70>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <LCD_vsend_cmd+0x76>
     a40:	00 00       	nop
     a42:	22 c0       	rjmp	.+68     	; 0xa88 <LCD_vsend_cmd+0xbe>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,cmd>>4);   
     a44:	6e 2d       	mov	r22, r14
     a46:	62 95       	swap	r22
     a48:	6f 70       	andi	r22, 0x0F	; 15
     a4a:	84 2f       	mov	r24, r20
     a4c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a50:	8d 2f       	mov	r24, r29
     a52:	60 2f       	mov	r22, r16
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a5a:	8c 2d       	mov	r24, r12
     a5c:	6a 2d       	mov	r22, r10
     a5e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,cmd);
     a62:	8c 2f       	mov	r24, r28
     a64:	6e 2d       	mov	r22, r14
     a66:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     a6a:	8d 2f       	mov	r24, r29
     a6c:	60 2f       	mov	r22, r16
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a74:	8c 2d       	mov	r24, r12
     a76:	6a 2d       	mov	r22, r10
     a78:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
     a7c:	8f ec       	ldi	r24, 0xCF	; 207
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <LCD_vsend_cmd+0xb6>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <LCD_vsend_cmd+0xbc>
     a86:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	0f 91       	pop	r16
     a8e:	ef 90       	pop	r14
     a90:	cf 90       	pop	r12
     a92:	af 90       	pop	r10
     a94:	08 95       	ret

00000a96 <LCD_vInit>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

void LCD_vInit(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin, u8 RW_port, u8 RW_pin,u8 EN_port,u8 EN_pin){
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	18 2f       	mov	r17, r24
     ab6:	f6 2e       	mov	r15, r22
     ab8:	74 2e       	mov	r7, r20
     aba:	92 2e       	mov	r9, r18
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	91 ee       	ldi	r25, 0xE1	; 225
     ac0:	a4 e0       	ldi	r26, 0x04	; 4
     ac2:	81 50       	subi	r24, 0x01	; 1
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	a0 40       	sbci	r26, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <LCD_vInit+0x2c>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <LCD_vInit+0x36>
     acc:	00 00       	nop
	_delay_ms(200);
	GPIO_vsetPIN_DIR(RS_port,RS_pin,1);
     ace:	82 2f       	mov	r24, r18
     ad0:	60 2f       	mov	r22, r16
     ad2:	41 e0       	ldi	r20, 0x01	; 1
     ad4:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(RW_port,RW_pin,1);
     ad8:	8e 2d       	mov	r24, r14
     ada:	6c 2d       	mov	r22, r12
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(EN_port,EN_pin,1);
     ae2:	8a 2d       	mov	r24, r10
     ae4:	68 2d       	mov	r22, r8
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	if (1==Mode){
     aec:	11 30       	cpi	r17, 0x01	; 1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <LCD_vInit+0x5c>
     af0:	50 c0       	rjmp	.+160    	; 0xb92 <LCD_vInit+0xfc>
		GPIO_vset_PORT_DIR(port,0xff);
     af2:	87 2d       	mov	r24, r7
     af4:	6f ef       	ldi	r22, 0xFF	; 255
     af6:	0e 94 05 03 	call	0x60a	; 0x60a <GPIO_vset_PORT_DIR>
		GPIO_vwrite_PIN(RW_port,RW_pin,0);
     afa:	8e 2d       	mov	r24, r14
     afc:	6c 2d       	mov	r22, r12
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
     b04:	af e2       	ldi	r26, 0x2F	; 47
     b06:	b5 e7       	ldi	r27, 0x75	; 117
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCD_vInit+0x72>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <LCD_vInit+0x78>
     b0e:	00 00       	nop
		_delay_ms(15);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_8BIT_2Lines,EN_port,EN_pin);
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	6f 2d       	mov	r22, r15
     b14:	47 2d       	mov	r20, r7
     b16:	29 2d       	mov	r18, r9
     b18:	0f 2e       	mov	r0, r31
     b1a:	f8 e3       	ldi	r31, 0x38	; 56
     b1c:	ef 2e       	mov	r14, r31
     b1e:	f0 2d       	mov	r31, r0
     b20:	ca 2c       	mov	r12, r10
     b22:	a8 2c       	mov	r10, r8
     b24:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     b28:	8f ec       	ldi	r24, 0xCF	; 207
     b2a:	97 e0       	ldi	r25, 0x07	; 7
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <LCD_vInit+0x96>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <LCD_vInit+0x9c>
     b32:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	6f 2d       	mov	r22, r15
     b38:	47 2d       	mov	r20, r7
     b3a:	29 2d       	mov	r18, r9
     b3c:	0f 2e       	mov	r0, r31
     b3e:	fe e0       	ldi	r31, 0x0E	; 14
     b40:	ef 2e       	mov	r14, r31
     b42:	f0 2d       	mov	r31, r0
     b44:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     b48:	af ec       	ldi	r26, 0xCF	; 207
     b4a:	b7 e0       	ldi	r27, 0x07	; 7
     b4c:	11 97       	sbiw	r26, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <LCD_vInit+0xb6>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <LCD_vInit+0xbc>
     b52:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	6f 2d       	mov	r22, r15
     b58:	47 2d       	mov	r20, r7
     b5a:	29 2d       	mov	r18, r9
     b5c:	ee 24       	eor	r14, r14
     b5e:	e3 94       	inc	r14
     b60:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     b64:	8f e1       	ldi	r24, 0x1F	; 31
     b66:	9e e4       	ldi	r25, 0x4E	; 78
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <LCD_vInit+0xd2>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <LCD_vInit+0xd8>
     b6e:	00 00       	nop
		_delay_ms(10);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	6f 2d       	mov	r22, r15
     b74:	47 2d       	mov	r20, r7
     b76:	29 2d       	mov	r18, r9
     b78:	0f 2e       	mov	r0, r31
     b7a:	f6 e0       	ldi	r31, 0x06	; 6
     b7c:	ef 2e       	mov	r14, r31
     b7e:	f0 2d       	mov	r31, r0
     b80:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     b84:	af ec       	ldi	r26, 0xCF	; 207
     b86:	b7 e0       	ldi	r27, 0x07	; 7
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_vInit+0xf2>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <LCD_vInit+0xf8>
     b8e:	00 00       	nop
     b90:	b5 c0       	rjmp	.+362    	; 0xcfc <LCD_vInit+0x266>
		_delay_ms(1);
		
	}else{
		if (1==Nibble){
     b92:	b1 e0       	ldi	r27, 0x01	; 1
     b94:	fb 16       	cp	r15, r27
     b96:	09 f0       	breq	.+2      	; 0xb9a <LCD_vInit+0x104>
     b98:	59 c0       	rjmp	.+178    	; 0xc4c <LCD_vInit+0x1b6>
			GPIO_High_Nibble_vset_dir(port,1);
     b9a:	87 2d       	mov	r24, r7
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	0e 94 96 03 	call	0x72c	; 0x72c <GPIO_High_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     ba2:	8e 2d       	mov	r24, r14
     ba4:	6c 2d       	mov	r22, r12
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     bac:	81 2f       	mov	r24, r17
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	47 2d       	mov	r20, r7
     bb2:	29 2d       	mov	r18, r9
     bb4:	ee 24       	eor	r14, r14
     bb6:	68 94       	set
     bb8:	e1 f8       	bld	r14, 1
     bba:	ca 2c       	mov	r12, r10
     bbc:	a8 2c       	mov	r10, r8
     bbe:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     bc2:	8f e2       	ldi	r24, 0x2F	; 47
     bc4:	95 e7       	ldi	r25, 0x75	; 117
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCD_vInit+0x130>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <LCD_vInit+0x136>
     bcc:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     bce:	81 2f       	mov	r24, r17
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	47 2d       	mov	r20, r7
     bd4:	29 2d       	mov	r18, r9
     bd6:	0f 2e       	mov	r0, r31
     bd8:	f8 e2       	ldi	r31, 0x28	; 40
     bda:	ef 2e       	mov	r14, r31
     bdc:	f0 2d       	mov	r31, r0
     bde:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     be2:	af ec       	ldi	r26, 0xCF	; 207
     be4:	b7 e0       	ldi	r27, 0x07	; 7
     be6:	11 97       	sbiw	r26, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <LCD_vInit+0x150>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <LCD_vInit+0x156>
     bec:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     bee:	81 2f       	mov	r24, r17
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	47 2d       	mov	r20, r7
     bf4:	29 2d       	mov	r18, r9
     bf6:	0f 2e       	mov	r0, r31
     bf8:	fe e0       	ldi	r31, 0x0E	; 14
     bfa:	ef 2e       	mov	r14, r31
     bfc:	f0 2d       	mov	r31, r0
     bfe:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     c02:	8f ec       	ldi	r24, 0xCF	; 207
     c04:	97 e0       	ldi	r25, 0x07	; 7
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <LCD_vInit+0x170>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <LCD_vInit+0x176>
     c0c:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     c0e:	81 2f       	mov	r24, r17
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	47 2d       	mov	r20, r7
     c14:	29 2d       	mov	r18, r9
     c16:	ee 24       	eor	r14, r14
     c18:	e3 94       	inc	r14
     c1a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     c1e:	af e1       	ldi	r26, 0x1F	; 31
     c20:	be e4       	ldi	r27, 0x4E	; 78
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <LCD_vInit+0x18c>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <LCD_vInit+0x192>
     c28:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     c2a:	81 2f       	mov	r24, r17
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	47 2d       	mov	r20, r7
     c30:	29 2d       	mov	r18, r9
     c32:	0f 2e       	mov	r0, r31
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	ef 2e       	mov	r14, r31
     c38:	f0 2d       	mov	r31, r0
     c3a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     c3e:	8f ec       	ldi	r24, 0xCF	; 207
     c40:	97 e0       	ldi	r25, 0x07	; 7
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <LCD_vInit+0x1ac>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <LCD_vInit+0x1b2>
     c48:	00 00       	nop
     c4a:	58 c0       	rjmp	.+176    	; 0xcfc <LCD_vInit+0x266>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vset_dir(port,1);
     c4c:	87 2d       	mov	r24, r7
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <GPIO_Low_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     c54:	8e 2d       	mov	r24, r14
     c56:	6c 2d       	mov	r22, r12
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     c5e:	81 2f       	mov	r24, r17
     c60:	6f 2d       	mov	r22, r15
     c62:	47 2d       	mov	r20, r7
     c64:	29 2d       	mov	r18, r9
     c66:	ee 24       	eor	r14, r14
     c68:	68 94       	set
     c6a:	e1 f8       	bld	r14, 1
     c6c:	ca 2c       	mov	r12, r10
     c6e:	a8 2c       	mov	r10, r8
     c70:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     c74:	af e2       	ldi	r26, 0x2F	; 47
     c76:	b5 e7       	ldi	r27, 0x75	; 117
     c78:	11 97       	sbiw	r26, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <LCD_vInit+0x1e2>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <LCD_vInit+0x1e8>
     c7e:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     c80:	81 2f       	mov	r24, r17
     c82:	6f 2d       	mov	r22, r15
     c84:	47 2d       	mov	r20, r7
     c86:	29 2d       	mov	r18, r9
     c88:	0f 2e       	mov	r0, r31
     c8a:	f8 e2       	ldi	r31, 0x28	; 40
     c8c:	ef 2e       	mov	r14, r31
     c8e:	f0 2d       	mov	r31, r0
     c90:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     c94:	8f ec       	ldi	r24, 0xCF	; 207
     c96:	97 e0       	ldi	r25, 0x07	; 7
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <LCD_vInit+0x202>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <LCD_vInit+0x208>
     c9e:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     ca0:	81 2f       	mov	r24, r17
     ca2:	6f 2d       	mov	r22, r15
     ca4:	47 2d       	mov	r20, r7
     ca6:	29 2d       	mov	r18, r9
     ca8:	0f 2e       	mov	r0, r31
     caa:	fe e0       	ldi	r31, 0x0E	; 14
     cac:	ef 2e       	mov	r14, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     cb4:	af ec       	ldi	r26, 0xCF	; 207
     cb6:	b7 e0       	ldi	r27, 0x07	; 7
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <LCD_vInit+0x222>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <LCD_vInit+0x228>
     cbe:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     cc0:	81 2f       	mov	r24, r17
     cc2:	6f 2d       	mov	r22, r15
     cc4:	47 2d       	mov	r20, r7
     cc6:	29 2d       	mov	r18, r9
     cc8:	ee 24       	eor	r14, r14
     cca:	e3 94       	inc	r14
     ccc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     cd0:	8f e1       	ldi	r24, 0x1F	; 31
     cd2:	9e e4       	ldi	r25, 0x4E	; 78
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCD_vInit+0x23e>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <LCD_vInit+0x244>
     cda:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     cdc:	81 2f       	mov	r24, r17
     cde:	6f 2d       	mov	r22, r15
     ce0:	47 2d       	mov	r20, r7
     ce2:	29 2d       	mov	r18, r9
     ce4:	0f 2e       	mov	r0, r31
     ce6:	f6 e0       	ldi	r31, 0x06	; 6
     ce8:	ef 2e       	mov	r14, r31
     cea:	f0 2d       	mov	r31, r0
     cec:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     cf0:	af ec       	ldi	r26, 0xCF	; 207
     cf2:	b7 e0       	ldi	r27, 0x07	; 7
     cf4:	11 97       	sbiw	r26, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <LCD_vInit+0x25e>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <LCD_vInit+0x264>
     cfa:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	9f 90       	pop	r9
     d12:	8f 90       	pop	r8
     d14:	7f 90       	pop	r7
     d16:	08 95       	ret

00000d18 <LCD_clear_screen>:
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
}

void LCD_clear_screen(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin){
     d18:	af 92       	push	r10
     d1a:	cf 92       	push	r12
     d1c:	ef 92       	push	r14
     d1e:	0f 93       	push	r16
     d20:	9e 2d       	mov	r25, r14
     d22:	ac 2c       	mov	r10, r12
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     d24:	ee 24       	eor	r14, r14
     d26:	e3 94       	inc	r14
     d28:	c9 2e       	mov	r12, r25
     d2a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     d2e:	8f e1       	ldi	r24, 0x1F	; 31
     d30:	9e e4       	ldi	r25, 0x4E	; 78
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <LCD_clear_screen+0x1a>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <LCD_clear_screen+0x20>
     d38:	00 00       	nop
	_delay_ms(10);
}
     d3a:	0f 91       	pop	r16
     d3c:	ef 90       	pop	r14
     d3e:	cf 90       	pop	r12
     d40:	af 90       	pop	r10
     d42:	08 95       	ret

00000d44 <LCD_Move_Cursor>:

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
     d44:	8f 92       	push	r8
     d46:	af 92       	push	r10
     d48:	cf 92       	push	r12
     d4a:	ef 92       	push	r14
     d4c:	0f 93       	push	r16
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	3e 2d       	mov	r19, r14
     d58:	9c 2d       	mov	r25, r12
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
     d5a:	7a 2d       	mov	r23, r10
     d5c:	71 50       	subi	r23, 0x01	; 1
     d5e:	73 30       	cpi	r23, 0x03	; 3
     d60:	88 f4       	brcc	.+34     	; 0xd84 <LCD_Move_Cursor+0x40>
     d62:	70 e1       	ldi	r23, 0x10	; 16
     d64:	78 15       	cp	r23, r8
     d66:	80 f0       	brcs	.+32     	; 0xd88 <LCD_Move_Cursor+0x44>
     d68:	88 20       	and	r8, r8
     d6a:	81 f0       	breq	.+32     	; 0xd8c <LCD_Move_Cursor+0x48>
		data = 0x80;
	}else if (1 == line ){
     d6c:	71 e0       	ldi	r23, 0x01	; 1
     d6e:	a7 16       	cp	r10, r23
     d70:	19 f4       	brne	.+6      	; 0xd78 <LCD_Move_Cursor+0x34>
		data = 0x80 + (position - 1);         
     d72:	58 2d       	mov	r21, r8
     d74:	51 58       	subi	r21, 0x81	; 129
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <LCD_Move_Cursor+0x4a>
	}else if (2 == line){
     d78:	72 e0       	ldi	r23, 0x02	; 2
     d7a:	a7 16       	cp	r10, r23
     d7c:	41 f4       	brne	.+16     	; 0xd8e <LCD_Move_Cursor+0x4a>
		data = 0xC0 + (position - 1);  
     d7e:	58 2d       	mov	r21, r8
     d80:	51 54       	subi	r21, 0x41	; 65
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <LCD_Move_Cursor+0x4a>
}

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
		data = 0x80;
     d84:	50 e8       	ldi	r21, 0x80	; 128
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <LCD_Move_Cursor+0x4a>
     d88:	50 e8       	ldi	r21, 0x80	; 128
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <LCD_Move_Cursor+0x4a>
     d8c:	50 e8       	ldi	r21, 0x80	; 128
	}else if (1 == line ){
		data = 0x80 + (position - 1);         
	}else if (2 == line){
		data = 0xC0 + (position - 1);  
	}
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,data,EN_port,EN_pin);
     d8e:	e5 2e       	mov	r14, r21
     d90:	c3 2e       	mov	r12, r19
     d92:	a9 2e       	mov	r10, r25
     d94:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_vsend_cmd>
     d98:	8f ec       	ldi	r24, 0xCF	; 207
     d9a:	97 e0       	ldi	r25, 0x07	; 7
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <LCD_Move_Cursor+0x58>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <LCD_Move_Cursor+0x5e>
     da2:	00 00       	nop
	_delay_ms(1);
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	0f 91       	pop	r16
     daa:	ef 90       	pop	r14
     dac:	cf 90       	pop	r12
     dae:	af 90       	pop	r10
     db0:	8f 90       	pop	r8
     db2:	08 95       	ret

00000db4 <LCD_vsend_char>:

void LCD_vsend_char(u8 Mood , u8 Nibble,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 data){
     db4:	af 92       	push	r10
     db6:	cf 92       	push	r12
     db8:	ef 92       	push	r14
     dba:	0f 93       	push	r16
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	c4 2f       	mov	r28, r20
     dc2:	d2 2f       	mov	r29, r18
	if (1==Mood){
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <LCD_vsend_char+0x3c>
		GPIO_vwrite_PORT(port,data);
     dc8:	84 2f       	mov	r24, r20
     dca:	6a 2d       	mov	r22, r10
     dcc:	0e 94 24 03 	call	0x648	; 0x648 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,1);
     dd0:	8d 2f       	mov	r24, r29
     dd2:	60 2f       	mov	r22, r16
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     dda:	8e 2d       	mov	r24, r14
     ddc:	6c 2d       	mov	r22, r12
     dde:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
     de2:	8f ec       	ldi	r24, 0xCF	; 207
     de4:	97 e0       	ldi	r25, 0x07	; 7
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <LCD_vsend_char+0x32>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <LCD_vsend_char+0x38>
     dec:	00 00       	nop
     dee:	47 c0       	rjmp	.+142    	; 0xe7e <LCD_vsend_char+0xca>
		_delay_ms(1);
	}else{
		if (1==Nibble){
     df0:	61 30       	cpi	r22, 0x01	; 1
     df2:	19 f5       	brne	.+70     	; 0xe3a <LCD_vsend_char+0x86>
			GPIO_High_Nibble_vwrite(port,data>>4);
     df4:	6a 2d       	mov	r22, r10
     df6:	62 95       	swap	r22
     df8:	6f 70       	andi	r22, 0x0F	; 15
     dfa:	84 2f       	mov	r24, r20
     dfc:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e00:	8d 2f       	mov	r24, r29
     e02:	60 2f       	mov	r22, r16
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e0a:	8e 2d       	mov	r24, r14
     e0c:	6c 2d       	mov	r22, r12
     e0e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,data);
     e12:	8c 2f       	mov	r24, r28
     e14:	6a 2d       	mov	r22, r10
     e16:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e1a:	8d 2f       	mov	r24, r29
     e1c:	60 2f       	mov	r22, r16
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e24:	8e 2d       	mov	r24, r14
     e26:	6c 2d       	mov	r22, r12
     e28:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
     e2c:	8f ec       	ldi	r24, 0xCF	; 207
     e2e:	97 e0       	ldi	r25, 0x07	; 7
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <LCD_vsend_char+0x7c>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <LCD_vsend_char+0x82>
     e36:	00 00       	nop
     e38:	22 c0       	rjmp	.+68     	; 0xe7e <LCD_vsend_char+0xca>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,data>>4);
     e3a:	6a 2d       	mov	r22, r10
     e3c:	62 95       	swap	r22
     e3e:	6f 70       	andi	r22, 0x0F	; 15
     e40:	84 2f       	mov	r24, r20
     e42:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e46:	8d 2f       	mov	r24, r29
     e48:	60 2f       	mov	r22, r16
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e50:	8e 2d       	mov	r24, r14
     e52:	6c 2d       	mov	r22, r12
     e54:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,data);
     e58:	8c 2f       	mov	r24, r28
     e5a:	6a 2d       	mov	r22, r10
     e5c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     e60:	8d 2f       	mov	r24, r29
     e62:	60 2f       	mov	r22, r16
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     e6a:	8e 2d       	mov	r24, r14
     e6c:	6c 2d       	mov	r22, r12
     e6e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <send_falling_edge>
     e72:	8f ec       	ldi	r24, 0xCF	; 207
     e74:	97 e0       	ldi	r25, 0x07	; 7
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <LCD_vsend_char+0xc2>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <LCD_vsend_char+0xc8>
     e7c:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	0f 91       	pop	r16
     e84:	ef 90       	pop	r14
     e86:	cf 90       	pop	r12
     e88:	af 90       	pop	r10
     e8a:	08 95       	ret

00000e8c <LCD_vsend_string>:
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     e8c:	6f 92       	push	r6
     e8e:	7f 92       	push	r7
     e90:	8f 92       	push	r8
     e92:	9f 92       	push	r9
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	68 2e       	mov	r6, r24
     eaa:	76 2e       	mov	r7, r22
     eac:	84 2e       	mov	r8, r20
     eae:	92 2e       	mov	r9, r18
     eb0:	d0 2e       	mov	r13, r16
     eb2:	fe 2c       	mov	r15, r14
     eb4:	1c 2d       	mov	r17, r12
     eb6:	e5 01       	movw	r28, r10
	while((*data)!='\0'){
     eb8:	a8 80       	ld	r10, Y
     eba:	aa 20       	and	r10, r10
     ebc:	69 f0       	breq	.+26     	; 0xed8 <LCD_vsend_string+0x4c>
			_delay_ms(1);
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     ebe:	21 96       	adiw	r28, 0x01	; 1
	while((*data)!='\0'){
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
     ec0:	86 2d       	mov	r24, r6
     ec2:	67 2d       	mov	r22, r7
     ec4:	48 2d       	mov	r20, r8
     ec6:	29 2d       	mov	r18, r9
     ec8:	0d 2d       	mov	r16, r13
     eca:	ef 2c       	mov	r14, r15
     ecc:	c1 2e       	mov	r12, r17
     ece:	0e 94 da 06 	call	0xdb4	; 0xdb4 <LCD_vsend_char>
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
	while((*data)!='\0'){
     ed2:	a9 90       	ld	r10, Y+
     ed4:	aa 20       	and	r10, r10
     ed6:	a1 f7       	brne	.-24     	; 0xec0 <LCD_vsend_string+0x34>
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
		data++;
	}
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	bf 90       	pop	r11
     eea:	af 90       	pop	r10
     eec:	9f 90       	pop	r9
     eee:	8f 90       	pop	r8
     ef0:	7f 90       	pop	r7
     ef2:	6f 90       	pop	r6
     ef4:	08 95       	ret

00000ef6 <LCD_display_number>:

void LCD_display_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u32 Number){
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	27 97       	sbiw	r28, 0x07	; 7
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	18 2f       	mov	r17, r24
     f22:	f6 2e       	mov	r15, r22
     f24:	d4 2e       	mov	r13, r20
     f26:	72 2e       	mov	r7, r18
     f28:	d5 01       	movw	r26, r10
     f2a:	c4 01       	movw	r24, r8
	u8 str[7]; 
	sprintf(str,"%d",Number);
     f2c:	2d b7       	in	r18, 0x3d	; 61
     f2e:	3e b7       	in	r19, 0x3e	; 62
     f30:	28 50       	subi	r18, 0x08	; 8
     f32:	30 40       	sbci	r19, 0x00	; 0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	3e bf       	out	0x3e, r19	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	2d bf       	out	0x3d, r18	; 61
     f3e:	4d b7       	in	r20, 0x3d	; 61
     f40:	5e b7       	in	r21, 0x3e	; 62
     f42:	4f 5f       	subi	r20, 0xFF	; 255
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	5e 01       	movw	r10, r28
     f48:	08 94       	sec
     f4a:	a1 1c       	adc	r10, r1
     f4c:	b1 1c       	adc	r11, r1
     f4e:	ed b7       	in	r30, 0x3d	; 61
     f50:	fe b7       	in	r31, 0x3e	; 62
     f52:	b2 82       	std	Z+2, r11	; 0x02
     f54:	a1 82       	std	Z+1, r10	; 0x01
     f56:	20 e7       	ldi	r18, 0x70	; 112
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	fa 01       	movw	r30, r20
     f5c:	33 83       	std	Z+3, r19	; 0x03
     f5e:	22 83       	std	Z+2, r18	; 0x02
     f60:	84 83       	std	Z+4, r24	; 0x04
     f62:	95 83       	std	Z+5, r25	; 0x05
     f64:	a6 83       	std	Z+6, r26	; 0x06
     f66:	b7 83       	std	Z+7, r27	; 0x07
     f68:	0e 94 2b 14 	call	0x2856	; 0x2856 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
     f6c:	2d b7       	in	r18, 0x3d	; 61
     f6e:	3e b7       	in	r19, 0x3e	; 62
     f70:	28 5f       	subi	r18, 0xF8	; 248
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	3e bf       	out	0x3e, r19	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	2d bf       	out	0x3d, r18	; 61
     f7e:	81 2f       	mov	r24, r17
     f80:	6f 2d       	mov	r22, r15
     f82:	4d 2d       	mov	r20, r13
     f84:	27 2d       	mov	r18, r7
     f86:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_vsend_string>
}
     f8a:	27 96       	adiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	7f 90       	pop	r7
     fb0:	08 95       	ret

00000fb2 <LCD_display_real_number>:

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
     fb2:	2f 92       	push	r2
     fb4:	3f 92       	push	r3
     fb6:	4f 92       	push	r4
     fb8:	5f 92       	push	r5
     fba:	6f 92       	push	r6
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	61 97       	sbiw	r28, 0x11	; 17
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	18 2f       	mov	r17, r24
     fe8:	f6 2e       	mov	r15, r22
     fea:	d4 2e       	mov	r13, r20
     fec:	29 8b       	std	Y+17, r18	; 0x11
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
     fee:	c5 01       	movw	r24, r10
     ff0:	b4 01       	movw	r22, r8
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	0e 94 30 12 	call	0x2460	; 0x2460 <__cmpsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	6c f4       	brge	.+26     	; 0x101a <LCD_display_real_number+0x68>
	f32 tmpval = (Number < 0) ? -Number : Number;
    1000:	24 01       	movw	r4, r8
    1002:	35 01       	movw	r6, r10
    1004:	77 fa       	bst	r7, 7
    1006:	70 94       	com	r7
    1008:	77 f8       	bld	r7, 7
    100a:	70 94       	com	r7
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
}

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    100c:	0f 2e       	mov	r0, r31
    100e:	f3 e7       	ldi	r31, 0x73	; 115
    1010:	2f 2e       	mov	r2, r31
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	3f 2e       	mov	r3, r31
    1016:	f0 2d       	mov	r31, r0
    1018:	08 c0       	rjmp	.+16     	; 0x102a <LCD_display_real_number+0x78>
	f32 tmpval = (Number < 0) ? -Number : Number;
    101a:	24 01       	movw	r4, r8
    101c:	35 01       	movw	r6, r10
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
}

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
    101e:	0f 2e       	mov	r0, r31
    1020:	f5 e7       	ldi	r31, 0x75	; 117
    1022:	2f 2e       	mov	r2, r31
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	3f 2e       	mov	r3, r31
    1028:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
    102a:	c3 01       	movw	r24, r6
    102c:	b2 01       	movw	r22, r4
    102e:	0e 94 9c 12 	call	0x2538	; 0x2538 <__fixsfsi>
	f32 tmpFrac = tmpval - tmpInt1;
	s32 tmpInt2 = tmpFrac * 10000;
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    1032:	2d b7       	in	r18, 0x3d	; 61
    1034:	3e b7       	in	r19, 0x3e	; 62
    1036:	2e 50       	subi	r18, 0x0E	; 14
    1038:	30 40       	sbci	r19, 0x00	; 0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	3e bf       	out	0x3e, r19	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	2d bf       	out	0x3d, r18	; 61
    1044:	8d b6       	in	r8, 0x3d	; 61
    1046:	9e b6       	in	r9, 0x3e	; 62
    1048:	08 94       	sec
    104a:	81 1c       	adc	r8, r1
    104c:	91 1c       	adc	r9, r1
    104e:	5e 01       	movw	r10, r28
    1050:	08 94       	sec
    1052:	a1 1c       	adc	r10, r1
    1054:	b1 1c       	adc	r11, r1
    1056:	ed b7       	in	r30, 0x3d	; 61
    1058:	fe b7       	in	r31, 0x3e	; 62
    105a:	b2 82       	std	Z+2, r11	; 0x02
    105c:	a1 82       	std	Z+1, r10	; 0x01
    105e:	26 e7       	ldi	r18, 0x76	; 118
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	f4 01       	movw	r30, r8
    1064:	33 83       	std	Z+3, r19	; 0x03
    1066:	22 83       	std	Z+2, r18	; 0x02
    1068:	35 82       	std	Z+5, r3	; 0x05
    106a:	24 82       	std	Z+4, r2	; 0x04
    106c:	66 83       	std	Z+6, r22	; 0x06
    106e:	77 83       	std	Z+7, r23	; 0x07
    1070:	80 87       	std	Z+8, r24	; 0x08
    1072:	91 87       	std	Z+9, r25	; 0x09
void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,f64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
	f32 tmpFrac = tmpval - tmpInt1;
    1074:	0e 94 cf 12 	call	0x259e	; 0x259e <__floatsisf>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	c3 01       	movw	r24, r6
    107e:	b2 01       	movw	r22, r4
    1080:	0e 94 cb 11 	call	0x2396	; 0x2396 <__subsf3>
	s32 tmpInt2 = tmpFrac * 10000;
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e4       	ldi	r19, 0x40	; 64
    1088:	4c e1       	ldi	r20, 0x1C	; 28
    108a:	56 e4       	ldi	r21, 0x46	; 70
    108c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1090:	0e 94 9c 12 	call	0x2538	; 0x2538 <__fixsfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    1098:	f4 01       	movw	r30, r8
    109a:	82 87       	std	Z+10, r24	; 0x0a
    109c:	93 87       	std	Z+11, r25	; 0x0b
    109e:	a4 87       	std	Z+12, r26	; 0x0c
    10a0:	b5 87       	std	Z+13, r27	; 0x0d
    10a2:	0e 94 2b 14 	call	0x2856	; 0x2856 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
    10a6:	2d b7       	in	r18, 0x3d	; 61
    10a8:	3e b7       	in	r19, 0x3e	; 62
    10aa:	22 5f       	subi	r18, 0xF2	; 242
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	3e bf       	out	0x3e, r19	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	2d bf       	out	0x3d, r18	; 61
    10b8:	81 2f       	mov	r24, r17
    10ba:	6f 2d       	mov	r22, r15
    10bc:	4d 2d       	mov	r20, r13
    10be:	29 89       	ldd	r18, Y+17	; 0x11
    10c0:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_vsend_string>
    10c4:	61 96       	adiw	r28, 0x11	; 17
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	6f 90       	pop	r6
    10ec:	5f 90       	pop	r5
    10ee:	4f 90       	pop	r4
    10f0:	3f 90       	pop	r3
    10f2:	2f 90       	pop	r2
    10f4:	08 95       	ret

000010f6 <LDR_sensor_vInit>:
 * LDR_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LDR_ECU.h"
void LDR_sensor_vInit(u8 pin){
    10f6:	cf 93       	push	r28
    10f8:	c8 2f       	mov	r28, r24
	ADC_vInit();
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	switch(pin){		
    10fe:	c3 30       	cpi	r28, 0x03	; 3
    1100:	11 f1       	breq	.+68     	; 0x1146 <LDR_sensor_vInit+0x50>
    1102:	c4 30       	cpi	r28, 0x04	; 4
    1104:	28 f4       	brcc	.+10     	; 0x1110 <LDR_sensor_vInit+0x1a>
    1106:	c1 30       	cpi	r28, 0x01	; 1
    1108:	91 f0       	breq	.+36     	; 0x112e <LDR_sensor_vInit+0x38>
    110a:	c2 30       	cpi	r28, 0x02	; 2
    110c:	b0 f4       	brcc	.+44     	; 0x113a <LDR_sensor_vInit+0x44>
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <LDR_sensor_vInit+0x2c>
    1110:	c5 30       	cpi	r28, 0x05	; 5
    1112:	29 f1       	breq	.+74     	; 0x115e <LDR_sensor_vInit+0x68>
    1114:	c5 30       	cpi	r28, 0x05	; 5
    1116:	e8 f0       	brcs	.+58     	; 0x1152 <LDR_sensor_vInit+0x5c>
    1118:	c6 30       	cpi	r28, 0x06	; 6
    111a:	39 f1       	breq	.+78     	; 0x116a <LDR_sensor_vInit+0x74>
    111c:	c7 30       	cpi	r28, 0x07	; 7
    111e:	81 f5       	brne	.+96     	; 0x1180 <LDR_sensor_vInit+0x8a>
    1120:	2a c0       	rjmp	.+84     	; 0x1176 <LDR_sensor_vInit+0x80>
		case 0 :
		GPIO_vsetPIN_DIR('A',0,0);  
    1122:	81 e4       	ldi	r24, 0x41	; 65
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    112c:	29 c0       	rjmp	.+82     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 1 :
		GPIO_vsetPIN_DIR('A',1,0);
    112e:	81 e4       	ldi	r24, 0x41	; 65
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    1138:	23 c0       	rjmp	.+70     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 2 :
		GPIO_vsetPIN_DIR('A',2,0);
    113a:	81 e4       	ldi	r24, 0x41	; 65
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    1144:	1d c0       	rjmp	.+58     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 3 :
		GPIO_vsetPIN_DIR('A',3,0);
    1146:	81 e4       	ldi	r24, 0x41	; 65
    1148:	63 e0       	ldi	r22, 0x03	; 3
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    1150:	17 c0       	rjmp	.+46     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 4 :
		GPIO_vsetPIN_DIR('A',4,0);
    1152:	81 e4       	ldi	r24, 0x41	; 65
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    115c:	11 c0       	rjmp	.+34     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 5 :
		GPIO_vsetPIN_DIR('A',5,0);
    115e:	81 e4       	ldi	r24, 0x41	; 65
    1160:	65 e0       	ldi	r22, 0x05	; 5
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 6 :
		GPIO_vsetPIN_DIR('A',6,0);
    116a:	81 e4       	ldi	r24, 0x41	; 65
    116c:	66 e0       	ldi	r22, 0x06	; 6
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <LDR_sensor_vInit+0x8a>
		case 7 :
		GPIO_vsetPIN_DIR('A',7,0);
    1176:	81 e4       	ldi	r24, 0x41	; 65
    1178:	67 e0       	ldi	r22, 0x07	; 7
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		break;
	}
}
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <LDR_sensor_u16Read>:

u16 LDR_sensor_u16Read(u8 pin){
	u16 intensity ;
	
	intensity = ADC_u16Read_Single_Endded(pin);
    1184:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_u16Read_Single_Endded>
	
	return intensity;
    1188:	08 95       	ret

0000118a <LED_vintialize>:
 * It is in ECU abstraction layer 
 */

#include "GPIO_MCAL.h"
void LED_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    118a:	41 e0       	ldi	r20, 0x01	; 1
    118c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
}
    1190:	08 95       	ret

00001192 <LED_vTurnon>:
void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
}
    1198:	08 95       	ret

0000119a <LED_vTurnoff>:
void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
}
    11a0:	08 95       	ret

000011a2 <LED_vtoggle>:
void LED_vtoggle(u8 port, u8 pin){
	GPIO_vtoggle_PIN(port,pin);
    11a2:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_vtoggle_PIN>
    11a6:	08 95       	ret

000011a8 <Motor_get_config>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "Motor_ECU.h"
void Motor_get_config(u8 Motor_Type , u8 Motor_Port , u8 Pin1 , u8 Pin2){
	Motor_config.M_Type = Motor_Type ;
    11a8:	80 93 b1 00 	sts	0x00B1, r24
	Motor_config.M_Port = Motor_Port ;
    11ac:	60 93 b2 00 	sts	0x00B2, r22
	Motor_config.IN1    = Pin1;
    11b0:	40 93 b3 00 	sts	0x00B3, r20
	Motor_config.IN2    = Pin2;
    11b4:	20 93 b4 00 	sts	0x00B4, r18
}
    11b8:	08 95       	ret

000011ba <DC_Motor_without_PWM_Init>:

void DC_Motor_without_PWM_Init(void){
	if (Motor_config.M_Type == DC_Motor){
    11ba:	80 91 b1 00 	lds	r24, 0x00B1
    11be:	88 23       	and	r24, r24
    11c0:	71 f4       	brne	.+28     	; 0x11de <DC_Motor_without_PWM_Init+0x24>
		GPIO_vsetPIN_DIR(Motor_config.M_Port , Motor_config.IN1 , 1);
    11c2:	80 91 b2 00 	lds	r24, 0x00B2
    11c6:	60 91 b3 00 	lds	r22, 0x00B3
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(Motor_config.M_Port , Motor_config.IN2 , 1);
    11d0:	80 91 b2 00 	lds	r24, 0x00B2
    11d4:	60 91 b4 00 	lds	r22, 0x00B4
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
    11de:	08 95       	ret

000011e0 <DC_Motor_without_PWM_Move_Forward>:
		
	}
}

void DC_Motor_without_PWM_Move_Forward(void){
	if (Motor_config.M_Type == DC_Motor){
    11e0:	80 91 b1 00 	lds	r24, 0x00B1
    11e4:	88 23       	and	r24, r24
    11e6:	71 f4       	brne	.+28     	; 0x1204 <DC_Motor_without_PWM_Move_Forward+0x24>
		GPIO_vwrite_PIN(Motor_config.M_Port , Motor_config.IN1 , 1);
    11e8:	80 91 b2 00 	lds	r24, 0x00B2
    11ec:	60 91 b3 00 	lds	r22, 0x00B3
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(Motor_config.M_Port , Motor_config.IN2 , 0);
    11f6:	80 91 b2 00 	lds	r24, 0x00B2
    11fa:	60 91 b4 00 	lds	r22, 0x00B4
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
    1204:	08 95       	ret

00001206 <DC_Motor_without_PWM_Move_Backward>:
		
	}
}

void DC_Motor_without_PWM_Move_Backward(void){
	if (Motor_config.M_Type == DC_Motor){
    1206:	80 91 b1 00 	lds	r24, 0x00B1
    120a:	88 23       	and	r24, r24
    120c:	71 f4       	brne	.+28     	; 0x122a <DC_Motor_without_PWM_Move_Backward+0x24>
		GPIO_vwrite_PIN(Motor_config.M_Port , Motor_config.IN1 , 0);
    120e:	80 91 b2 00 	lds	r24, 0x00B2
    1212:	60 91 b3 00 	lds	r22, 0x00B3
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(Motor_config.M_Port , Motor_config.IN2 , 1);
    121c:	80 91 b2 00 	lds	r24, 0x00B2
    1220:	60 91 b4 00 	lds	r22, 0x00B4
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
    122a:	08 95       	ret

0000122c <DC_Motor_with_PWM_Init>:
		
	}
}

void DC_Motor_with_PWM_Init(){
	if (Motor_config.M_Type == DC_Motor){
    122c:	80 91 b1 00 	lds	r24, 0x00B1
    1230:	88 23       	and	r24, r24
    1232:	91 f4       	brne	.+36     	; 0x1258 <DC_Motor_with_PWM_Init+0x2c>
		TMR0_Get_Configuration(Fast_PWM_Mode,TOIE0_disable,OCIE0_disable,NO_PRESCALING);
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	21 e0       	ldi	r18, 0x01	; 1
    123c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <TMR0_Get_Configuration>
		GPIO_vsetPIN_DIR('B',3,1);
    1240:	82 e4       	ldi	r24, 0x42	; 66
    1242:	63 e0       	ldi	r22, 0x03	; 3
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(Motor_config.M_Port , Motor_config.IN2 , 1);
    124a:	80 91 b2 00 	lds	r24, 0x00B2
    124e:	60 91 b4 00 	lds	r22, 0x00B4
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
    1258:	08 95       	ret

0000125a <DC_Motor_with_PWM_Move>:
		
	}
}

void DC_Motor_with_PWM_Move(u8 power){
	if (Motor_config.M_Type == DC_Motor){
    125a:	90 91 b1 00 	lds	r25, 0x00B1
    125e:	99 23       	and	r25, r25
    1260:	49 f4       	brne	.+18     	; 0x1274 <DC_Motor_with_PWM_Move+0x1a>
		TMR0_Fast_PWM_Gen(power);
    1262:	0e 94 ed 0a 	call	0x15da	; 0x15da <TMR0_Fast_PWM_Gen>
		GPIO_vwrite_PIN(Motor_config.M_Port , Motor_config.IN2 , 0);
    1266:	80 91 b2 00 	lds	r24, 0x00B2
    126a:	60 91 b4 00 	lds	r22, 0x00B4
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
    1274:	08 95       	ret

00001276 <Servo_Motor_move>:
}

void Servo_Motor_move(s8 degree){
	f64 Time;
	
	Time = (degree*0.5)/90;
    1276:	68 2f       	mov	r22, r24
    1278:	77 27       	eor	r23, r23
    127a:	67 fd       	sbrc	r22, 7
    127c:	70 95       	com	r23
    127e:	87 2f       	mov	r24, r23
    1280:	97 2f       	mov	r25, r23
    1282:	0e 94 cf 12 	call	0x259e	; 0x259e <__floatsisf>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	44 eb       	ldi	r20, 0xB4	; 180
    1298:	52 e4       	ldi	r21, 0x42	; 66
    129a:	0e 94 34 12 	call	0x2468	; 0x2468 <__divsf3>
	
	Time = Time + 1.5 ;
    129e:	46 2f       	mov	r20, r22
    12a0:	57 2f       	mov	r21, r23
    12a2:	68 2f       	mov	r22, r24
    12a4:	79 2f       	mov	r23, r25
    12a6:	cb 01       	movw	r24, r22
    12a8:	ba 01       	movw	r22, r20
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 ec       	ldi	r20, 0xC0	; 192
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	0e 94 cc 11 	call	0x2398	; 0x2398 <__addsf3>
	
	
	TMR1_Fast_PWM_Gen(Time);
    12b6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <TMR1_Fast_PWM_Gen>
    12ba:	08 95       	ret

000012bc <PIR_Init>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "PIR_ECU.h"
void PIR_Init(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin,0);
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
}
    12c2:	08 95       	ret

000012c4 <PIR_u8Read>:


u8 PIR_u8Read(u8 port, u8 pin){
	u8 x;
	x= GPIO_u8read_PIN(port,pin);
    12c4:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_u8read_PIN>

	return x;
    12c8:	08 95       	ret

000012ca <Relay_vintialize>:
 *  Author: Mahmoud Ayman
 */ 
#include "Relay_ECU.h"

void Relay_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
}
    12d0:	08 95       	ret

000012d2 <Relay_vTurnon>:

void Relay_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
}
    12d8:	08 95       	ret

000012da <Relay_vTurnoff>:

void Relay_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
    12e0:	08 95       	ret

000012e2 <Seven_Segment_Init>:
#define  Eight_bit 1
#define  High_Nibble 1
#define  LOW_Nibble 0

void Seven_Segment_Init(u8 Mode,u8 port ,u8 Nibble){
	if (0 == Mode){
    12e2:	88 23       	and	r24, r24
    12e4:	71 f4       	brne	.+28     	; 0x1302 <Seven_Segment_Init+0x20>
		if (0==Nibble){
    12e6:	44 23       	and	r20, r20
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <Seven_Segment_Init+0x12>
			GPIO_Low_Nibble_vset_dir(port,1);
    12ea:	86 2f       	mov	r24, r22
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <GPIO_Low_Nibble_vset_dir>
    12f2:	08 95       	ret
		}else if (1==Nibble){
    12f4:	41 30       	cpi	r20, 0x01	; 1
    12f6:	59 f4       	brne	.+22     	; 0x130e <Seven_Segment_Init+0x2c>
			GPIO_High_Nibble_vset_dir(port,1);
    12f8:	86 2f       	mov	r24, r22
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	0e 94 96 03 	call	0x72c	; 0x72c <GPIO_High_Nibble_vset_dir>
    1300:	08 95       	ret
		}
		else{
			
		}
	}else if (1==Mode){
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	21 f4       	brne	.+8      	; 0x130e <Seven_Segment_Init+0x2c>
		GPIO_vset_PORT_DIR(port,0xff);
    1306:	86 2f       	mov	r24, r22
    1308:	6f ef       	ldi	r22, 0xFF	; 255
    130a:	0e 94 05 03 	call	0x60a	; 0x60a <GPIO_vset_PORT_DIR>
    130e:	08 95       	ret

00001310 <Seven_segment_Display>:
		
	}
}


void Seven_segment_Display(u8 Mode,u8 Nibble , u8 port, u8 value){
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	2a 97       	sbiw	r28, 0x0a	; 10
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
	if (0 == Mode){
    1324:	88 23       	and	r24, r24
    1326:	71 f4       	brne	.+28     	; 0x1344 <Seven_segment_Display+0x34>
		if (0==Nibble){
    1328:	66 23       	and	r22, r22
    132a:	29 f4       	brne	.+10     	; 0x1336 <Seven_segment_Display+0x26>
			GPIO_Low_Nibble_vwrite(port,value);
    132c:	84 2f       	mov	r24, r20
    132e:	62 2f       	mov	r22, r18
    1330:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_Low_Nibble_vwrite>
    1334:	2c c0       	rjmp	.+88     	; 0x138e <Seven_segment_Display+0x7e>
		}else if (1==Nibble){
    1336:	61 30       	cpi	r22, 0x01	; 1
    1338:	51 f5       	brne	.+84     	; 0x138e <Seven_segment_Display+0x7e>
			GPIO_High_Nibble_vwrite(port,value);
    133a:	84 2f       	mov	r24, r20
    133c:	62 2f       	mov	r22, r18
    133e:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_High_Nibble_vwrite>
    1342:	25 c0       	rjmp	.+74     	; 0x138e <Seven_segment_Display+0x7e>
		}
		else{
			
		}
	}else if (1==Mode){
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	19 f5       	brne	.+70     	; 0x138e <Seven_segment_Display+0x7e>
		if (value >=0 && value <=9)
    1348:	2a 30       	cpi	r18, 0x0A	; 10
    134a:	88 f4       	brcc	.+34     	; 0x136e <Seven_segment_Display+0x5e>
		{
			u8 arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    134c:	de 01       	movw	r26, r28
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	e0 e8       	ldi	r30, 0x80	; 128
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a e0       	ldi	r24, 0x0A	; 10
    1356:	01 90       	ld	r0, Z+
    1358:	0d 92       	st	X+, r0
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	e1 f7       	brne	.-8      	; 0x1356 <Seven_segment_Display+0x46>
			GPIO_vwrite_PORT(port,arr[value]);
    135e:	fe 01       	movw	r30, r28
    1360:	e2 0f       	add	r30, r18
    1362:	f1 1d       	adc	r31, r1
    1364:	84 2f       	mov	r24, r20
    1366:	61 81       	ldd	r22, Z+1	; 0x01
    1368:	0e 94 24 03 	call	0x648	; 0x648 <GPIO_vwrite_PORT>
    136c:	10 c0       	rjmp	.+32     	; 0x138e <Seven_segment_Display+0x7e>
			#define B 1
			#define C 2
			#define D 3
			#define E 4
			#define F 5
			u8 arr1[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
    136e:	de 01       	movw	r26, r28
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	ea e8       	ldi	r30, 0x8A	; 138
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	86 e0       	ldi	r24, 0x06	; 6
    1378:	01 90       	ld	r0, Z+
    137a:	0d 92       	st	X+, r0
    137c:	81 50       	subi	r24, 0x01	; 1
    137e:	e1 f7       	brne	.-8      	; 0x1378 <Seven_segment_Display+0x68>
			GPIO_vwrite_PORT(port,arr1[value]);
    1380:	fe 01       	movw	r30, r28
    1382:	e2 0f       	add	r30, r18
    1384:	f1 1d       	adc	r31, r1
    1386:	84 2f       	mov	r24, r20
    1388:	61 81       	ldd	r22, Z+1	; 0x01
    138a:	0e 94 24 03 	call	0x648	; 0x648 <GPIO_vwrite_PORT>
		}
	}
	else{
		
	}
    138e:	2a 96       	adiw	r28, 0x0a	; 10
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <SPI_MasterInit>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	GPIO_vsetPIN_DIR('B',4,1);
    13a0:	82 e4       	ldi	r24, 0x42	; 66
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR('B',5,1);
    13aa:	82 e4       	ldi	r24, 0x42	; 66
    13ac:	65 e0       	ldi	r22, 0x05	; 5
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR('B',7,1);
    13b4:	82 e4       	ldi	r24, 0x42	; 66
    13b6:	67 e0       	ldi	r22, 0x07	; 7
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
	/*Enable Master mode*/
	SET_BIT(SPCR,MSTR);
    13be:	6c 9a       	sbi	0x0d, 4	; 13
	/*Set clock to fosc/16*/
	SET_BIT(SPCR,SPR0);
    13c0:	68 9a       	sbi	0x0d, 0	; 13
	/*Enable SPI*/
	SET_BIT(SPCR,SPE);
    13c2:	6e 9a       	sbi	0x0d, 6	; 13
	/*set SS to high */
	GPIO_vwrite_PIN('B',4,1);
    13c4:	82 e4       	ldi	r24, 0x42	; 66
    13c6:	64 e0       	ldi	r22, 0x04	; 4
    13c8:	41 e0       	ldi	r20, 0x01	; 1
    13ca:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
}
    13ce:	08 95       	ret

000013d0 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*Enable SPI*/
	SET_BIT(SPCR,SPE);
    13d0:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	GPIO_vsetPIN_DIR('B',6,1);
    13d2:	82 e4       	ldi	r24, 0x42	; 66
    13d4:	66 e0       	ldi	r22, 0x06	; 6
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
}
    13dc:	08 95       	ret

000013de <SPI_MasterTransmitchar>:

unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
    13de:	cf 93       	push	r28
    13e0:	c8 2f       	mov	r28, r24
	/*Clear SS to send data to slave*/
	GPIO_vwrite_PIN('B',4,0);
    13e2:	82 e4       	ldi	r24, 0x42	; 66
    13e4:	64 e0       	ldi	r22, 0x04	; 4
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	0e 94 25 01 	call	0x24a	; 0x24a <GPIO_vwrite_PIN>
	/*Put data on SPDR*/
	SPDR=Data;
    13ec:	cf b9       	out	0x0f, r28	; 15
	/*Wait until the transmission is finished*/
	while(READ_BIT(SPSR,SPIF)==0);
    13ee:	77 9b       	sbis	0x0e, 7	; 14
    13f0:	fe cf       	rjmp	.-4      	; 0x13ee <SPI_MasterTransmitchar+0x10>
	/*read SPDR*/
	return SPDR ;
    13f2:	8f b1       	in	r24, 0x0f	; 15
}
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <SPI_SlaveReceivechar>:

unsigned char SPI_SlaveReceivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
    13f8:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
    13fa:	77 9b       	sbis	0x0e, 7	; 14
    13fc:	fe cf       	rjmp	.-4      	; 0x13fa <SPI_SlaveReceivechar+0x2>
	/*read the received data*/
	return SPDR ;
    13fe:	8f b1       	in	r24, 0x0f	; 15
}
    1400:	08 95       	ret

00001402 <SPI_MasterTransmitstring>:

void SPI_MasterTransmitstring(unsigned char *ptr)
{
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
    1408:	88 81       	ld	r24, Y
    140a:	88 23       	and	r24, r24
    140c:	79 f0       	breq	.+30     	; 0x142c <SPI_MasterTransmitstring+0x2a>
	while(READ_BIT(SPSR,SPIF)==0);
	/*read the received data*/
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
    140e:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr);
    1410:	0e 94 ef 09 	call	0x13de	; 0x13de <SPI_MasterTransmitchar>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	92 e5       	ldi	r25, 0x52	; 82
    1418:	a7 e0       	ldi	r26, 0x07	; 7
    141a:	81 50       	subi	r24, 0x01	; 1
    141c:	90 40       	sbci	r25, 0x00	; 0
    141e:	a0 40       	sbci	r26, 0x00	; 0
    1420:	e1 f7       	brne	.-8      	; 0x141a <SPI_MasterTransmitstring+0x18>
    1422:	00 c0       	rjmp	.+0      	; 0x1424 <SPI_MasterTransmitstring+0x22>
    1424:	00 00       	nop
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
{
	while((*ptr)!=0)
    1426:	89 91       	ld	r24, Y+
    1428:	88 23       	and	r24, r24
    142a:	91 f7       	brne	.-28     	; 0x1410 <SPI_MasterTransmitstring+0xe>
	{
		SPI_MasterTransmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <temp_sensor_vInit>:
 *  Author: Mahmoud Ayman
 */ 

#include "Temperature_Sensor_ECU.h"
#define Vref 2.56
void temp_sensor_vInit(u8 pin){
    1432:	cf 93       	push	r28
    1434:	c8 2f       	mov	r28, r24
	ADC_vInit();
    1436:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	switch(pin){
    143a:	c3 30       	cpi	r28, 0x03	; 3
    143c:	11 f1       	breq	.+68     	; 0x1482 <temp_sensor_vInit+0x50>
    143e:	c4 30       	cpi	r28, 0x04	; 4
    1440:	28 f4       	brcc	.+10     	; 0x144c <temp_sensor_vInit+0x1a>
    1442:	c1 30       	cpi	r28, 0x01	; 1
    1444:	91 f0       	breq	.+36     	; 0x146a <temp_sensor_vInit+0x38>
    1446:	c2 30       	cpi	r28, 0x02	; 2
    1448:	b0 f4       	brcc	.+44     	; 0x1476 <temp_sensor_vInit+0x44>
    144a:	09 c0       	rjmp	.+18     	; 0x145e <temp_sensor_vInit+0x2c>
    144c:	c5 30       	cpi	r28, 0x05	; 5
    144e:	29 f1       	breq	.+74     	; 0x149a <temp_sensor_vInit+0x68>
    1450:	c5 30       	cpi	r28, 0x05	; 5
    1452:	e8 f0       	brcs	.+58     	; 0x148e <temp_sensor_vInit+0x5c>
    1454:	c6 30       	cpi	r28, 0x06	; 6
    1456:	39 f1       	breq	.+78     	; 0x14a6 <temp_sensor_vInit+0x74>
    1458:	c7 30       	cpi	r28, 0x07	; 7
    145a:	81 f5       	brne	.+96     	; 0x14bc <temp_sensor_vInit+0x8a>
    145c:	2a c0       	rjmp	.+84     	; 0x14b2 <temp_sensor_vInit+0x80>
		case 0 :
			GPIO_vsetPIN_DIR('A',0,0);
    145e:	81 e4       	ldi	r24, 0x41	; 65
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    1468:	29 c0       	rjmp	.+82     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 1 :
			GPIO_vsetPIN_DIR('A',1,0);
    146a:	81 e4       	ldi	r24, 0x41	; 65
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    1474:	23 c0       	rjmp	.+70     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 2 :
			GPIO_vsetPIN_DIR('A',2,0);
    1476:	81 e4       	ldi	r24, 0x41	; 65
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    1480:	1d c0       	rjmp	.+58     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 3 :
			GPIO_vsetPIN_DIR('A',3,0);
    1482:	81 e4       	ldi	r24, 0x41	; 65
    1484:	63 e0       	ldi	r22, 0x03	; 3
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    148c:	17 c0       	rjmp	.+46     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 4 :
			GPIO_vsetPIN_DIR('A',4,0);
    148e:	81 e4       	ldi	r24, 0x41	; 65
    1490:	64 e0       	ldi	r22, 0x04	; 4
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 5 :
			GPIO_vsetPIN_DIR('A',5,0);
    149a:	81 e4       	ldi	r24, 0x41	; 65
    149c:	65 e0       	ldi	r22, 0x05	; 5
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 6 :
			GPIO_vsetPIN_DIR('A',6,0);
    14a6:	81 e4       	ldi	r24, 0x41	; 65
    14a8:	66 e0       	ldi	r22, 0x06	; 6
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <temp_sensor_vInit+0x8a>
		case 7 :
			GPIO_vsetPIN_DIR('A',7,0);
    14b2:	81 e4       	ldi	r24, 0x41	; 65
    14b4:	67 e0       	ldi	r22, 0x07	; 7
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
			break;
	}
	
}
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <temp_sensor_u16Read>:

u16 temp_sensor_u16Read(u8 pin){
	u16 temperatue ;
	u16 v;
	v = ADC_u16Read_Single_Endded(pin);
    14c0:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_u16Read_Single_Endded>
	temperatue = (v*Vref*1000)/(1024*10);
    14c4:	bc 01       	movw	r22, r24
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 cd 12 	call	0x259a	; 0x259a <__floatunsisf>
    14ce:	2a e0       	ldi	r18, 0x0A	; 10
    14d0:	37 ed       	ldi	r19, 0xD7	; 215
    14d2:	43 e2       	ldi	r20, 0x23	; 35
    14d4:	50 e4       	ldi	r21, 0x40	; 64
    14d6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a e7       	ldi	r20, 0x7A	; 122
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e2       	ldi	r20, 0x20	; 32
    14ec:	56 e4       	ldi	r21, 0x46	; 70
    14ee:	0e 94 34 12 	call	0x2468	; 0x2468 <__divsf3>
    14f2:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixunssfsi>
	return temperatue;
    14f6:	86 2f       	mov	r24, r22
    14f8:	97 2f       	mov	r25, r23
    14fa:	08 95       	ret

000014fc <TMR0_Get_Configuration>:
#define F_CPU 8000000UL
/*************************************** Timer0 **********************************************/
static void (*Ptr_To_OVFI)(void);
static void (*Ptr_To_OCMI)(void);
void TMR0_Get_Configuration(u8 waveform , u8 TMR0_OVFI , u8 TMR0_CTCI , u8 clk_Selcet){
	confiuration.Mode = waveform ;
    14fc:	80 93 b5 00 	sts	0x00B5, r24
	confiuration.Prescalar = clk_Selcet;
    1500:	20 93 b8 00 	sts	0x00B8, r18
	confiuration.TMR0_OVF_Interrupt = TMR0_OVFI;
    1504:	60 93 b6 00 	sts	0x00B6, r22
	confiuration.TMR0_CTC_Interrupt = TMR0_CTCI;
    1508:	40 93 b7 00 	sts	0x00B7, r20
}
    150c:	08 95       	ret

0000150e <TMR0_vInit>:

void TMR0_vInit(void){
	/*********************Adjust Mode*****************************/
		if (confiuration.Mode==NORMAL_Mode){
    150e:	80 91 b5 00 	lds	r24, 0x00B5
    1512:	88 23       	and	r24, r24
    1514:	39 f4       	brne	.+14     	; 0x1524 <TMR0_vInit+0x16>
			CLR_BIT(myTCCR0,myWGM00);
    1516:	83 b7       	in	r24, 0x33	; 51
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(myTCCR0,myWGM01);
    151c:	83 b7       	in	r24, 0x33	; 51
    151e:	87 7f       	andi	r24, 0xF7	; 247
    1520:	83 bf       	out	0x33, r24	; 51
    1522:	23 c0       	rjmp	.+70     	; 0x156a <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==CTC_Mode){
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	39 f4       	brne	.+14     	; 0x1536 <TMR0_vInit+0x28>
			CLR_BIT(myTCCR0,myWGM00);
    1528:	83 b7       	in	r24, 0x33	; 51
    152a:	8f 7b       	andi	r24, 0xBF	; 191
    152c:	83 bf       	out	0x33, r24	; 51
			SET_BIT(myTCCR0,myWGM01);
    152e:	83 b7       	in	r24, 0x33	; 51
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	83 bf       	out	0x33, r24	; 51
    1534:	1a c0       	rjmp	.+52     	; 0x156a <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==OCM_Non_PWM_Mode){
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	39 f4       	brne	.+14     	; 0x1548 <TMR0_vInit+0x3a>
			CLR_BIT(myTCCR0,myWGM00);
    153a:	83 b7       	in	r24, 0x33	; 51
    153c:	8f 7b       	andi	r24, 0xBF	; 191
    153e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(myTCCR0,myWGM01);
    1540:	83 b7       	in	r24, 0x33	; 51
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	83 bf       	out	0x33, r24	; 51
    1546:	11 c0       	rjmp	.+34     	; 0x156a <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==Fast_PWM_Mode){
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	39 f4       	brne	.+14     	; 0x155a <TMR0_vInit+0x4c>
			SET_BIT(myTCCR0,myWGM00);
    154c:	83 b7       	in	r24, 0x33	; 51
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	83 bf       	out	0x33, r24	; 51
			SET_BIT(myTCCR0,myWGM01);
    1552:	83 b7       	in	r24, 0x33	; 51
    1554:	88 60       	ori	r24, 0x08	; 8
    1556:	83 bf       	out	0x33, r24	; 51
    1558:	08 c0       	rjmp	.+16     	; 0x156a <TMR0_vInit+0x5c>
		}else if (confiuration.Mode==Phase_Correct_PWM){
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	31 f4       	brne	.+12     	; 0x156a <TMR0_vInit+0x5c>
			SET_BIT(myTCCR0,myWGM00);
    155e:	83 b7       	in	r24, 0x33	; 51
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(myTCCR0,myWGM01);
    1564:	83 b7       	in	r24, 0x33	; 51
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	83 bf       	out	0x33, r24	; 51
		}
	/****************************************************************/	
	/************************Adjust prescalar************************/
		myTCCR0 |= confiuration.Prescalar;    
    156a:	93 b7       	in	r25, 0x33	; 51
    156c:	80 91 b8 00 	lds	r24, 0x00B8
    1570:	89 2b       	or	r24, r25
    1572:	83 bf       	out	0x33, r24	; 51
	/****************************************************************/
	/*************Over flow Interrupt Enable/Disable*****************/
		if (confiuration.TMR0_OVF_Interrupt==TOIE0_enable){
    1574:	80 91 b6 00 	lds	r24, 0x00B6
    1578:	88 23       	and	r24, r24
    157a:	21 f4       	brne	.+8      	; 0x1584 <TMR0_vInit+0x76>
			SET_BIT(myTIMSK,myTOIE0);
    157c:	89 b7       	in	r24, 0x39	; 57
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	89 bf       	out	0x39, r24	; 57
    1582:	05 c0       	rjmp	.+10     	; 0x158e <TMR0_vInit+0x80>
		}else if (confiuration.TMR0_OVF_Interrupt==TOIE0_disable){
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	19 f4       	brne	.+6      	; 0x158e <TMR0_vInit+0x80>
			CLR_BIT(myTIMSK,myTOIE0);
    1588:	89 b7       	in	r24, 0x39	; 57
    158a:	8e 7f       	andi	r24, 0xFE	; 254
    158c:	89 bf       	out	0x39, r24	; 57
		}
	/****************************************************************/
	/******************OCR0 Interrupt Enable/Disable*****************/
		if (confiuration.TMR0_CTC_Interrupt==OCIE0_enable){
    158e:	80 91 b7 00 	lds	r24, 0x00B7
    1592:	88 23       	and	r24, r24
    1594:	21 f4       	brne	.+8      	; 0x159e <TMR0_vInit+0x90>
			SET_BIT(myTIMSK,myOCIE0);
    1596:	89 b7       	in	r24, 0x39	; 57
    1598:	82 60       	ori	r24, 0x02	; 2
    159a:	89 bf       	out	0x39, r24	; 57
    159c:	08 95       	ret
		}else if (confiuration.TMR0_CTC_Interrupt==OCIE0_disable){
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <TMR0_vInit+0x9a>
			CLR_BIT(myTIMSK,myOCIE0);
    15a2:	89 b7       	in	r24, 0x39	; 57
    15a4:	8d 7f       	andi	r24, 0xFD	; 253
    15a6:	89 bf       	out	0x39, r24	; 57
    15a8:	08 95       	ret

000015aa <TMR0_Set_Compare_Value>:
		}
	/****************************************************************/
}

void TMR0_Set_Compare_Value(u8 u8Val){
	myOCR0 = u8Val;
    15aa:	8c bf       	out	0x3c, r24	; 60
}
    15ac:	08 95       	ret

000015ae <TMR0_Set_Counter_Value>:
void TMR0_Set_Counter_Value(u8 u8Val){
	myTCNT0 = u8Val;
    15ae:	82 bf       	out	0x32, r24	; 50
}
    15b0:	08 95       	ret

000015b2 <TMR0_Read_count>:

u8 TMR0_Read_count(void){
	return myTCNT0;
    15b2:	82 b7       	in	r24, 0x32	; 50
}
    15b4:	08 95       	ret

000015b6 <TMR0_COM_Non_PWM_Gen>:

/*************************************** Wave Generation*************************************/
/*Compare Output Mode , Non PWM mode */
void TMR0_COM_Non_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRB,3);
    15b6:	bb 9a       	sbi	0x17, 3	; 23
	val=(duty_cycle * 256) / 100;
    15b8:	38 2f       	mov	r19, r24
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	c9 01       	movw	r24, r18
    15be:	64 e6       	ldi	r22, 0x64	; 100
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__divmodhi4>
    15c6:	86 2f       	mov	r24, r22
	TMR0_Set_Compare_Value(val);
    15c8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TMR0_Set_Compare_Value>
	SET_BIT(myTCCR0,myCOM00);
    15cc:	83 b7       	in	r24, 0x33	; 51
    15ce:	80 61       	ori	r24, 0x10	; 16
    15d0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(myTCCR0,myCOM01);
    15d2:	83 b7       	in	r24, 0x33	; 51
    15d4:	8f 7d       	andi	r24, 0xDF	; 223
    15d6:	83 bf       	out	0x33, r24	; 51
}
    15d8:	08 95       	ret

000015da <TMR0_Fast_PWM_Gen>:

/*Fast PWM mode */
void TMR0_Fast_PWM_Gen(u8 duty_cycle){
	SET_BIT(TCCR0,WGM00);
    15da:	93 b7       	in	r25, 0x33	; 51
    15dc:	90 64       	ori	r25, 0x40	; 64
    15de:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,WGM01);
    15e0:	93 b7       	in	r25, 0x33	; 51
    15e2:	98 60       	ori	r25, 0x08	; 8
    15e4:	93 bf       	out	0x33, r25	; 51
	u8 val;
	SET_BIT(myDDRB,3);
    15e6:	bb 9a       	sbi	0x17, 3	; 23
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    15e8:	93 b7       	in	r25, 0x33	; 51
    15ea:	91 60       	ori	r25, 0x01	; 1
    15ec:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,CS02);
    15ee:	93 b7       	in	r25, 0x33	; 51
    15f0:	94 60       	ori	r25, 0x04	; 4
    15f2:	93 bf       	out	0x33, r25	; 51
	val=(duty_cycle * 256) / 100;
    15f4:	38 2f       	mov	r19, r24
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	c9 01       	movw	r24, r18
    15fa:	64 e6       	ldi	r22, 0x64	; 100
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__divmodhi4>
	OCR0 = val;
    1602:	6c bf       	out	0x3c, r22	; 60
	CLR_BIT(myTCCR0,myCOM00);
    1604:	83 b7       	in	r24, 0x33	; 51
    1606:	8f 7e       	andi	r24, 0xEF	; 239
    1608:	83 bf       	out	0x33, r24	; 51
	SET_BIT(myTCCR0,myCOM01);
    160a:	83 b7       	in	r24, 0x33	; 51
    160c:	80 62       	ori	r24, 0x20	; 32
    160e:	83 bf       	out	0x33, r24	; 51
	
	
	
}
    1610:	08 95       	ret

00001612 <TMR0_Phase_Correct_PWM_Gen>:
/*Phase Correct PWM mode */
void TMR0_Phase_Correct_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRB,3);
    1612:	bb 9a       	sbi	0x17, 3	; 23
	val=(duty_cycle * 256) / 100;
    1614:	38 2f       	mov	r19, r24
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	c9 01       	movw	r24, r18
    161a:	64 e6       	ldi	r22, 0x64	; 100
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__divmodhi4>
    1622:	86 2f       	mov	r24, r22
	TMR0_Set_Compare_Value(val);
    1624:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TMR0_Set_Compare_Value>
	SET_BIT(myTCCR0,myCOM00);
    1628:	83 b7       	in	r24, 0x33	; 51
    162a:	80 61       	ori	r24, 0x10	; 16
    162c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(myTCCR0,myCOM01);
    162e:	83 b7       	in	r24, 0x33	; 51
    1630:	80 62       	ori	r24, 0x20	; 32
    1632:	83 bf       	out	0x33, r24	; 51
}
    1634:	08 95       	ret

00001636 <callback_TMR0_Overflow_Interrupt>:
/********************************************************************************************/



void callback_TMR0_Overflow_Interrupt (void(*Ptr_to_OVI_Function)(void)){
	Ptr_To_OVFI = Ptr_to_OVI_Function ;
    1636:	90 93 91 00 	sts	0x0091, r25
    163a:	80 93 90 00 	sts	0x0090, r24
}
    163e:	08 95       	ret

00001640 <callback_OCR0_Compare_Match_Interrupt>:

void callback_OCR0_Compare_Match_Interrupt(void(*Ptr_to_OCM_Function)(void)){
	Ptr_To_OCMI = Ptr_to_OCM_Function ;
    1640:	90 93 93 00 	sts	0x0093, r25
    1644:	80 93 92 00 	sts	0x0092, r24
}
    1648:	08 95       	ret

0000164a <__vector_10>:



ISR(TIMER0_COMP_vect){
    164a:	1f 92       	push	r1
    164c:	0f 92       	push	r0
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	0f 92       	push	r0
    1652:	11 24       	eor	r1, r1
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31
	(*Ptr_To_OCMI)();
    166c:	e0 91 92 00 	lds	r30, 0x0092
    1670:	f0 91 93 00 	lds	r31, 0x0093
    1674:	09 95       	icall
}
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	bf 91       	pop	r27
    167c:	af 91       	pop	r26
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	7f 91       	pop	r23
    1684:	6f 91       	pop	r22
    1686:	5f 91       	pop	r21
    1688:	4f 91       	pop	r20
    168a:	3f 91       	pop	r19
    168c:	2f 91       	pop	r18
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_11>:


ISR(TIMER0_OVF_vect){
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
	(*Ptr_To_OVFI)();
    16ba:	e0 91 90 00 	lds	r30, 0x0090
    16be:	f0 91 91 00 	lds	r31, 0x0091
    16c2:	09 95       	icall
}
    16c4:	ff 91       	pop	r31
    16c6:	ef 91       	pop	r30
    16c8:	bf 91       	pop	r27
    16ca:	af 91       	pop	r26
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	7f 91       	pop	r23
    16d2:	6f 91       	pop	r22
    16d4:	5f 91       	pop	r21
    16d6:	4f 91       	pop	r20
    16d8:	3f 91       	pop	r19
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <TMR2_Get_Configuration>:
/*************************************** Timer2 **********************************************/
static void (*Ptr_To_OVFI2)(void);
static void (*Ptr_To_OCMI2)(void);

void TMR2_Get_Configuration(u8 waveform , u8 TMR2_OVFI , u8 TMR2_CTCI , u8 clk_Selcet){
	TMR2_Configuration.Mode = waveform ;
    16e6:	80 93 c3 00 	sts	0x00C3, r24
	TMR2_Configuration.Prescalar = clk_Selcet;
    16ea:	20 93 c6 00 	sts	0x00C6, r18
	TMR2_Configuration.TMR2_OVF_Interrupt = TMR2_OVFI;
    16ee:	60 93 c4 00 	sts	0x00C4, r22
	TMR2_Configuration.TMR2_CTC_Interrupt = TMR2_CTCI;
    16f2:	40 93 c5 00 	sts	0x00C5, r20
}
    16f6:	08 95       	ret

000016f8 <TMR2_vInit>:

void TMR2_vInit(void){
	/*********************Adjust Mode*****************************/
	if (TMR2_Configuration.Mode==TMR2_NORMAL_Mode){
    16f8:	80 91 c3 00 	lds	r24, 0x00C3
    16fc:	88 23       	and	r24, r24
    16fe:	39 f4       	brne	.+14     	; 0x170e <TMR2_vInit+0x16>
		CLR_BIT(myTCCR2,myWGM20);
    1700:	85 b5       	in	r24, 0x25	; 37
    1702:	8f 7b       	andi	r24, 0xBF	; 191
    1704:	85 bd       	out	0x25, r24	; 37
		CLR_BIT(myTCCR2,myWGM21);
    1706:	85 b5       	in	r24, 0x25	; 37
    1708:	87 7f       	andi	r24, 0xF7	; 247
    170a:	85 bd       	out	0x25, r24	; 37
    170c:	23 c0       	rjmp	.+70     	; 0x1754 <TMR2_vInit+0x5c>
	}else if (TMR2_Configuration.Mode==TMR2_CTC_Mode){
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	39 f4       	brne	.+14     	; 0x1720 <TMR2_vInit+0x28>
		CLR_BIT(myTCCR2,myWGM20);
    1712:	85 b5       	in	r24, 0x25	; 37
    1714:	8f 7b       	andi	r24, 0xBF	; 191
    1716:	85 bd       	out	0x25, r24	; 37
		SET_BIT(myTCCR2,myWGM21);
    1718:	85 b5       	in	r24, 0x25	; 37
    171a:	88 60       	ori	r24, 0x08	; 8
    171c:	85 bd       	out	0x25, r24	; 37
    171e:	1a c0       	rjmp	.+52     	; 0x1754 <TMR2_vInit+0x5c>
	}else if (TMR2_Configuration.Mode==TMR2_OCM_Non_PWM_Mode){
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	39 f4       	brne	.+14     	; 0x1732 <TMR2_vInit+0x3a>
		CLR_BIT(myTCCR2,myWGM20);
    1724:	85 b5       	in	r24, 0x25	; 37
    1726:	8f 7b       	andi	r24, 0xBF	; 191
    1728:	85 bd       	out	0x25, r24	; 37
		SET_BIT(myTCCR2,myWGM21);
    172a:	85 b5       	in	r24, 0x25	; 37
    172c:	88 60       	ori	r24, 0x08	; 8
    172e:	85 bd       	out	0x25, r24	; 37
    1730:	11 c0       	rjmp	.+34     	; 0x1754 <TMR2_vInit+0x5c>
	}else if (TMR2_Configuration.Mode==TMR2_Fast_PWM_Mode){
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	39 f4       	brne	.+14     	; 0x1744 <TMR2_vInit+0x4c>
		SET_BIT(myTCCR2,myWGM20);
    1736:	85 b5       	in	r24, 0x25	; 37
    1738:	80 64       	ori	r24, 0x40	; 64
    173a:	85 bd       	out	0x25, r24	; 37
		SET_BIT(myTCCR2,myWGM21);
    173c:	85 b5       	in	r24, 0x25	; 37
    173e:	88 60       	ori	r24, 0x08	; 8
    1740:	85 bd       	out	0x25, r24	; 37
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <TMR2_vInit+0x5c>
	}else if (TMR2_Configuration.Mode==TMR2_Phase_Correct_PWM){
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	31 f4       	brne	.+12     	; 0x1754 <TMR2_vInit+0x5c>
		SET_BIT(myTCCR2,myWGM20);
    1748:	85 b5       	in	r24, 0x25	; 37
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	85 bd       	out	0x25, r24	; 37
		CLR_BIT(myTCCR2,myWGM21);
    174e:	85 b5       	in	r24, 0x25	; 37
    1750:	87 7f       	andi	r24, 0xF7	; 247
    1752:	85 bd       	out	0x25, r24	; 37
	}
	/****************************************************************/
	/************************Adjust prescalar************************/
	myTCCR2 |= TMR2_Configuration.Prescalar;
    1754:	95 b5       	in	r25, 0x25	; 37
    1756:	80 91 c6 00 	lds	r24, 0x00C6
    175a:	89 2b       	or	r24, r25
    175c:	85 bd       	out	0x25, r24	; 37
	/****************************************************************/
	/*************Over flow Interrupt Enable/Disable*****************/
	if (TMR2_Configuration.TMR2_OVF_Interrupt==TOIE2_enable){
    175e:	80 91 c4 00 	lds	r24, 0x00C4
    1762:	88 23       	and	r24, r24
    1764:	21 f4       	brne	.+8      	; 0x176e <TMR2_vInit+0x76>
		SET_BIT(myTIMSK,myTOIE2);
    1766:	89 b7       	in	r24, 0x39	; 57
    1768:	80 64       	ori	r24, 0x40	; 64
    176a:	89 bf       	out	0x39, r24	; 57
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <TMR2_vInit+0x80>
	}else if (TMR2_Configuration.TMR2_OVF_Interrupt==TOIE2_disable){
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	19 f4       	brne	.+6      	; 0x1778 <TMR2_vInit+0x80>
		CLR_BIT(myTIMSK,myTOIE2);
    1772:	89 b7       	in	r24, 0x39	; 57
    1774:	8f 7b       	andi	r24, 0xBF	; 191
    1776:	89 bf       	out	0x39, r24	; 57
	}
	/****************************************************************/
	/******************OCR0 Interrupt Enable/Disable*****************/
	if (TMR2_Configuration.TMR2_CTC_Interrupt==OCIE2_enable){
    1778:	80 91 c5 00 	lds	r24, 0x00C5
    177c:	88 23       	and	r24, r24
    177e:	21 f4       	brne	.+8      	; 0x1788 <TMR2_vInit+0x90>
		SET_BIT(myTIMSK,myOCIE2);
    1780:	89 b7       	in	r24, 0x39	; 57
    1782:	80 68       	ori	r24, 0x80	; 128
    1784:	89 bf       	out	0x39, r24	; 57
    1786:	08 95       	ret
	}else if (TMR2_Configuration.TMR2_CTC_Interrupt==OCIE2_disable){
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	19 f4       	brne	.+6      	; 0x1792 <TMR2_vInit+0x9a>
		CLR_BIT(myTIMSK,myOCIE2);
    178c:	89 b7       	in	r24, 0x39	; 57
    178e:	8f 77       	andi	r24, 0x7F	; 127
    1790:	89 bf       	out	0x39, r24	; 57
    1792:	08 95       	ret

00001794 <TMR2_Set_Compare_Value>:
	}
	/****************************************************************/
}

void TMR2_Set_Compare_Value(u8 u8Val){
	myOCR2 = u8Val;
    1794:	83 bd       	out	0x23, r24	; 35
}
    1796:	08 95       	ret

00001798 <TMR2_Read_count>:

u8 TMR2_Read_count(void){
	return myTCNT2;
    1798:	84 b5       	in	r24, 0x24	; 36
}
    179a:	08 95       	ret

0000179c <TMR2_Set_Counter_Value>:

void TMR2_Set_Counter_Value(u8 u8Val){
	myTCNT2 = u8Val;
    179c:	84 bd       	out	0x24, r24	; 36
}
    179e:	08 95       	ret

000017a0 <TMR2_COM_Non_PWM_Gen>:

/*************************************** Wave Generation*************************************/
/*Compare Output Mode , Non PWM mode */
void TMR2_COM_Non_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRD,7);
    17a0:	8f 9a       	sbi	0x11, 7	; 17
	val=(duty_cycle * 256) / 100;
    17a2:	38 2f       	mov	r19, r24
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	c9 01       	movw	r24, r18
    17a8:	64 e6       	ldi	r22, 0x64	; 100
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__divmodhi4>
    17b0:	86 2f       	mov	r24, r22
	TMR2_Set_Compare_Value(val);
    17b2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <TMR2_Set_Compare_Value>
	SET_BIT(myTCCR2,myCOM20);
    17b6:	85 b5       	in	r24, 0x25	; 37
    17b8:	80 61       	ori	r24, 0x10	; 16
    17ba:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(myTCCR2,myCOM21);
    17bc:	85 b5       	in	r24, 0x25	; 37
    17be:	8f 7d       	andi	r24, 0xDF	; 223
    17c0:	85 bd       	out	0x25, r24	; 37
}
    17c2:	08 95       	ret

000017c4 <TMR2_Fast_PWM_Gen>:

/*Fast PWM mode */
void TMR2_Fast_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRD,7);
    17c4:	8f 9a       	sbi	0x11, 7	; 17
	val=(duty_cycle * 256) / 100;
    17c6:	38 2f       	mov	r19, r24
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	c9 01       	movw	r24, r18
    17cc:	64 e6       	ldi	r22, 0x64	; 100
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__divmodhi4>
    17d4:	86 2f       	mov	r24, r22
	TMR2_Set_Compare_Value(val);
    17d6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <TMR2_Set_Compare_Value>
	SET_BIT(myTCCR2,myCOM20);
    17da:	85 b5       	in	r24, 0x25	; 37
    17dc:	80 61       	ori	r24, 0x10	; 16
    17de:	85 bd       	out	0x25, r24	; 37
	SET_BIT(myTCCR2,myCOM21);
    17e0:	85 b5       	in	r24, 0x25	; 37
    17e2:	80 62       	ori	r24, 0x20	; 32
    17e4:	85 bd       	out	0x25, r24	; 37
}
    17e6:	08 95       	ret

000017e8 <TMR2_Phase_Correct_PWM_Gen>:
/*Phase Correct PWM mode */
void TMR2_Phase_Correct_PWM_Gen(u8 duty_cycle){
	u8 val;
	SET_BIT(myDDRD,7);
    17e8:	8f 9a       	sbi	0x11, 7	; 17
	val=(duty_cycle * 256) / 100;
    17ea:	38 2f       	mov	r19, r24
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	c9 01       	movw	r24, r18
    17f0:	64 e6       	ldi	r22, 0x64	; 100
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__divmodhi4>
    17f8:	86 2f       	mov	r24, r22
	TMR2_Set_Compare_Value(val);
    17fa:	0e 94 ca 0b 	call	0x1794	; 0x1794 <TMR2_Set_Compare_Value>
	SET_BIT(myTCCR2,myCOM20);
    17fe:	85 b5       	in	r24, 0x25	; 37
    1800:	80 61       	ori	r24, 0x10	; 16
    1802:	85 bd       	out	0x25, r24	; 37
	SET_BIT(myTCCR2,myCOM21);
    1804:	85 b5       	in	r24, 0x25	; 37
    1806:	80 62       	ori	r24, 0x20	; 32
    1808:	85 bd       	out	0x25, r24	; 37
}
    180a:	08 95       	ret

0000180c <callback_TMR2_Overflow_Interrupt>:
/********************************************************************************************/



void callback_TMR2_Overflow_Interrupt(void(*Ptr_to_OVI_Function)(void)){
	Ptr_To_OVFI2 = Ptr_to_OVI_Function ;
    180c:	90 93 95 00 	sts	0x0095, r25
    1810:	80 93 94 00 	sts	0x0094, r24
}
    1814:	08 95       	ret

00001816 <callback_OCR2_Compare_Match_Interrupt>:

void callback_OCR2_Compare_Match_Interrupt(void(*Ptr_to_OCM_Function)(void)){
	Ptr_To_OCMI2 = Ptr_to_OCM_Function ;
    1816:	90 93 97 00 	sts	0x0097, r25
    181a:	80 93 96 00 	sts	0x0096, r24
}
    181e:	08 95       	ret

00001820 <__vector_4>:



ISR(TIMER2_COMP_vect){
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	2f 93       	push	r18
    182c:	3f 93       	push	r19
    182e:	4f 93       	push	r20
    1830:	5f 93       	push	r21
    1832:	6f 93       	push	r22
    1834:	7f 93       	push	r23
    1836:	8f 93       	push	r24
    1838:	9f 93       	push	r25
    183a:	af 93       	push	r26
    183c:	bf 93       	push	r27
    183e:	ef 93       	push	r30
    1840:	ff 93       	push	r31
	(*Ptr_To_OCMI2)();
    1842:	e0 91 96 00 	lds	r30, 0x0096
    1846:	f0 91 97 00 	lds	r31, 0x0097
    184a:	09 95       	icall
}
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <TMR1_Get_Configuration>:
/*********************************************************************************************/



/*************************************** Timer1 **********************************************/
	void TMR1_Get_Configuration(u8 waveform , u8 TMR1_OVFI , u8 TMR1_OCIE1A , u8 TMR1_OCIE1B, u8 TMR1_TICIE1 , u8 clk_Selcet){
    186e:	ef 92       	push	r14
    1870:	0f 93       	push	r16
		TMR1_Configuration.Mode = waveform;
    1872:	80 93 bd 00 	sts	0x00BD, r24
		TMR1_Configuration.TMR1_OVF_Interrupt = TMR1_OVFI;
    1876:	60 93 be 00 	sts	0x00BE, r22
		TMR1_Configuration.TMR1_OCIE1A_Interrupt = TMR1_OCIE1A;
    187a:	40 93 bf 00 	sts	0x00BF, r20
		TMR1_Configuration.TMR1_OCIE1B_Interrupt = TMR1_OCIE1B;
    187e:	20 93 c0 00 	sts	0x00C0, r18
		TMR1_Configuration.TMR1_TICIE1_Interrupt = TMR1_TICIE1;
    1882:	00 93 c1 00 	sts	0x00C1, r16
		TMR1_Configuration.Prescalar = clk_Selcet ;	
    1886:	e0 92 c2 00 	sts	0x00C2, r14
	}
    188a:	0f 91       	pop	r16
    188c:	ef 90       	pop	r14
    188e:	08 95       	ret

00001890 <TMR1_vInit>:
	
	void TMR1_vInit(void){
		/*********************Adjust Mode*****************************/
			if (TMR1_Configuration.Mode == TMR1_Normal_Mode){
    1890:	80 91 bd 00 	lds	r24, 0x00BD
    1894:	88 23       	and	r24, r24
    1896:	69 f4       	brne	.+26     	; 0x18b2 <TMR1_vInit+0x22>
				CLR_BIT(myTCCR1A,myWGM10);
    1898:	8f b5       	in	r24, 0x2f	; 47
    189a:	8e 7f       	andi	r24, 0xFE	; 254
    189c:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    189e:	8f b5       	in	r24, 0x2f	; 47
    18a0:	8d 7f       	andi	r24, 0xFD	; 253
    18a2:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    18a4:	8e b5       	in	r24, 0x2e	; 46
    18a6:	87 7f       	andi	r24, 0xF7	; 247
    18a8:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    18aa:	8e b5       	in	r24, 0x2e	; 46
    18ac:	8f 7e       	andi	r24, 0xEF	; 239
    18ae:	8e bd       	out	0x2e, r24	; 46
    18b0:	d1 c0       	rjmp	.+418    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PC_8bit){
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	69 f4       	brne	.+26     	; 0x18d0 <TMR1_vInit+0x40>
				SET_BIT(myTCCR1A,myWGM10);
    18b6:	8f b5       	in	r24, 0x2f	; 47
    18b8:	81 60       	ori	r24, 0x01	; 1
    18ba:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    18bc:	8f b5       	in	r24, 0x2f	; 47
    18be:	8d 7f       	andi	r24, 0xFD	; 253
    18c0:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    18c2:	8e b5       	in	r24, 0x2e	; 46
    18c4:	87 7f       	andi	r24, 0xF7	; 247
    18c6:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    18c8:	8e b5       	in	r24, 0x2e	; 46
    18ca:	8f 7e       	andi	r24, 0xEF	; 239
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	c2 c0       	rjmp	.+388    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PC_9bit){
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	69 f4       	brne	.+26     	; 0x18ee <TMR1_vInit+0x5e>
				CLR_BIT(myTCCR1A,myWGM10);
    18d4:	8f b5       	in	r24, 0x2f	; 47
    18d6:	8e 7f       	andi	r24, 0xFE	; 254
    18d8:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    18da:	8f b5       	in	r24, 0x2f	; 47
    18dc:	82 60       	ori	r24, 0x02	; 2
    18de:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    18e0:	8e b5       	in	r24, 0x2e	; 46
    18e2:	87 7f       	andi	r24, 0xF7	; 247
    18e4:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    18e6:	8e b5       	in	r24, 0x2e	; 46
    18e8:	8f 7e       	andi	r24, 0xEF	; 239
    18ea:	8e bd       	out	0x2e, r24	; 46
    18ec:	b3 c0       	rjmp	.+358    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PC_10bit){
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	69 f4       	brne	.+26     	; 0x190c <TMR1_vInit+0x7c>
				SET_BIT(myTCCR1A,myWGM10);
    18f2:	8f b5       	in	r24, 0x2f	; 47
    18f4:	81 60       	ori	r24, 0x01	; 1
    18f6:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    18f8:	8f b5       	in	r24, 0x2f	; 47
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    18fe:	8e b5       	in	r24, 0x2e	; 46
    1900:	87 7f       	andi	r24, 0xF7	; 247
    1902:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    1904:	8e b5       	in	r24, 0x2e	; 46
    1906:	8f 7e       	andi	r24, 0xEF	; 239
    1908:	8e bd       	out	0x2e, r24	; 46
    190a:	a4 c0       	rjmp	.+328    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_CTC_OCR1A_Mode){
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	69 f4       	brne	.+26     	; 0x192a <TMR1_vInit+0x9a>
				CLR_BIT(myTCCR1A,myWGM10);
    1910:	8f b5       	in	r24, 0x2f	; 47
    1912:	8e 7f       	andi	r24, 0xFE	; 254
    1914:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    1916:	8f b5       	in	r24, 0x2f	; 47
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    191c:	8e b5       	in	r24, 0x2e	; 46
    191e:	88 60       	ori	r24, 0x08	; 8
    1920:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    1922:	8e b5       	in	r24, 0x2e	; 46
    1924:	8f 7e       	andi	r24, 0xEF	; 239
    1926:	8e bd       	out	0x2e, r24	; 46
    1928:	95 c0       	rjmp	.+298    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_Fast_PWM_8bit){
    192a:	85 30       	cpi	r24, 0x05	; 5
    192c:	69 f4       	brne	.+26     	; 0x1948 <TMR1_vInit+0xb8>
				SET_BIT(myTCCR1A,myWGM10);
    192e:	8f b5       	in	r24, 0x2f	; 47
    1930:	81 60       	ori	r24, 0x01	; 1
    1932:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    1934:	8f b5       	in	r24, 0x2f	; 47
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    193a:	8e b5       	in	r24, 0x2e	; 46
    193c:	88 60       	ori	r24, 0x08	; 8
    193e:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    1940:	8e b5       	in	r24, 0x2e	; 46
    1942:	8f 7e       	andi	r24, 0xEF	; 239
    1944:	8e bd       	out	0x2e, r24	; 46
    1946:	86 c0       	rjmp	.+268    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_Fast_PWM_9bit){
    1948:	86 30       	cpi	r24, 0x06	; 6
    194a:	69 f4       	brne	.+26     	; 0x1966 <TMR1_vInit+0xd6>
				CLR_BIT(myTCCR1A,myWGM10);
    194c:	8f b5       	in	r24, 0x2f	; 47
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    1952:	8f b5       	in	r24, 0x2f	; 47
    1954:	82 60       	ori	r24, 0x02	; 2
    1956:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    1958:	8e b5       	in	r24, 0x2e	; 46
    195a:	88 60       	ori	r24, 0x08	; 8
    195c:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    195e:	8e b5       	in	r24, 0x2e	; 46
    1960:	8f 7e       	andi	r24, 0xEF	; 239
    1962:	8e bd       	out	0x2e, r24	; 46
    1964:	77 c0       	rjmp	.+238    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_Fast_PWM_10bit){
    1966:	87 30       	cpi	r24, 0x07	; 7
    1968:	69 f4       	brne	.+26     	; 0x1984 <TMR1_vInit+0xf4>
				SET_BIT(myTCCR1A,myWGM10);
    196a:	8f b5       	in	r24, 0x2f	; 47
    196c:	81 60       	ori	r24, 0x01	; 1
    196e:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    1970:	8f b5       	in	r24, 0x2f	; 47
    1972:	82 60       	ori	r24, 0x02	; 2
    1974:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    1976:	8e b5       	in	r24, 0x2e	; 46
    1978:	88 60       	ori	r24, 0x08	; 8
    197a:	8e bd       	out	0x2e, r24	; 46
				CLR_BIT(myTCCR1B,myWGM13);
    197c:	8e b5       	in	r24, 0x2e	; 46
    197e:	8f 7e       	andi	r24, 0xEF	; 239
    1980:	8e bd       	out	0x2e, r24	; 46
    1982:	68 c0       	rjmp	.+208    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PFC_ICR1){
    1984:	88 30       	cpi	r24, 0x08	; 8
    1986:	69 f4       	brne	.+26     	; 0x19a2 <TMR1_vInit+0x112>
				CLR_BIT(myTCCR1A,myWGM10);
    1988:	8f b5       	in	r24, 0x2f	; 47
    198a:	8e 7f       	andi	r24, 0xFE	; 254
    198c:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    198e:	8f b5       	in	r24, 0x2f	; 47
    1990:	8d 7f       	andi	r24, 0xFD	; 253
    1992:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    1994:	8e b5       	in	r24, 0x2e	; 46
    1996:	87 7f       	andi	r24, 0xF7	; 247
    1998:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);
    199a:	8e b5       	in	r24, 0x2e	; 46
    199c:	80 61       	ori	r24, 0x10	; 16
    199e:	8e bd       	out	0x2e, r24	; 46
    19a0:	59 c0       	rjmp	.+178    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PFC_OCR1A){
    19a2:	89 30       	cpi	r24, 0x09	; 9
    19a4:	69 f4       	brne	.+26     	; 0x19c0 <TMR1_vInit+0x130>
				SET_BIT(myTCCR1A,myWGM10);
    19a6:	8f b5       	in	r24, 0x2f	; 47
    19a8:	81 60       	ori	r24, 0x01	; 1
    19aa:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    19ac:	8f b5       	in	r24, 0x2f	; 47
    19ae:	8d 7f       	andi	r24, 0xFD	; 253
    19b0:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    19b2:	8e b5       	in	r24, 0x2e	; 46
    19b4:	87 7f       	andi	r24, 0xF7	; 247
    19b6:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);
    19b8:	8e b5       	in	r24, 0x2e	; 46
    19ba:	80 61       	ori	r24, 0x10	; 16
    19bc:	8e bd       	out	0x2e, r24	; 46
    19be:	4a c0       	rjmp	.+148    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PC_ICR1){
    19c0:	8a 30       	cpi	r24, 0x0A	; 10
    19c2:	69 f4       	brne	.+26     	; 0x19de <TMR1_vInit+0x14e>
				CLR_BIT(myTCCR1A,myWGM10);
    19c4:	8f b5       	in	r24, 0x2f	; 47
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    19ca:	8f b5       	in	r24, 0x2f	; 47
    19cc:	82 60       	ori	r24, 0x02	; 2
    19ce:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    19d0:	8e b5       	in	r24, 0x2e	; 46
    19d2:	87 7f       	andi	r24, 0xF7	; 247
    19d4:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);
    19d6:	8e b5       	in	r24, 0x2e	; 46
    19d8:	80 61       	ori	r24, 0x10	; 16
    19da:	8e bd       	out	0x2e, r24	; 46
    19dc:	3b c0       	rjmp	.+118    	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_PWM_PC_OCR1A){
    19de:	8b 30       	cpi	r24, 0x0B	; 11
    19e0:	69 f4       	brne	.+26     	; 0x19fc <TMR1_vInit+0x16c>
				SET_BIT(myTCCR1A,myWGM10);
    19e2:	8f b5       	in	r24, 0x2f	; 47
    19e4:	81 60       	ori	r24, 0x01	; 1
    19e6:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    19e8:	8f b5       	in	r24, 0x2f	; 47
    19ea:	82 60       	ori	r24, 0x02	; 2
    19ec:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1B,myWGM12);
    19ee:	8e b5       	in	r24, 0x2e	; 46
    19f0:	87 7f       	andi	r24, 0xF7	; 247
    19f2:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);
    19f4:	8e b5       	in	r24, 0x2e	; 46
    19f6:	80 61       	ori	r24, 0x10	; 16
    19f8:	8e bd       	out	0x2e, r24	; 46
    19fa:	2c c0       	rjmp	.+88     	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_CTC_ICR1_Mode){
    19fc:	8c 30       	cpi	r24, 0x0C	; 12
    19fe:	69 f4       	brne	.+26     	; 0x1a1a <TMR1_vInit+0x18a>
				CLR_BIT(myTCCR1A,myWGM10);
    1a00:	8f b5       	in	r24, 0x2f	; 47
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(myTCCR1A,myWGM11);
    1a06:	8f b5       	in	r24, 0x2f	; 47
    1a08:	8d 7f       	andi	r24, 0xFD	; 253
    1a0a:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    1a0c:	8e b5       	in	r24, 0x2e	; 46
    1a0e:	88 60       	ori	r24, 0x08	; 8
    1a10:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);
    1a12:	8e b5       	in	r24, 0x2e	; 46
    1a14:	80 61       	ori	r24, 0x10	; 16
    1a16:	8e bd       	out	0x2e, r24	; 46
    1a18:	1d c0       	rjmp	.+58     	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_Fast_PWM_ICR1){	
    1a1a:	8d 30       	cpi	r24, 0x0D	; 13
    1a1c:	69 f4       	brne	.+26     	; 0x1a38 <TMR1_vInit+0x1a8>
				CLR_BIT(myTCCR1A,myWGM10);
    1a1e:	8f b5       	in	r24, 0x2f	; 47
    1a20:	8e 7f       	andi	r24, 0xFE	; 254
    1a22:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    1a24:	8f b5       	in	r24, 0x2f	; 47
    1a26:	82 60       	ori	r24, 0x02	; 2
    1a28:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    1a2a:	8e b5       	in	r24, 0x2e	; 46
    1a2c:	88 60       	ori	r24, 0x08	; 8
    1a2e:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);					
    1a30:	8e b5       	in	r24, 0x2e	; 46
    1a32:	80 61       	ori	r24, 0x10	; 16
    1a34:	8e bd       	out	0x2e, r24	; 46
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <TMR1_vInit+0x1c4>
			}else if (TMR1_Configuration.Mode == TMR1_Fast_PWM_OCR1A){
    1a38:	8e 30       	cpi	r24, 0x0E	; 14
    1a3a:	61 f4       	brne	.+24     	; 0x1a54 <TMR1_vInit+0x1c4>
				SET_BIT(myTCCR1A,myWGM10);
    1a3c:	8f b5       	in	r24, 0x2f	; 47
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1A,myWGM11);
    1a42:	8f b5       	in	r24, 0x2f	; 47
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(myTCCR1B,myWGM12);
    1a48:	8e b5       	in	r24, 0x2e	; 46
    1a4a:	88 60       	ori	r24, 0x08	; 8
    1a4c:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(myTCCR1B,myWGM13);
    1a4e:	8e b5       	in	r24, 0x2e	; 46
    1a50:	80 61       	ori	r24, 0x10	; 16
    1a52:	8e bd       	out	0x2e, r24	; 46
			}
			
		/****************************************************************/
		/************************Adjust prescalar************************/
			myTCCR1B |= TMR1_Configuration.Prescalar;
    1a54:	9e b5       	in	r25, 0x2e	; 46
    1a56:	80 91 c2 00 	lds	r24, 0x00C2
    1a5a:	89 2b       	or	r24, r25
    1a5c:	8e bd       	out	0x2e, r24	; 46
		/****************************************************************/
		/*************Over flow Interrupt Enable/Disable*****************/
			if (TMR1_Configuration.TMR1_OVF_Interrupt==TOIE1_enable){
    1a5e:	80 91 be 00 	lds	r24, 0x00BE
    1a62:	88 23       	and	r24, r24
    1a64:	21 f4       	brne	.+8      	; 0x1a6e <TMR1_vInit+0x1de>
				SET_BIT(myTIMSK,myTOIE1);
    1a66:	89 b7       	in	r24, 0x39	; 57
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	89 bf       	out	0x39, r24	; 57
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <TMR1_vInit+0x1e8>
			}else if (TMR1_Configuration.TMR1_OVF_Interrupt==TOIE1_disable){
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	19 f4       	brne	.+6      	; 0x1a78 <TMR1_vInit+0x1e8>
				CLR_BIT(myTIMSK,myTOIE1);
    1a72:	89 b7       	in	r24, 0x39	; 57
    1a74:	8b 7f       	andi	r24, 0xFB	; 251
    1a76:	89 bf       	out	0x39, r24	; 57
			}
		/****************************************************************/
		/******************OCR1 Interrupt Enable/Disable*****************/
			if (TMR1_Configuration.TMR1_OCIE1A_Interrupt==OCIE1A_enable){
    1a78:	80 91 bf 00 	lds	r24, 0x00BF
    1a7c:	88 23       	and	r24, r24
    1a7e:	21 f4       	brne	.+8      	; 0x1a88 <TMR1_vInit+0x1f8>
				SET_BIT(myTIMSK,myOCIE1A);
    1a80:	89 b7       	in	r24, 0x39	; 57
    1a82:	80 61       	ori	r24, 0x10	; 16
    1a84:	89 bf       	out	0x39, r24	; 57
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <TMR1_vInit+0x202>
			}else if (TMR1_Configuration.TMR1_OCIE1A_Interrupt==OCIE1A_disable){
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <TMR1_vInit+0x202>
				CLR_BIT(myTIMSK,myOCIE1A);
    1a8c:	89 b7       	in	r24, 0x39	; 57
    1a8e:	8f 7e       	andi	r24, 0xEF	; 239
    1a90:	89 bf       	out	0x39, r24	; 57
			}
			if (TMR1_Configuration.TMR1_OCIE1B_Interrupt==OCIE1B_enable){
    1a92:	80 91 c0 00 	lds	r24, 0x00C0
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <TMR1_vInit+0x212>
				SET_BIT(myTIMSK,myOCIE1B);
    1a9a:	89 b7       	in	r24, 0x39	; 57
    1a9c:	88 60       	ori	r24, 0x08	; 8
    1a9e:	89 bf       	out	0x39, r24	; 57
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <TMR1_vInit+0x21c>
			}else if (TMR1_Configuration.TMR1_OCIE1B_Interrupt==OCIE1B_disable){
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	19 f4       	brne	.+6      	; 0x1aac <TMR1_vInit+0x21c>
				CLR_BIT(myTIMSK,myOCIE1B);
    1aa6:	89 b7       	in	r24, 0x39	; 57
    1aa8:	87 7f       	andi	r24, 0xF7	; 247
    1aaa:	89 bf       	out	0x39, r24	; 57
			}
		/****************************************************************/
		/******************ICF1 Interrupt Enable/Disable*****************/
			if (TMR1_Configuration.TMR1_TICIE1_Interrupt==TICIE1_enable){
    1aac:	80 91 c1 00 	lds	r24, 0x00C1
    1ab0:	88 23       	and	r24, r24
    1ab2:	21 f4       	brne	.+8      	; 0x1abc <TMR1_vInit+0x22c>
				SET_BIT(myTIMSK,myTICIE1);
    1ab4:	89 b7       	in	r24, 0x39	; 57
    1ab6:	80 62       	ori	r24, 0x20	; 32
    1ab8:	89 bf       	out	0x39, r24	; 57
    1aba:	08 95       	ret
			}else if (TMR1_Configuration.TMR1_TICIE1_Interrupt==TICIE1_disable){
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	19 f4       	brne	.+6      	; 0x1ac6 <TMR1_vInit+0x236>
				CLR_BIT(myTIMSK,myTICIE1);
    1ac0:	89 b7       	in	r24, 0x39	; 57
    1ac2:	8f 7d       	andi	r24, 0xDF	; 223
    1ac4:	89 bf       	out	0x39, r24	; 57
    1ac6:	08 95       	ret

00001ac8 <TMR1_Set_Compare_Value>:
		/****************************************************************/							
	}
	
	
	void TMR1_Set_Compare_Value(u16 u8Val){
		myOCR1AL = (u8)u8Val;
    1ac8:	8a bd       	out	0x2a, r24	; 42
		myOCR1AH |=(u8Val<<8);
    1aca:	8b b5       	in	r24, 0x2b	; 43
    1acc:	8b bd       	out	0x2b, r24	; 43
	}
    1ace:	08 95       	ret

00001ad0 <TMR1_Read_count>:
	
	u16 TMR1_Read_count(void){
		u8 temp1 , temp2 ;
		u16 Result;
		temp1 = myTCNT1L;
    1ad0:	8c b5       	in	r24, 0x2c	; 44
		temp2 = myTCNT1H;
    1ad2:	9d b5       	in	r25, 0x2d	; 45
		Result = temp1 | (temp2<<8);
    1ad4:	39 2f       	mov	r19, r25
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	82 2b       	or	r24, r18
    1adc:	93 2b       	or	r25, r19
		return Result;
	}
    1ade:	08 95       	ret

00001ae0 <TMR1_Set_Input_capture_reg>:
	
	void TMR1_Set_Input_capture_reg(u16 val){
		ICR1 = val;
    1ae0:	97 bd       	out	0x27, r25	; 39
    1ae2:	86 bd       	out	0x26, r24	; 38
	}
    1ae4:	08 95       	ret

00001ae6 <TMR1_Fast_PWM_Gen>:
	void TMR1_Fast_PWM_Gen(f64 val){
		/* set OC1A as output pin */
		SET_BIT(DDRD,5);
    1ae6:	8d 9a       	sbi	0x11, 5	; 17
		/* select fast PWM mode*/
		SET_BIT(TCCR1A,WGM11);
    1ae8:	2f b5       	in	r18, 0x2f	; 47
    1aea:	22 60       	ori	r18, 0x02	; 2
    1aec:	2f bd       	out	0x2f, r18	; 47
		SET_BIT(TCCR1B,WGM12);
    1aee:	2e b5       	in	r18, 0x2e	; 46
    1af0:	28 60       	ori	r18, 0x08	; 8
    1af2:	2e bd       	out	0x2e, r18	; 46
		SET_BIT(TCCR1B,WGM13);
    1af4:	2e b5       	in	r18, 0x2e	; 46
    1af6:	20 61       	ori	r18, 0x10	; 16
    1af8:	2e bd       	out	0x2e, r18	; 46
		/* load a value in OCR1A,ICR1 */
		OCR1A=val*1000;
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1b06:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9b bd       	out	0x2b, r25	; 43
    1b10:	8a bd       	out	0x2a, r24	; 42
		ICR1=19999;
    1b12:	8f e1       	ldi	r24, 0x1F	; 31
    1b14:	9e e4       	ldi	r25, 0x4E	; 78
    1b16:	97 bd       	out	0x27, r25	; 39
    1b18:	86 bd       	out	0x26, r24	; 38
		/* select timer clock, no prescaling */ 
		SET_BIT(TCCR1B,CS10);
    1b1a:	8e b5       	in	r24, 0x2e	; 46
    1b1c:	81 60       	ori	r24, 0x01	; 1
    1b1e:	8e bd       	out	0x2e, r24	; 46
		/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
		SET_BIT(TCCR1A,COM1A1);
    1b20:	8f b5       	in	r24, 0x2f	; 47
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	8f bd       	out	0x2f, r24	; 47
	}
    1b26:	08 95       	ret

00001b28 <TMU_Init>:
static Str_TMU_OBJ * TMU_Internal_Buffer[Max_Timer_Number];
static u8 TMU_Internal_Buffer_Counter =0;
static u16 TMU_Res_MS = 0;
static u8 TMU_initalization = E_False;

TMU_ErrorTypes TMU_Init(u8 Timer_Channel , u16 Resolution){
    1b28:	e9 e9       	ldi	r30, 0x99	; 153
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	cf 01       	movw	r24, r30
    1b2e:	44 96       	adiw	r24, 0x14	; 20
	u8 i;
	
	for (i=0; i < Max_Timer_Number ; i++){
		TMU_Internal_Buffer[i]= NULL;
    1b30:	11 92       	st	Z+, r1
    1b32:	11 92       	st	Z+, r1
static u8 TMU_initalization = E_False;

TMU_ErrorTypes TMU_Init(u8 Timer_Channel , u16 Resolution){
	u8 i;
	
	for (i=0; i < Max_Timer_Number ; i++){
    1b34:	e8 17       	cp	r30, r24
    1b36:	f9 07       	cpc	r31, r25
    1b38:	d9 f7       	brne	.-10     	; 0x1b30 <TMU_Init+0x8>
		TMU_Internal_Buffer[i]= NULL;
	}
	
	TMU_ErrorTypes s_ret_val =NO_ERRORS ;
	TMU_Res_MS = Resolution * TMU_Resolution; 
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	68 0f       	add	r22, r24
    1b46:	79 1f       	adc	r23, r25
    1b48:	70 93 ae 00 	sts	0x00AE, r23
    1b4c:	60 93 ad 00 	sts	0x00AD, r22
	TMU_initalization = E_True;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 af 00 	sts	0x00AF, r24
	

	
	return s_ret_val;
}
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret

00001b5a <TMU_Start_Timer>:

TMU_ErrorTypes TMU_Start_Timer(Str_TMU_OBJ *OBJ , u8 Type , u16 delay ,void (*CB_func)(void)){
    1b5a:	cf 93       	push	r28
	cli();
    1b5c:	f8 94       	cli
	TMU_ErrorTypes S_ret_val = NO_ERRORS;
	if (TMU_initalization=E_True){
    1b5e:	71 e0       	ldi	r23, 0x01	; 1
    1b60:	70 93 af 00 	sts	0x00AF, r23
		if (TMU_Internal_Buffer_Counter < Max_Timer_Number){
    1b64:	70 91 b0 00 	lds	r23, 0x00B0
    1b68:	7a 30       	cpi	r23, 0x0A	; 10
    1b6a:	00 f5       	brcc	.+64     	; 0x1bac <TMU_Start_Timer+0x52>
			if ((OBJ!=NULL)&&((Type == Periodic)||(Type == One_Shot)) && (delay !=0)&&(CB_func != NULL)){
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	01 f1       	breq	.+64     	; 0x1bb0 <TMU_Start_Timer+0x56>
    1b70:	62 30       	cpi	r22, 0x02	; 2
    1b72:	00 f5       	brcc	.+64     	; 0x1bb4 <TMU_Start_Timer+0x5a>
    1b74:	41 15       	cp	r20, r1
    1b76:	51 05       	cpc	r21, r1
    1b78:	f9 f0       	breq	.+62     	; 0x1bb8 <TMU_Start_Timer+0x5e>
    1b7a:	21 15       	cp	r18, r1
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	f1 f0       	breq	.+60     	; 0x1bbc <TMU_Start_Timer+0x62>
				OBJ ->ptr_Delaycompletefun_User_CBK = CB_func;
    1b80:	fc 01       	movw	r30, r24
    1b82:	31 83       	std	Z+1, r19	; 0x01
    1b84:	20 83       	st	Z, r18
				OBJ ->Delay = delay;
    1b86:	53 83       	std	Z+3, r21	; 0x03
    1b88:	42 83       	std	Z+2, r20	; 0x02
				OBJ ->Periodicity = Type;
    1b8a:	64 83       	std	Z+4, r22	; 0x04
				OBJ ->Remaining_Time = delay;
    1b8c:	56 83       	std	Z+6, r21	; 0x06
    1b8e:	45 83       	std	Z+5, r20	; 0x05
				OBJ ->index = TMU_Internal_Buffer_Counter;
    1b90:	77 83       	std	Z+7, r23	; 0x07
				TMU_Internal_Buffer[TMU_Internal_Buffer_Counter]=OBJ;
    1b92:	e7 2f       	mov	r30, r23
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	e7 56       	subi	r30, 0x67	; 103
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
				TMU_Internal_Buffer_Counter++;
    1ba2:	7f 5f       	subi	r23, 0xFF	; 255
    1ba4:	70 93 b0 00 	sts	0x00B0, r23
	return s_ret_val;
}

TMU_ErrorTypes TMU_Start_Timer(Str_TMU_OBJ *OBJ , u8 Type , u16 delay ,void (*CB_func)(void)){
	cli();
	TMU_ErrorTypes S_ret_val = NO_ERRORS;
    1ba8:	c0 e0       	ldi	r28, 0x00	; 0
				OBJ ->Delay = delay;
				OBJ ->Periodicity = Type;
				OBJ ->Remaining_Time = delay;
				OBJ ->index = TMU_Internal_Buffer_Counter;
				TMU_Internal_Buffer[TMU_Internal_Buffer_Counter]=OBJ;
				TMU_Internal_Buffer_Counter++;
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <TMU_Start_Timer+0x64>
			}else{
				S_ret_val = INVALID_PARAMS;
			}
			
		}else{
			S_ret_val = MAX_NO_REACHED;
    1bac:	c3 e0       	ldi	r28, 0x03	; 3
    1bae:	07 c0       	rjmp	.+14     	; 0x1bbe <TMU_Start_Timer+0x64>
				OBJ ->Remaining_Time = delay;
				OBJ ->index = TMU_Internal_Buffer_Counter;
				TMU_Internal_Buffer[TMU_Internal_Buffer_Counter]=OBJ;
				TMU_Internal_Buffer_Counter++;
			}else{
				S_ret_val = INVALID_PARAMS;
    1bb0:	c2 e0       	ldi	r28, 0x02	; 2
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <TMU_Start_Timer+0x64>
    1bb4:	c2 e0       	ldi	r28, 0x02	; 2
    1bb6:	03 c0       	rjmp	.+6      	; 0x1bbe <TMU_Start_Timer+0x64>
    1bb8:	c2 e0       	ldi	r28, 0x02	; 2
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <TMU_Start_Timer+0x64>
    1bbc:	c2 e0       	ldi	r28, 0x02	; 2
		}
	}else{
		S_ret_val = TIMER_NOT_INITIATED;
	}
	
	TMR2_Get_Configuration(NORMAL_Mode,TOIE2_enable,OCIE2_disable,NO_PRESCALING);
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TMR2_Get_Configuration>
	TMR2_Set_Counter_Value(55); 
    1bca:	87 e3       	ldi	r24, 0x37	; 55
    1bcc:	0e 94 ce 0b 	call	0x179c	; 0x179c <TMR2_Set_Counter_Value>
	SET_BIT(myTIFR,myTOV2);
    1bd0:	88 b7       	in	r24, 0x38	; 56
    1bd2:	80 64       	ori	r24, 0x40	; 64
    1bd4:	88 bf       	out	0x38, r24	; 56
	sei();
    1bd6:	78 94       	sei
	return S_ret_val;
	
}
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <TMU_Stop_Timer>:

TMU_ErrorTypes TMU_Stop_Timer(Str_TMU_OBJ *OBJ){
    1bde:	fc 01       	movw	r30, r24
	cli();
    1be0:	f8 94       	cli
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		if (OBJ != NULL){
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	c9 f0       	breq	.+50     	; 0x1c18 <TMU_Stop_Timer+0x3a>
			OBJ->ptr_Delaycompletefun_User_CBK = NULL;
    1be6:	11 82       	std	Z+1, r1	; 0x01
    1be8:	10 82       	st	Z, r1
			OBJ->Delay = 0;
    1bea:	13 82       	std	Z+3, r1	; 0x03
    1bec:	12 82       	std	Z+2, r1	; 0x02
			OBJ->Remaining_Time=0;
    1bee:	16 82       	std	Z+6, r1	; 0x06
    1bf0:	15 82       	std	Z+5, r1	; 0x05
			OBJ->Periodicity = INVALID_TYPE;
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	84 83       	std	Z+4, r24	; 0x04
			TMU_Internal_Buffer[OBJ->index]=NULL;
    1bf6:	a7 81       	ldd	r26, Z+7	; 0x07
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	aa 0f       	add	r26, r26
    1bfc:	bb 1f       	adc	r27, r27
    1bfe:	a7 56       	subi	r26, 0x67	; 103
    1c00:	bf 4f       	sbci	r27, 0xFF	; 255
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	1c 92       	st	X, r1
    1c06:	1e 92       	st	-X, r1
			OBJ->index=0;
    1c08:	17 82       	std	Z+7, r1	; 0x07
			TMU_Internal_Buffer_Counter--;
    1c0a:	80 91 b0 00 	lds	r24, 0x00B0
    1c0e:	81 50       	subi	r24, 0x01	; 1
    1c10:	80 93 b0 00 	sts	0x00B0, r24
	
}

TMU_ErrorTypes TMU_Stop_Timer(Str_TMU_OBJ *OBJ){
	cli();
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <TMU_Stop_Timer+0x3c>
			OBJ->Periodicity = INVALID_TYPE;
			TMU_Internal_Buffer[OBJ->index]=NULL;
			OBJ->index=0;
			TMU_Internal_Buffer_Counter--;
		}else{
			S_ret_val =INVALID_PARAMS;
    1c18:	82 e0       	ldi	r24, 0x02	; 2
		}			
	sei();
    1c1a:	78 94       	sei
	return S_ret_val;
}
    1c1c:	08 95       	ret

00001c1e <TMU_dispatch>:

TMU_ErrorTypes TMU_dispatch(void){
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
	cli();
    1c2a:	f8 94       	cli
		u8 i=0;
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		if(TMU_initalization==E_True){
    1c2c:	80 91 af 00 	lds	r24, 0x00AF
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	71 f5       	brne	.+92     	; 0x1c90 <TMU_dispatch+0x72>
    1c34:	c9 e9       	ldi	r28, 0x99	; 153
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
		}			
	sei();
	return S_ret_val;
}

TMU_ErrorTypes TMU_dispatch(void){
    1c38:	0f 2e       	mov	r0, r31
    1c3a:	f4 e1       	ldi	r31, 0x14	; 20
    1c3c:	ef 2e       	mov	r14, r31
    1c3e:	ff 24       	eor	r15, r15
    1c40:	f0 2d       	mov	r31, r0
    1c42:	ec 0e       	add	r14, r28
    1c44:	fd 1e       	adc	r15, r29
	cli();
		u8 i=0;
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		if(TMU_initalization==E_True){
			for(i=0;i<Max_Timer_Number;i++){
				if(TMU_Internal_Buffer[i]!=NULL){
    1c46:	e8 81       	ld	r30, Y
    1c48:	f9 81       	ldd	r31, Y+1	; 0x01
    1c4a:	30 97       	sbiw	r30, 0x00	; 0
    1c4c:	d9 f0       	breq	.+54     	; 0x1c84 <TMU_dispatch+0x66>
					if (TMU_Internal_Buffer[i]->Remaining_Time <= 0){
    1c4e:	85 81       	ldd	r24, Z+5	; 0x05
    1c50:	96 81       	ldd	r25, Z+6	; 0x06
    1c52:	18 16       	cp	r1, r24
    1c54:	19 06       	cpc	r1, r25
    1c56:	b4 f0       	brlt	.+44     	; 0x1c84 <TMU_dispatch+0x66>
						TMU_Internal_Buffer[i]->ptr_Delaycompletefun_User_CBK();
    1c58:	01 90       	ld	r0, Z+
    1c5a:	f0 81       	ld	r31, Z
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	09 95       	icall
						TMU_Internal_Buffer[i]->Remaining_Time += TMU_Internal_Buffer[i]->Delay ;
    1c60:	e8 81       	ld	r30, Y
    1c62:	f9 81       	ldd	r31, Y+1	; 0x01
    1c64:	85 81       	ldd	r24, Z+5	; 0x05
    1c66:	96 81       	ldd	r25, Z+6	; 0x06
    1c68:	22 81       	ldd	r18, Z+2	; 0x02
    1c6a:	33 81       	ldd	r19, Z+3	; 0x03
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	96 83       	std	Z+6, r25	; 0x06
    1c72:	85 83       	std	Z+5, r24	; 0x05
						if (TMU_Internal_Buffer[i]->Periodicity==One_Shot){
    1c74:	e8 81       	ld	r30, Y
    1c76:	f9 81       	ldd	r31, Y+1	; 0x01
    1c78:	84 81       	ldd	r24, Z+4	; 0x04
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	19 f4       	brne	.+6      	; 0x1c84 <TMU_dispatch+0x66>
							TMU_Stop_Timer(TMU_Internal_Buffer[i]);
    1c7e:	cf 01       	movw	r24, r30
    1c80:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <TMU_Stop_Timer>
    1c84:	22 96       	adiw	r28, 0x02	; 2
TMU_ErrorTypes TMU_dispatch(void){
	cli();
		u8 i=0;
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		if(TMU_initalization==E_True){
			for(i=0;i<Max_Timer_Number;i++){
    1c86:	ce 15       	cp	r28, r14
    1c88:	df 05       	cpc	r29, r15
    1c8a:	e9 f6       	brne	.-70     	; 0x1c46 <TMU_dispatch+0x28>
}

TMU_ErrorTypes TMU_dispatch(void){
	cli();
		u8 i=0;
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <TMU_dispatch+0x74>
					}
						
				}
			}
		}else{
			S_ret_val = TIMER_NOT_INITIATED;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
		}
	sei();
    1c92:	78 94       	sei
	return S_ret_val;	
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	08 95       	ret

00001ca2 <TMU_DeInit>:

TMU_ErrorTypes TMU_DeInit(void){
	cli();
    1ca2:	f8 94       	cli
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		myTCCR2=0;
    1ca4:	15 bc       	out	0x25, r1	; 37
    1ca6:	e9 e9       	ldi	r30, 0x99	; 153
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
		}
	sei();
	return S_ret_val;	
}

TMU_ErrorTypes TMU_DeInit(void){
    1caa:	cf 01       	movw	r24, r30
    1cac:	44 96       	adiw	r24, 0x14	; 20
	cli();
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		myTCCR2=0;
		u8 i;
		for	(i=0; i < Max_Timer_Number;i++){
			TMU_Internal_Buffer[i]=NULL;
    1cae:	11 92       	st	Z+, r1
    1cb0:	11 92       	st	Z+, r1
TMU_ErrorTypes TMU_DeInit(void){
	cli();
		TMU_ErrorTypes S_ret_val = NO_ERRORS;
		myTCCR2=0;
		u8 i;
		for	(i=0; i < Max_Timer_Number;i++){
    1cb2:	e8 17       	cp	r30, r24
    1cb4:	f9 07       	cpc	r31, r25
    1cb6:	d9 f7       	brne	.-10     	; 0x1cae <TMU_DeInit+0xc>
			TMU_Internal_Buffer[i]=NULL;
		}			
	sei();
    1cb8:	78 94       	sei
	return S_ret_val;
}
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	08 95       	ret

00001cbe <__vector_5>:

u8 Counter = 0 ;
ISR(TIMER2_OVF_vect){
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
	u8 i;
	Counter ++;
    1ce0:	40 91 98 00 	lds	r20, 0x0098
    1ce4:	4f 5f       	subi	r20, 0xFF	; 255
    1ce6:	40 93 98 00 	sts	0x0098, r20
	if (TMU_Res_MS == Counter){
    1cea:	24 2f       	mov	r18, r20
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	80 91 ad 00 	lds	r24, 0x00AD
    1cf2:	90 91 ae 00 	lds	r25, 0x00AE
    1cf6:	28 17       	cp	r18, r24
    1cf8:	39 07       	cpc	r19, r25
    1cfa:	a9 f4       	brne	.+42     	; 0x1d26 <__vector_5+0x68>
    1cfc:	a9 e9       	ldi	r26, 0x99	; 153
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
	sei();
	return S_ret_val;
}

u8 Counter = 0 ;
ISR(TIMER2_OVF_vect){
    1d00:	9d 01       	movw	r18, r26
    1d02:	2c 5e       	subi	r18, 0xEC	; 236
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
	Counter ++;
	if (TMU_Res_MS == Counter){
		for (i=0; i <Max_Timer_Number;i++){
			if (TMU_Internal_Buffer[i] != NULL){
				TMU_Internal_Buffer[i]->Remaining_Time--;
				Counter=0;
    1d06:	50 e0       	ldi	r21, 0x00	; 0
ISR(TIMER2_OVF_vect){
	u8 i;
	Counter ++;
	if (TMU_Res_MS == Counter){
		for (i=0; i <Max_Timer_Number;i++){
			if (TMU_Internal_Buffer[i] != NULL){
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fd 91       	ld	r31, X+
    1d0c:	30 97       	sbiw	r30, 0x00	; 0
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <__vector_5+0x5e>
				TMU_Internal_Buffer[i]->Remaining_Time--;
    1d10:	85 81       	ldd	r24, Z+5	; 0x05
    1d12:	96 81       	ldd	r25, Z+6	; 0x06
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	96 83       	std	Z+6, r25	; 0x06
    1d18:	85 83       	std	Z+5, r24	; 0x05
				Counter=0;
    1d1a:	45 2f       	mov	r20, r21
u8 Counter = 0 ;
ISR(TIMER2_OVF_vect){
	u8 i;
	Counter ++;
	if (TMU_Res_MS == Counter){
		for (i=0; i <Max_Timer_Number;i++){
    1d1c:	a2 17       	cp	r26, r18
    1d1e:	b3 07       	cpc	r27, r19
    1d20:	99 f7       	brne	.-26     	; 0x1d08 <__vector_5+0x4a>
    1d22:	40 93 98 00 	sts	0x0098, r20
				Counter=0;
			}
		}
	
	}
	TMR2_Set_Counter_Value(55);
    1d26:	87 e3       	ldi	r24, 0x37	; 55
    1d28:	0e 94 ce 0b 	call	0x179c	; 0x179c <TMR2_Set_Counter_Value>
	sei();
    1d2c:	78 94       	sei
}
    1d2e:	ff 91       	pop	r31
    1d30:	ef 91       	pop	r30
    1d32:	bf 91       	pop	r27
    1d34:	af 91       	pop	r26
    1d36:	9f 91       	pop	r25
    1d38:	8f 91       	pop	r24
    1d3a:	7f 91       	pop	r23
    1d3c:	6f 91       	pop	r22
    1d3e:	5f 91       	pop	r21
    1d40:	4f 91       	pop	r20
    1d42:	3f 91       	pop	r19
    1d44:	2f 91       	pop	r18
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	0f 90       	pop	r0
    1d4c:	1f 90       	pop	r1
    1d4e:	18 95       	reti

00001d50 <US_Get_Configuration>:
 */ 
#include "Ultasonic_ECU.h"
#define F_CPU 8000000UL
#include <util/delay.h>
void US_Get_Configuration (u8 TRIGGER_Port , u8 TRIGGER_Pin , u8 ECHO_Port , u8 ECHO_Pin){
	US_Config.Trigger_Port = TRIGGER_Port;
    1d50:	80 93 c7 00 	sts	0x00C7, r24
	US_Config.Trigger_Pin = TRIGGER_Pin;
    1d54:	60 93 c8 00 	sts	0x00C8, r22
	US_Config.Echo_Port = ECHO_Port;
    1d58:	40 93 c9 00 	sts	0x00C9, r20
	US_Config.Echo_Pin = ECHO_Pin;
    1d5c:	20 93 ca 00 	sts	0x00CA, r18
}
    1d60:	08 95       	ret

00001d62 <US_vInit>:

void US_vInit (void){
/******************Adjust Trigger pin as Output*****************************/
	GPIO_vsetPIN_DIR(US_Config.Trigger_Port,US_Config.Trigger_Pin,1);
    1d62:	60 91 c8 00 	lds	r22, 0x00C8
    1d66:	80 91 c7 00 	lds	r24, 0x00C7
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
/***************************************************************************/
/**********************Adjust Echo pin as Input*****************************/
	GPIO_vsetPIN_DIR(US_Config.Echo_Port,US_Config.Echo_Pin,0);
    1d76:	60 91 ca 00 	lds	r22, 0x00CA
    1d7a:	80 91 c9 00 	lds	r24, 0x00C9
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_vsetPIN_DIR>
/***************************************************************************/
}
    1d8a:	08 95       	ret

00001d8c <US_Read_Distance_cm>:

u16 US_Read_Distance_cm (void){
	u16 distance , On_Time ;
	u16 a, b , c  ;
	SET_BIT(myTIFR,myICF1);
    1d8c:	88 b7       	in	r24, 0x38	; 56
    1d8e:	80 62       	ori	r24, 0x20	; 32
    1d90:	88 bf       	out	0x38, r24	; 56
	myTCCR1A=0;
    1d92:	1f bc       	out	0x2f, r1	; 47
	myTCCR1B=0xc1;  //1100 0001 (Enable for ICU , detect rising edge , No prescaling)
    1d94:	81 ec       	ldi	r24, 0xC1	; 193
    1d96:	8e bd       	out	0x2e, r24	; 46
	while(READ_BIT(myTIFR,myICF1)==0);
    1d98:	08 b6       	in	r0, 0x38	; 56
    1d9a:	05 fe       	sbrs	r0, 5
    1d9c:	fd cf       	rjmp	.-6      	; 0x1d98 <US_Read_Distance_cm+0xc>
	a=ICR1;
    1d9e:	26 b5       	in	r18, 0x26	; 38
    1da0:	37 b5       	in	r19, 0x27	; 39
	SET_BIT(myTIFR,myICF1);
    1da2:	88 b7       	in	r24, 0x38	; 56
    1da4:	80 62       	ori	r24, 0x20	; 32
    1da6:	88 bf       	out	0x38, r24	; 56
	myTCCR1B=0x81;  //1000 0001 (Enable for ICU , detect falling edge , No prescaling)
    1da8:	81 e8       	ldi	r24, 0x81	; 129
    1daa:	8e bd       	out	0x2e, r24	; 46
	while(READ_BIT(myTIFR,myICF1)==0);
    1dac:	08 b6       	in	r0, 0x38	; 56
    1dae:	05 fe       	sbrs	r0, 5
    1db0:	fd cf       	rjmp	.-6      	; 0x1dac <US_Read_Distance_cm+0x20>
	b=ICR1;
    1db2:	86 b5       	in	r24, 0x26	; 38
    1db4:	97 b5       	in	r25, 0x27	; 39
	
	SET_BIT(myTIFR,myICF1);
    1db6:	48 b7       	in	r20, 0x38	; 56
    1db8:	40 62       	ori	r20, 0x20	; 32
    1dba:	48 bf       	out	0x38, r20	; 56
	myTCCR1B=0xc1;  //1100 0001 (Enable for ICU , detect rising edge , No prescaling)
    1dbc:	41 ec       	ldi	r20, 0xC1	; 193
    1dbe:	4e bd       	out	0x2e, r20	; 46
	while(READ_BIT(myTIFR,myICF1)==0);
    1dc0:	08 b6       	in	r0, 0x38	; 56
    1dc2:	05 fe       	sbrs	r0, 5
    1dc4:	fd cf       	rjmp	.-6      	; 0x1dc0 <US_Read_Distance_cm+0x34>
	c=ICR1;
    1dc6:	46 b5       	in	r20, 0x26	; 38
    1dc8:	57 b5       	in	r21, 0x27	; 39
	SET_BIT(myTIFR,myICF1);
    1dca:	e8 b7       	in	r30, 0x38	; 56
    1dcc:	e0 62       	ori	r30, 0x20	; 32
    1dce:	e8 bf       	out	0x38, r30	; 56
	myTCCR1B=0;
    1dd0:	1e bc       	out	0x2e, r1	; 46
	if ((a<b) && (b<c)){
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	30 f4       	brcc	.+12     	; 0x1de4 <US_Read_Distance_cm+0x58>
    1dd8:	84 17       	cp	r24, r20
    1dda:	95 07       	cpc	r25, r21
    1ddc:	18 f4       	brcc	.+6      	; 0x1de4 <US_Read_Distance_cm+0x58>
		On_Time = b - a;
    1dde:	bc 01       	movw	r22, r24
    1de0:	62 1b       	sub	r22, r18
    1de2:	73 0b       	sbc	r23, r19
		
	}
	
	
	distance = (((f32)On_Time) * 34300) / (F_CPU * 2) ;
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 cd 12 	call	0x259a	; 0x259a <__floatunsisf>
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3c ef       	ldi	r19, 0xFC	; 252
    1df0:	45 e0       	ldi	r20, 0x05	; 5
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	34 e2       	ldi	r19, 0x24	; 36
    1dfc:	44 e7       	ldi	r20, 0x74	; 116
    1dfe:	5b e4       	ldi	r21, 0x4B	; 75
    1e00:	0e 94 34 12 	call	0x2468	; 0x2468 <__divsf3>
    1e04:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixunssfsi>
	return distance;
    1e08:	86 2f       	mov	r24, r22
    1e0a:	97 2f       	mov	r25, r23
    1e0c:	08 95       	ret

00001e0e <USART_get_config>:
#define F_CPU 8000000UL

USART_Config *OBJECT;
void (*TX_CB_function)(void);
void (*RX_CB_function)(void);
usart_ErrorTypes USART_get_config (USART_Config *obj , u8 Synchronous , u8 Speed , u32 Baud_rate , u8 TX_Enable , u8 RX_Enable , u8 Size , u8 parity , u8 Stop_bit ){
    1e0e:	8f 92       	push	r8
    1e10:	af 92       	push	r10
    1e12:	cf 92       	push	r12
    1e14:	ef 92       	push	r14
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
	OBJECT = obj;
    1e22:	90 93 ce 00 	sts	0x00CE, r25
    1e26:	80 93 cd 00 	sts	0x00CD, r24
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
	OBJECT->SYNCH_MODE = Synchronous;
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	60 83       	st	Z, r22
	OBJECT->SPEED_MODE = Speed;
    1e2e:	e0 91 cd 00 	lds	r30, 0x00CD
    1e32:	f0 91 ce 00 	lds	r31, 0x00CE
    1e36:	41 83       	std	Z+1, r20	; 0x01
	OBJECT->Baud_Rate =Baud_rate;
    1e38:	e0 91 cd 00 	lds	r30, 0x00CD
    1e3c:	f0 91 ce 00 	lds	r31, 0x00CE
    1e40:	05 87       	std	Z+13, r16	; 0x0d
    1e42:	16 87       	std	Z+14, r17	; 0x0e
    1e44:	27 87       	std	Z+15, r18	; 0x0f
    1e46:	30 8b       	std	Z+16, r19	; 0x10
	OBJECT->Transmit = TX_Enable;
    1e48:	e2 82       	std	Z+2, r14	; 0x02
	OBJECT->Recieve = RX_Enable;
    1e4a:	c3 82       	std	Z+3, r12	; 0x03
	OBJECT->Char_Size = Size;
    1e4c:	a4 82       	std	Z+4, r10	; 0x04
	OBJECT->Parity_Mode = parity;
    1e4e:	85 82       	std	Z+5, r8	; 0x05
	OBJECT->Stop_Bit = Stop_bit;
    1e50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e52:	86 83       	std	Z+6, r24	; 0x06
	OBJECT->Recieve_INT=RECIEVE_INT_DISABLE;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	80 87       	std	Z+8, r24	; 0x08
	OBJECT->Transmit_INT=TRANSMIT_INT_DISABLE;
    1e58:	87 83       	std	Z+7, r24	; 0x07
	return s_ret_val;
}
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	ef 90       	pop	r14
    1e66:	cf 90       	pop	r12
    1e68:	af 90       	pop	r10
    1e6a:	8f 90       	pop	r8
    1e6c:	08 95       	ret

00001e6e <USART_get_INT_config>:


usart_ErrorTypes USART_get_INT_config (u8 TX_INT,u8 RX_INT, void (*TX_CB_func)(void) , void (*RX_CB_func)(void)){
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
	if(OBJECT==0){
    1e6e:	e0 91 cd 00 	lds	r30, 0x00CD
    1e72:	f0 91 ce 00 	lds	r31, 0x00CE
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	71 f0       	breq	.+28     	; 0x1e96 <USART_get_INT_config+0x28>
		s_ret_val= DEVICE_NOT_INITIATED;
	}else{
		OBJECT->Transmit_INT=TX_INT;
    1e7a:	87 83       	std	Z+7, r24	; 0x07
		OBJECT->Recieve_INT = RX_INT;
    1e7c:	60 87       	std	Z+8, r22	; 0x08
		if (TX_CB_func==0 || RX_CB_func ==0){
    1e7e:	41 15       	cp	r20, r1
    1e80:	51 05       	cpc	r21, r1
    1e82:	59 f0       	breq	.+22     	; 0x1e9a <USART_get_INT_config+0x2c>
    1e84:	21 15       	cp	r18, r1
    1e86:	31 05       	cpc	r19, r1
    1e88:	51 f0       	breq	.+20     	; 0x1e9e <USART_get_INT_config+0x30>
			s_ret_val = INVALID_PARAMS;
		}else{
			OBJECT->USART_Transmit_Complete_User_CBK= TX_CB_func;
    1e8a:	54 87       	std	Z+12, r21	; 0x0c
    1e8c:	43 87       	std	Z+11, r20	; 0x0b
			OBJECT->USART_Recieve_Complete_User_CBK = RX_CB_func;
    1e8e:	32 87       	std	Z+10, r19	; 0x0a
    1e90:	21 87       	std	Z+9, r18	; 0x09
	return s_ret_val;
}


usart_ErrorTypes USART_get_INT_config (u8 TX_INT,u8 RX_INT, void (*TX_CB_func)(void) , void (*RX_CB_func)(void)){
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	08 95       	ret
	if(OBJECT==0){
		s_ret_val= DEVICE_NOT_INITIATED;
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	08 95       	ret
	}else{
		OBJECT->Transmit_INT=TX_INT;
		OBJECT->Recieve_INT = RX_INT;
		if (TX_CB_func==0 || RX_CB_func ==0){
			s_ret_val = INVALID_PARAMS;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	08 95       	ret
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
			OBJECT->USART_Transmit_Complete_User_CBK= TX_CB_func;
			OBJECT->USART_Recieve_Complete_User_CBK = RX_CB_func;
		}
	}
	return s_ret_val;
}
    1ea0:	08 95       	ret

00001ea2 <USART_Init>:

usart_ErrorTypes USART_Init(void){
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
	u32 UBRR_Val;
	if (OBJECT ==0){
    1ea2:	e0 91 cd 00 	lds	r30, 0x00CD
    1ea6:	f0 91 ce 00 	lds	r31, 0x00CE
    1eaa:	30 97       	sbiw	r30, 0x00	; 0
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <USART_Init+0xe>
    1eae:	f9 c1       	rjmp	.+1010   	; 0x22a2 <USART_Init+0x400>
		s_ret_val = DEVICE_NOT_INITIATED;
	}else{
		if (OBJECT->Transmit == USART_TRANSMIT_ENABLE ){
    1eb0:	22 81       	ldd	r18, Z+2	; 0x02
    1eb2:	22 23       	and	r18, r18
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <USART_Init+0x16>
    1eb6:	f4 c0       	rjmp	.+488    	; 0x20a0 <USART_Init+0x1fe>
			/*********Set Baud Rate***********/
				if((OBJECT->SYNCH_MODE==ASYNC_MODE)&&(OBJECT->SPEED_MODE == USART_NORMAL_MODE)){
    1eb8:	20 81       	ld	r18, Z
    1eba:	21 30       	cpi	r18, 0x01	; 1
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <USART_Init+0x1e>
    1ebe:	45 c0       	rjmp	.+138    	; 0x1f4a <USART_Init+0xa8>
    1ec0:	31 81       	ldd	r19, Z+1	; 0x01
    1ec2:	33 23       	and	r19, r19
    1ec4:	11 f5       	brne	.+68     	; 0x1f0a <USART_Init+0x68>
					UBRR_Val = (u32)(((F_CPU)/(16*OBJECT->Baud_Rate))-1);
    1ec6:	85 85       	ldd	r24, Z+13	; 0x0d
    1ec8:	96 85       	ldd	r25, Z+14	; 0x0e
    1eca:	a7 85       	ldd	r26, Z+15	; 0x0f
    1ecc:	b0 89       	ldd	r27, Z+16	; 0x10
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	aa 1f       	adc	r26, r26
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	9c 01       	movw	r18, r24
    1ee0:	ad 01       	movw	r20, r26
    1ee2:	22 0f       	add	r18, r18
    1ee4:	33 1f       	adc	r19, r19
    1ee6:	44 1f       	adc	r20, r20
    1ee8:	55 1f       	adc	r21, r21
    1eea:	22 0f       	add	r18, r18
    1eec:	33 1f       	adc	r19, r19
    1eee:	44 1f       	adc	r20, r20
    1ef0:	55 1f       	adc	r21, r21
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	72 e1       	ldi	r23, 0x12	; 18
    1ef6:	8a e7       	ldi	r24, 0x7A	; 122
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    1efe:	da 01       	movw	r26, r20
    1f00:	c9 01       	movw	r24, r18
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	a1 09       	sbc	r26, r1
    1f06:	b1 09       	sbc	r27, r1
    1f08:	37 c0       	rjmp	.+110    	; 0x1f78 <USART_Init+0xd6>
				}else if((OBJECT->SYNCH_MODE==ASYNC_MODE)&&(OBJECT->SPEED_MODE == USART_Double_SPEED_MODE)){
    1f0a:	31 30       	cpi	r19, 0x01	; 1
    1f0c:	f1 f4       	brne	.+60     	; 0x1f4a <USART_Init+0xa8>
					UBRR_Val = (u32)(((F_CPU)/(8*OBJECT->Baud_Rate))-1);
    1f0e:	85 85       	ldd	r24, Z+13	; 0x0d
    1f10:	96 85       	ldd	r25, Z+14	; 0x0e
    1f12:	a7 85       	ldd	r26, Z+15	; 0x0f
    1f14:	b0 89       	ldd	r27, Z+16	; 0x10
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	aa 1f       	adc	r26, r26
    1f24:	bb 1f       	adc	r27, r27
    1f26:	9c 01       	movw	r18, r24
    1f28:	ad 01       	movw	r20, r26
    1f2a:	22 0f       	add	r18, r18
    1f2c:	33 1f       	adc	r19, r19
    1f2e:	44 1f       	adc	r20, r20
    1f30:	55 1f       	adc	r21, r21
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	72 e1       	ldi	r23, 0x12	; 18
    1f36:	8a e7       	ldi	r24, 0x7A	; 122
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    1f3e:	da 01       	movw	r26, r20
    1f40:	c9 01       	movw	r24, r18
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	a1 09       	sbc	r26, r1
    1f46:	b1 09       	sbc	r27, r1
    1f48:	17 c0       	rjmp	.+46     	; 0x1f78 <USART_Init+0xd6>
				}else if(OBJECT->SYNCH_MODE==SYNC_MODE){
    1f4a:	22 23       	and	r18, r18
    1f4c:	a9 f4       	brne	.+42     	; 0x1f78 <USART_Init+0xd6>
					UBRR_Val = (u32)(((F_CPU)/(2*OBJECT->Baud_Rate))-1);
    1f4e:	85 85       	ldd	r24, Z+13	; 0x0d
    1f50:	96 85       	ldd	r25, Z+14	; 0x0e
    1f52:	a7 85       	ldd	r26, Z+15	; 0x0f
    1f54:	b0 89       	ldd	r27, Z+16	; 0x10
    1f56:	9c 01       	movw	r18, r24
    1f58:	ad 01       	movw	r20, r26
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	44 1f       	adc	r20, r20
    1f60:	55 1f       	adc	r21, r21
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	72 e1       	ldi	r23, 0x12	; 18
    1f66:	8a e7       	ldi	r24, 0x7A	; 122
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    1f6e:	da 01       	movw	r26, r20
    1f70:	c9 01       	movw	r24, r18
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	a1 09       	sbc	r26, r1
    1f76:	b1 09       	sbc	r27, r1
				}
				 UBRRH =(u8) (UBRR_Val>>8);   
    1f78:	49 2f       	mov	r20, r25
    1f7a:	5a 2f       	mov	r21, r26
    1f7c:	6b 2f       	mov	r22, r27
    1f7e:	77 27       	eor	r23, r23
    1f80:	40 bd       	out	0x20, r20	; 32
				 UBRRL =(u8) (UBRR_Val);
    1f82:	89 b9       	out	0x09, r24	; 9
			/*******************************/
			/************** Enable transmitter **************/
				SET_BIT(UCSRB,TXEN);
    1f84:	53 9a       	sbi	0x0a, 3	; 10
			/************************************************/
			/******************Char size*********************/
				switch(OBJECT->Char_Size){
    1f86:	e0 91 cd 00 	lds	r30, 0x00CD
    1f8a:	f0 91 ce 00 	lds	r31, 0x00CE
    1f8e:	24 81       	ldd	r18, Z+4	; 0x04
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	e1 f0       	breq	.+56     	; 0x1fcc <USART_Init+0x12a>
    1f94:	23 30       	cpi	r18, 0x03	; 3
    1f96:	28 f4       	brcc	.+10     	; 0x1fa2 <USART_Init+0x100>
    1f98:	22 23       	and	r18, r18
    1f9a:	41 f0       	breq	.+16     	; 0x1fac <USART_Init+0x10a>
    1f9c:	21 30       	cpi	r18, 0x01	; 1
    1f9e:	69 f5       	brne	.+90     	; 0x1ffa <USART_Init+0x158>
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <USART_Init+0x11a>
    1fa2:	23 30       	cpi	r18, 0x03	; 3
    1fa4:	d9 f0       	breq	.+54     	; 0x1fdc <USART_Init+0x13a>
    1fa6:	24 30       	cpi	r18, 0x04	; 4
    1fa8:	41 f5       	brne	.+80     	; 0x1ffa <USART_Init+0x158>
    1faa:	20 c0       	rjmp	.+64     	; 0x1fec <USART_Init+0x14a>
					case (USART_5_BIT_CHAR) :
						CLR_BIT(UCSRB,UCSZ2);
    1fac:	52 98       	cbi	0x0a, 2	; 10
						CLR_BIT(UCSRC,UCSZ1);
    1fae:	20 b5       	in	r18, 0x20	; 32
    1fb0:	2b 7f       	andi	r18, 0xFB	; 251
    1fb2:	20 bd       	out	0x20, r18	; 32
						CLR_BIT(UCSRC,UCSZ0);
    1fb4:	20 b5       	in	r18, 0x20	; 32
    1fb6:	2d 7f       	andi	r18, 0xFD	; 253
    1fb8:	20 bd       	out	0x20, r18	; 32
						break;
    1fba:	1f c0       	rjmp	.+62     	; 0x1ffa <USART_Init+0x158>
					case (USART_6_BIT_CHAR) :
						CLR_BIT(UCSRB,UCSZ2);
    1fbc:	52 98       	cbi	0x0a, 2	; 10
						CLR_BIT(UCSRC,UCSZ1);
    1fbe:	20 b5       	in	r18, 0x20	; 32
    1fc0:	2b 7f       	andi	r18, 0xFB	; 251
    1fc2:	20 bd       	out	0x20, r18	; 32
						SET_BIT(UCSRC,UCSZ0);
    1fc4:	20 b5       	in	r18, 0x20	; 32
    1fc6:	22 60       	ori	r18, 0x02	; 2
    1fc8:	20 bd       	out	0x20, r18	; 32
						break;
    1fca:	17 c0       	rjmp	.+46     	; 0x1ffa <USART_Init+0x158>
					case (USART_7_BIT_CHAR) :
						CLR_BIT(UCSRB,UCSZ2);
    1fcc:	52 98       	cbi	0x0a, 2	; 10
						SET_BIT(UCSRC,UCSZ1);
    1fce:	20 b5       	in	r18, 0x20	; 32
    1fd0:	24 60       	ori	r18, 0x04	; 4
    1fd2:	20 bd       	out	0x20, r18	; 32
						CLR_BIT(UCSRC,UCSZ0);
    1fd4:	20 b5       	in	r18, 0x20	; 32
    1fd6:	2d 7f       	andi	r18, 0xFD	; 253
    1fd8:	20 bd       	out	0x20, r18	; 32
						break;
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <USART_Init+0x158>
					case (USART_8_BIT_CHAR) :
						CLR_BIT(UCSRB,UCSZ2);
    1fdc:	52 98       	cbi	0x0a, 2	; 10
						SET_BIT(UCSRC,UCSZ1);
    1fde:	20 b5       	in	r18, 0x20	; 32
    1fe0:	24 60       	ori	r18, 0x04	; 4
    1fe2:	20 bd       	out	0x20, r18	; 32
						SET_BIT(UCSRC,UCSZ0);
    1fe4:	20 b5       	in	r18, 0x20	; 32
    1fe6:	22 60       	ori	r18, 0x02	; 2
    1fe8:	20 bd       	out	0x20, r18	; 32
						break;
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <USART_Init+0x158>
					case (USART_9_BIT_CHAR) :
						SET_BIT(UCSRB,UCSZ2);
    1fec:	52 9a       	sbi	0x0a, 2	; 10
						SET_BIT(UCSRC,UCSZ1);
    1fee:	20 b5       	in	r18, 0x20	; 32
    1ff0:	24 60       	ori	r18, 0x04	; 4
    1ff2:	20 bd       	out	0x20, r18	; 32
						SET_BIT(UCSRC,UCSZ0);
    1ff4:	20 b5       	in	r18, 0x20	; 32
    1ff6:	22 60       	ori	r18, 0x02	; 2
    1ff8:	20 bd       	out	0x20, r18	; 32
						break;
					default: break;
				}
			/************************************************/
			/**************** Set Double speed***************/
				if((OBJECT->SYNCH_MODE==ASYNC_MODE)&&(OBJECT->SPEED_MODE == USART_Double_SPEED_MODE)){
    1ffa:	e0 91 cd 00 	lds	r30, 0x00CD
    1ffe:	f0 91 ce 00 	lds	r31, 0x00CE
    2002:	20 81       	ld	r18, Z
    2004:	21 30       	cpi	r18, 0x01	; 1
    2006:	21 f4       	brne	.+8      	; 0x2010 <USART_Init+0x16e>
    2008:	21 81       	ldd	r18, Z+1	; 0x01
    200a:	21 30       	cpi	r18, 0x01	; 1
    200c:	09 f4       	brne	.+2      	; 0x2010 <USART_Init+0x16e>
					SET_BIT(UCSRA,U2X);
    200e:	59 9a       	sbi	0x0b, 1	; 11
				}
			/***********************************************/
			/**************** Set Parity Bit***************/
				if (OBJECT->Parity_Mode==NO_PARITY){
    2010:	e0 91 cd 00 	lds	r30, 0x00CD
    2014:	f0 91 ce 00 	lds	r31, 0x00CE
    2018:	25 81       	ldd	r18, Z+5	; 0x05
    201a:	22 23       	and	r18, r18
    201c:	39 f4       	brne	.+14     	; 0x202c <USART_Init+0x18a>
					CLR_BIT(UCSRC,UPM0);
    201e:	20 b5       	in	r18, 0x20	; 32
    2020:	2f 7e       	andi	r18, 0xEF	; 239
    2022:	20 bd       	out	0x20, r18	; 32
					CLR_BIT(UCSRC,UPM1);
    2024:	20 b5       	in	r18, 0x20	; 32
    2026:	2f 7d       	andi	r18, 0xDF	; 223
    2028:	20 bd       	out	0x20, r18	; 32
    202a:	11 c0       	rjmp	.+34     	; 0x204e <USART_Init+0x1ac>
				}else if (OBJECT->Parity_Mode==EVEN_PARITY){
    202c:	21 30       	cpi	r18, 0x01	; 1
    202e:	39 f4       	brne	.+14     	; 0x203e <USART_Init+0x19c>
					CLR_BIT(UCSRC,UPM0);
    2030:	20 b5       	in	r18, 0x20	; 32
    2032:	2f 7e       	andi	r18, 0xEF	; 239
    2034:	20 bd       	out	0x20, r18	; 32
					SET_BIT(UCSRC,UPM1);
    2036:	20 b5       	in	r18, 0x20	; 32
    2038:	20 62       	ori	r18, 0x20	; 32
    203a:	20 bd       	out	0x20, r18	; 32
    203c:	08 c0       	rjmp	.+16     	; 0x204e <USART_Init+0x1ac>
			    }else if (OBJECT->Parity_Mode==ODD_PARITY){
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 f4       	brne	.+12     	; 0x204e <USART_Init+0x1ac>
					SET_BIT(UCSRC,UPM0);
    2042:	20 b5       	in	r18, 0x20	; 32
    2044:	20 61       	ori	r18, 0x10	; 16
    2046:	20 bd       	out	0x20, r18	; 32
					SET_BIT(UCSRC,UPM1);
    2048:	20 b5       	in	r18, 0x20	; 32
    204a:	20 62       	ori	r18, 0x20	; 32
    204c:	20 bd       	out	0x20, r18	; 32
				}
			/**********************************************/
			/**************** Set Stop Bit***************/
				if (OBJECT->Stop_Bit==ONE_STOP_BIT){
    204e:	e0 91 cd 00 	lds	r30, 0x00CD
    2052:	f0 91 ce 00 	lds	r31, 0x00CE
    2056:	26 81       	ldd	r18, Z+6	; 0x06
    2058:	22 23       	and	r18, r18
    205a:	21 f4       	brne	.+8      	; 0x2064 <USART_Init+0x1c2>
					CLR_BIT(UCSRC,USBS);
    205c:	20 b5       	in	r18, 0x20	; 32
    205e:	27 7f       	andi	r18, 0xF7	; 247
    2060:	20 bd       	out	0x20, r18	; 32
    2062:	05 c0       	rjmp	.+10     	; 0x206e <USART_Init+0x1cc>
				}else if(OBJECT->Stop_Bit==TWO_STOP_BIT ){
    2064:	21 30       	cpi	r18, 0x01	; 1
    2066:	19 f4       	brne	.+6      	; 0x206e <USART_Init+0x1cc>
					SET_BIT(UCSRC,USBS);
    2068:	20 b5       	in	r18, 0x20	; 32
    206a:	28 60       	ori	r18, 0x08	; 8
    206c:	20 bd       	out	0x20, r18	; 32
				}
			/********************************************/
			/***************RECIEVER INT ENABLE**********/
				if (OBJECT->Recieve_INT==RECIEVE_INT_ENABLE){
    206e:	e0 91 cd 00 	lds	r30, 0x00CD
    2072:	f0 91 ce 00 	lds	r31, 0x00CE
    2076:	20 85       	ldd	r18, Z+8	; 0x08
    2078:	22 23       	and	r18, r18
    207a:	11 f4       	brne	.+4      	; 0x2080 <USART_Init+0x1de>
					SET_BIT(UCSRB,RXCIE);
    207c:	57 9a       	sbi	0x0a, 7	; 10
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <USART_Init+0x1e4>
				}else if (OBJECT->Recieve_INT==RECIEVE_INT_DISABLE){
    2080:	21 30       	cpi	r18, 0x01	; 1
    2082:	09 f4       	brne	.+2      	; 0x2086 <USART_Init+0x1e4>
					CLR_BIT(UCSRB,RXCIE);
    2084:	57 98       	cbi	0x0a, 7	; 10
				} 
			/********************************************/
			/***************Transmit INT ENABLE**********/
				if (OBJECT->Transmit_INT==TRANSMIT_INT_ENABLE){
    2086:	e0 91 cd 00 	lds	r30, 0x00CD
    208a:	f0 91 ce 00 	lds	r31, 0x00CE
    208e:	27 81       	ldd	r18, Z+7	; 0x07
    2090:	22 23       	and	r18, r18
    2092:	11 f4       	brne	.+4      	; 0x2098 <USART_Init+0x1f6>
					SET_BIT(UCSRB,TXCIE);
    2094:	56 9a       	sbi	0x0a, 6	; 10
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <USART_Init+0x200>
				}else if (OBJECT->Transmit_INT==TRANSMIT_INT_DISABLE){
    2098:	21 30       	cpi	r18, 0x01	; 1
    209a:	19 f4       	brne	.+6      	; 0x20a2 <USART_Init+0x200>
					CLR_BIT(UCSRB,TXCIE);
    209c:	56 98       	cbi	0x0a, 6	; 10
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <USART_Init+0x200>
				}
			/********************************************/
		} 
		else{
			CLR_BIT(UCSRB,TXEN);
    20a0:	53 98       	cbi	0x0a, 3	; 10
		}
		if (OBJECT->Recieve == USART_RECIEVE_ENABLE ){
    20a2:	e0 91 cd 00 	lds	r30, 0x00CD
    20a6:	f0 91 ce 00 	lds	r31, 0x00CE
    20aa:	23 81       	ldd	r18, Z+3	; 0x03
    20ac:	22 23       	and	r18, r18
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <USART_Init+0x210>
    20b0:	f5 c0       	rjmp	.+490    	; 0x229c <USART_Init+0x3fa>
			/*********Set Baud Rate***********/
			if((OBJECT->SYNCH_MODE==ASYNC_MODE)&&(OBJECT->SPEED_MODE == USART_NORMAL_MODE)){
    20b2:	20 81       	ld	r18, Z
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	09 f0       	breq	.+2      	; 0x20ba <USART_Init+0x218>
    20b8:	45 c0       	rjmp	.+138    	; 0x2144 <USART_Init+0x2a2>
    20ba:	31 81       	ldd	r19, Z+1	; 0x01
    20bc:	33 23       	and	r19, r19
    20be:	11 f5       	brne	.+68     	; 0x2104 <USART_Init+0x262>
				UBRR_Val = (u32)(((F_CPU)/(16*OBJECT->Baud_Rate))-1);
    20c0:	85 85       	ldd	r24, Z+13	; 0x0d
    20c2:	96 85       	ldd	r25, Z+14	; 0x0e
    20c4:	a7 85       	ldd	r26, Z+15	; 0x0f
    20c6:	b0 89       	ldd	r27, Z+16	; 0x10
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	aa 1f       	adc	r26, r26
    20d6:	bb 1f       	adc	r27, r27
    20d8:	9c 01       	movw	r18, r24
    20da:	ad 01       	movw	r20, r26
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	44 1f       	adc	r20, r20
    20e2:	55 1f       	adc	r21, r21
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	44 1f       	adc	r20, r20
    20ea:	55 1f       	adc	r21, r21
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	72 e1       	ldi	r23, 0x12	; 18
    20f0:	8a e7       	ldi	r24, 0x7A	; 122
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    20f8:	da 01       	movw	r26, r20
    20fa:	c9 01       	movw	r24, r18
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	a1 09       	sbc	r26, r1
    2100:	b1 09       	sbc	r27, r1
    2102:	37 c0       	rjmp	.+110    	; 0x2172 <USART_Init+0x2d0>
			}else if((OBJECT->SYNCH_MODE==ASYNC_MODE)&&(OBJECT->SPEED_MODE == USART_Double_SPEED_MODE)){
    2104:	31 30       	cpi	r19, 0x01	; 1
    2106:	f1 f4       	brne	.+60     	; 0x2144 <USART_Init+0x2a2>
				UBRR_Val = (u32)(((F_CPU)/(8*OBJECT->Baud_Rate))-1);
    2108:	85 85       	ldd	r24, Z+13	; 0x0d
    210a:	96 85       	ldd	r25, Z+14	; 0x0e
    210c:	a7 85       	ldd	r26, Z+15	; 0x0f
    210e:	b0 89       	ldd	r27, Z+16	; 0x10
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	aa 1f       	adc	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	9c 01       	movw	r18, r24
    2122:	ad 01       	movw	r20, r26
    2124:	22 0f       	add	r18, r18
    2126:	33 1f       	adc	r19, r19
    2128:	44 1f       	adc	r20, r20
    212a:	55 1f       	adc	r21, r21
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	72 e1       	ldi	r23, 0x12	; 18
    2130:	8a e7       	ldi	r24, 0x7A	; 122
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    2138:	da 01       	movw	r26, r20
    213a:	c9 01       	movw	r24, r18
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	a1 09       	sbc	r26, r1
    2140:	b1 09       	sbc	r27, r1
    2142:	17 c0       	rjmp	.+46     	; 0x2172 <USART_Init+0x2d0>
			}else if(OBJECT->SYNCH_MODE==SYNC_MODE){
    2144:	22 23       	and	r18, r18
    2146:	a9 f4       	brne	.+42     	; 0x2172 <USART_Init+0x2d0>
				UBRR_Val = (u32)(((F_CPU)/(2*OBJECT->Baud_Rate))-1);
    2148:	85 85       	ldd	r24, Z+13	; 0x0d
    214a:	96 85       	ldd	r25, Z+14	; 0x0e
    214c:	a7 85       	ldd	r26, Z+15	; 0x0f
    214e:	b0 89       	ldd	r27, Z+16	; 0x10
    2150:	9c 01       	movw	r18, r24
    2152:	ad 01       	movw	r20, r26
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	44 1f       	adc	r20, r20
    215a:	55 1f       	adc	r21, r21
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	72 e1       	ldi	r23, 0x12	; 18
    2160:	8a e7       	ldi	r24, 0x7A	; 122
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    2168:	da 01       	movw	r26, r20
    216a:	c9 01       	movw	r24, r18
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	a1 09       	sbc	r26, r1
    2170:	b1 09       	sbc	r27, r1
			}
			UBRRH =(u8) (UBRR_Val>>8);
    2172:	49 2f       	mov	r20, r25
    2174:	5a 2f       	mov	r21, r26
    2176:	6b 2f       	mov	r22, r27
    2178:	77 27       	eor	r23, r23
    217a:	40 bd       	out	0x20, r20	; 32
			UBRRL =(u8) (UBRR_Val);
    217c:	89 b9       	out	0x09, r24	; 9
			/*******************************/
			/************** Enable Reciver **************/
				SET_BIT(UCSRB,RXEN);
    217e:	54 9a       	sbi	0x0a, 4	; 10
			/************************************************/
			/******************Char size*********************/
			switch(OBJECT->Char_Size){
    2180:	e0 91 cd 00 	lds	r30, 0x00CD
    2184:	f0 91 ce 00 	lds	r31, 0x00CE
    2188:	84 81       	ldd	r24, Z+4	; 0x04
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	e1 f0       	breq	.+56     	; 0x21c6 <USART_Init+0x324>
    218e:	83 30       	cpi	r24, 0x03	; 3
    2190:	28 f4       	brcc	.+10     	; 0x219c <USART_Init+0x2fa>
    2192:	88 23       	and	r24, r24
    2194:	41 f0       	breq	.+16     	; 0x21a6 <USART_Init+0x304>
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	69 f5       	brne	.+90     	; 0x21f4 <USART_Init+0x352>
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <USART_Init+0x314>
    219c:	83 30       	cpi	r24, 0x03	; 3
    219e:	d9 f0       	breq	.+54     	; 0x21d6 <USART_Init+0x334>
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	41 f5       	brne	.+80     	; 0x21f4 <USART_Init+0x352>
    21a4:	20 c0       	rjmp	.+64     	; 0x21e6 <USART_Init+0x344>
				case (USART_5_BIT_CHAR) :
				CLR_BIT(UCSRB,UCSZ2);
    21a6:	52 98       	cbi	0x0a, 2	; 10
				CLR_BIT(UCSRC,UCSZ1);
    21a8:	80 b5       	in	r24, 0x20	; 32
    21aa:	8b 7f       	andi	r24, 0xFB	; 251
    21ac:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UCSZ0);
    21ae:	80 b5       	in	r24, 0x20	; 32
    21b0:	8d 7f       	andi	r24, 0xFD	; 253
    21b2:	80 bd       	out	0x20, r24	; 32
				break;
    21b4:	1f c0       	rjmp	.+62     	; 0x21f4 <USART_Init+0x352>
				case (USART_6_BIT_CHAR) :
				CLR_BIT(UCSRB,UCSZ2);
    21b6:	52 98       	cbi	0x0a, 2	; 10
				CLR_BIT(UCSRC,UCSZ1);
    21b8:	80 b5       	in	r24, 0x20	; 32
    21ba:	8b 7f       	andi	r24, 0xFB	; 251
    21bc:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ0);
    21be:	80 b5       	in	r24, 0x20	; 32
    21c0:	82 60       	ori	r24, 0x02	; 2
    21c2:	80 bd       	out	0x20, r24	; 32
				break;
    21c4:	17 c0       	rjmp	.+46     	; 0x21f4 <USART_Init+0x352>
				case (USART_7_BIT_CHAR) :
				CLR_BIT(UCSRB,UCSZ2);
    21c6:	52 98       	cbi	0x0a, 2	; 10
				SET_BIT(UCSRC,UCSZ1);
    21c8:	80 b5       	in	r24, 0x20	; 32
    21ca:	84 60       	ori	r24, 0x04	; 4
    21cc:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UCSZ0);
    21ce:	80 b5       	in	r24, 0x20	; 32
    21d0:	8d 7f       	andi	r24, 0xFD	; 253
    21d2:	80 bd       	out	0x20, r24	; 32
				break;
    21d4:	0f c0       	rjmp	.+30     	; 0x21f4 <USART_Init+0x352>
				case (USART_8_BIT_CHAR) :
				CLR_BIT(UCSRB,UCSZ2);
    21d6:	52 98       	cbi	0x0a, 2	; 10
				SET_BIT(UCSRC,UCSZ1);
    21d8:	80 b5       	in	r24, 0x20	; 32
    21da:	84 60       	ori	r24, 0x04	; 4
    21dc:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ0);
    21de:	80 b5       	in	r24, 0x20	; 32
    21e0:	82 60       	ori	r24, 0x02	; 2
    21e2:	80 bd       	out	0x20, r24	; 32
				break;
    21e4:	07 c0       	rjmp	.+14     	; 0x21f4 <USART_Init+0x352>
				case (USART_9_BIT_CHAR) :
				SET_BIT(UCSRB,UCSZ2);
    21e6:	52 9a       	sbi	0x0a, 2	; 10
				SET_BIT(UCSRC,UCSZ1);
    21e8:	80 b5       	in	r24, 0x20	; 32
    21ea:	84 60       	ori	r24, 0x04	; 4
    21ec:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ0);
    21ee:	80 b5       	in	r24, 0x20	; 32
    21f0:	82 60       	ori	r24, 0x02	; 2
    21f2:	80 bd       	out	0x20, r24	; 32
				break;
				default: break;
			}
			/************************************************/
			/**************** Set Double speed***************/
			if((OBJECT->SYNCH_MODE==ASYNC_MODE)&&(OBJECT->SPEED_MODE == USART_Double_SPEED_MODE)){
    21f4:	e0 91 cd 00 	lds	r30, 0x00CD
    21f8:	f0 91 ce 00 	lds	r31, 0x00CE
    21fc:	80 81       	ld	r24, Z
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	21 f4       	brne	.+8      	; 0x220a <USART_Init+0x368>
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	09 f4       	brne	.+2      	; 0x220a <USART_Init+0x368>
				SET_BIT(UCSRA,U2X);
    2208:	59 9a       	sbi	0x0b, 1	; 11
			}
			/***********************************************/
			/**************** Set Parity Bit***************/
			if (OBJECT->Parity_Mode==NO_PARITY){
    220a:	e0 91 cd 00 	lds	r30, 0x00CD
    220e:	f0 91 ce 00 	lds	r31, 0x00CE
    2212:	85 81       	ldd	r24, Z+5	; 0x05
    2214:	88 23       	and	r24, r24
    2216:	39 f4       	brne	.+14     	; 0x2226 <USART_Init+0x384>
				CLR_BIT(UCSRC,UPM0);
    2218:	80 b5       	in	r24, 0x20	; 32
    221a:	8f 7e       	andi	r24, 0xEF	; 239
    221c:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UPM1);
    221e:	80 b5       	in	r24, 0x20	; 32
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	80 bd       	out	0x20, r24	; 32
    2224:	11 c0       	rjmp	.+34     	; 0x2248 <USART_Init+0x3a6>
			}else if (OBJECT->Parity_Mode==EVEN_PARITY){
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	39 f4       	brne	.+14     	; 0x2238 <USART_Init+0x396>
				CLR_BIT(UCSRC,UPM0);
    222a:	80 b5       	in	r24, 0x20	; 32
    222c:	8f 7e       	andi	r24, 0xEF	; 239
    222e:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UPM1);
    2230:	80 b5       	in	r24, 0x20	; 32
    2232:	80 62       	ori	r24, 0x20	; 32
    2234:	80 bd       	out	0x20, r24	; 32
    2236:	08 c0       	rjmp	.+16     	; 0x2248 <USART_Init+0x3a6>
			}else if (OBJECT->Parity_Mode==ODD_PARITY){
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	31 f4       	brne	.+12     	; 0x2248 <USART_Init+0x3a6>
				SET_BIT(UCSRC,UPM0);
    223c:	80 b5       	in	r24, 0x20	; 32
    223e:	80 61       	ori	r24, 0x10	; 16
    2240:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UPM1);
    2242:	80 b5       	in	r24, 0x20	; 32
    2244:	80 62       	ori	r24, 0x20	; 32
    2246:	80 bd       	out	0x20, r24	; 32
			}
			/**********************************************/
			/**************** Set Stop Bit***************/
			if (OBJECT->Stop_Bit==ONE_STOP_BIT){
    2248:	e0 91 cd 00 	lds	r30, 0x00CD
    224c:	f0 91 ce 00 	lds	r31, 0x00CE
    2250:	86 81       	ldd	r24, Z+6	; 0x06
    2252:	88 23       	and	r24, r24
    2254:	21 f4       	brne	.+8      	; 0x225e <USART_Init+0x3bc>
				CLR_BIT(UCSRC,USBS);
    2256:	80 b5       	in	r24, 0x20	; 32
    2258:	87 7f       	andi	r24, 0xF7	; 247
    225a:	80 bd       	out	0x20, r24	; 32
    225c:	05 c0       	rjmp	.+10     	; 0x2268 <USART_Init+0x3c6>
			}else if(OBJECT->Stop_Bit==TWO_STOP_BIT ){
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	19 f4       	brne	.+6      	; 0x2268 <USART_Init+0x3c6>
				SET_BIT(UCSRC,USBS);
    2262:	80 b5       	in	r24, 0x20	; 32
    2264:	88 60       	ori	r24, 0x08	; 8
    2266:	80 bd       	out	0x20, r24	; 32
			}
			/********************************************/
			/***************RECIEVER INT ENABLE**********/
			if (OBJECT->Recieve_INT==RECIEVE_INT_ENABLE){
    2268:	e0 91 cd 00 	lds	r30, 0x00CD
    226c:	f0 91 ce 00 	lds	r31, 0x00CE
    2270:	80 85       	ldd	r24, Z+8	; 0x08
    2272:	88 23       	and	r24, r24
    2274:	11 f4       	brne	.+4      	; 0x227a <USART_Init+0x3d8>
				SET_BIT(UCSRB,RXCIE);
    2276:	57 9a       	sbi	0x0a, 7	; 10
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <USART_Init+0x3de>
			}else if (OBJECT->Recieve_INT==RECIEVE_INT_DISABLE){
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	09 f4       	brne	.+2      	; 0x2280 <USART_Init+0x3de>
				CLR_BIT(UCSRB,RXCIE);
    227e:	57 98       	cbi	0x0a, 7	; 10
			}
			/********************************************/
			/***************Transmit INT ENABLE**********/
			if (OBJECT->Transmit_INT==TRANSMIT_INT_ENABLE){
    2280:	e0 91 cd 00 	lds	r30, 0x00CD
    2284:	f0 91 ce 00 	lds	r31, 0x00CE
    2288:	87 81       	ldd	r24, Z+7	; 0x07
    228a:	88 23       	and	r24, r24
    228c:	11 f4       	brne	.+4      	; 0x2292 <USART_Init+0x3f0>
				SET_BIT(UCSRB,TXCIE);
    228e:	56 9a       	sbi	0x0a, 6	; 10
    2290:	08 95       	ret
			}else if (OBJECT->Transmit_INT==TRANSMIT_INT_DISABLE){
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	41 f4       	brne	.+16     	; 0x22a6 <USART_Init+0x404>
				CLR_BIT(UCSRB,TXCIE);
    2296:	56 98       	cbi	0x0a, 6	; 10
	}
	return s_ret_val;
}

usart_ErrorTypes USART_Init(void){
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	08 95       	ret
				CLR_BIT(UCSRB,TXCIE);
			}
			/********************************************/
		}
		else{
			CLR_BIT(UCSRB,RXEN);
    229c:	54 98       	cbi	0x0a, 4	; 10
	}
	return s_ret_val;
}

usart_ErrorTypes USART_Init(void){
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	08 95       	ret
	u32 UBRR_Val;
	if (OBJECT ==0){
		s_ret_val = DEVICE_NOT_INITIATED;
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	08 95       	ret
	}
	return s_ret_val;
}

usart_ErrorTypes USART_Init(void){
	usart_ErrorTypes s_ret_val = NO_USART_ERRORS;
    22a6:	80 e0       	ldi	r24, 0x00	; 0
			CLR_BIT(UCSRB,RXEN);
		}
	}
	
	return s_ret_val;
}
    22a8:	08 95       	ret

000022aa <USART_Transmit>:

void USART_Transmit(u16 data){
	/* Wait for empty transmit buffer */
		while(IS_BIT_CLR(UCSRA,UDRE));
    22aa:	5d 9b       	sbis	0x0b, 5	; 11
    22ac:	fe cf       	rjmp	.-4      	; 0x22aa <USART_Transmit>
	/**********************************/
	/***********if the data to be transmitted is 9 bits, write the MSB first*****************/
		if (OBJECT->Char_Size==USART_9_BIT_CHAR){
    22ae:	e0 91 cd 00 	lds	r30, 0x00CD
    22b2:	f0 91 ce 00 	lds	r31, 0x00CE
    22b6:	24 81       	ldd	r18, Z+4	; 0x04
    22b8:	24 30       	cpi	r18, 0x04	; 4
    22ba:	21 f4       	brne	.+8      	; 0x22c4 <USART_Transmit+0x1a>
			UCSRB |= ((data>>8)&1);   
    22bc:	2a b1       	in	r18, 0x0a	; 10
    22be:	91 70       	andi	r25, 0x01	; 1
    22c0:	92 2b       	or	r25, r18
    22c2:	9a b9       	out	0x0a, r25	; 10
		}							 
	/***************************************************************************************/
	/* Put data into buffer, sends the data */
		UDR = (u8)data;
    22c4:	8c b9       	out	0x0c, r24	; 12
	/****************************************/		
}
    22c6:	08 95       	ret

000022c8 <USART_Receive>:

u8 USART_Receive(u16 *Ptr_To_Val){
    22c8:	fc 01       	movw	r30, r24
	u8 local_ParityError =1 ;// 0 Means Error
	*Ptr_To_Val = 0x00;
    22ca:	11 82       	std	Z+1, r1	; 0x01
    22cc:	10 82       	st	Z, r1
	/* Wait for data to be received */
		while(IS_BIT_CLR(UCSRA,RXC));
    22ce:	5f 9b       	sbis	0x0b, 7	; 11
    22d0:	fe cf       	rjmp	.-4      	; 0x22ce <USART_Receive+0x6>
	/*******************************/
	/****************Check if parity error is not ON********/
		if (READ_BIT(UCSRA,PE) ==0){
    22d2:	5a 99       	sbic	0x0b, 2	; 11
    22d4:	1b c0       	rjmp	.+54     	; 0x230c <USART_Receive+0x44>
			/***********if the data to be recieved is 9 bits, get the MSB first*****************/
				if (OBJECT->Char_Size==USART_9_BIT_CHAR){		   	
    22d6:	a0 91 cd 00 	lds	r26, 0x00CD
    22da:	b0 91 ce 00 	lds	r27, 0x00CE
    22de:	14 96       	adiw	r26, 0x04	; 4
    22e0:	8c 91       	ld	r24, X
    22e2:	14 97       	sbiw	r26, 0x04	; 4
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	41 f4       	brne	.+16     	; 0x22f8 <USART_Receive+0x30>
					*Ptr_To_Val = (READ_BIT(UCSRB,RXB8)<<8);       
    22e8:	8a b1       	in	r24, 0x0a	; 10
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	82 70       	andi	r24, 0x02	; 2
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	95 95       	asr	r25
    22f2:	87 95       	ror	r24
    22f4:	10 82       	st	Z, r1
    22f6:	81 83       	std	Z+1, r24	; 0x01
				}												   
			/***********************************************************************************/
			/* Get and return received data from buffer */
				*Ptr_To_Val |=UDR;
    22f8:	2c b1       	in	r18, 0x0c	; 12
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	82 2b       	or	r24, r18
    2302:	93 2b       	or	r25, r19
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
				local_ParityError=0;
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	08 95       	ret
		UDR = (u8)data;
	/****************************************/		
}

u8 USART_Receive(u16 *Ptr_To_Val){
	u8 local_ParityError =1 ;// 0 Means Error
    230c:	81 e0       	ldi	r24, 0x01	; 1
			/* Get and return received data from buffer */
				*Ptr_To_Val |=UDR;
				local_ParityError=0;
		}
	return local_ParityError;
    230e:	08 95       	ret

00002310 <UART_vInit>:
 *  Author: Mahmoud Ayman
 */ 
#include "USART_MCAL.h"
#define F_CPU 8000000UL
#include <util/delay.h>
void UART_vInit(u32 baud){
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	u16 UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	aa 1f       	adc	r26, r26
    231a:	bb 1f       	adc	r27, r27
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	aa 1f       	adc	r26, r26
    2322:	bb 1f       	adc	r27, r27
    2324:	9c 01       	movw	r18, r24
    2326:	ad 01       	movw	r20, r26
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	44 1f       	adc	r20, r20
    232e:	55 1f       	adc	r21, r21
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	44 1f       	adc	r20, r20
    2336:	55 1f       	adc	r21, r21
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	72 e1       	ldi	r23, 0x12	; 18
    233c:	8a e7       	ldi	r24, 0x7A	; 122
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    2344:	21 50       	subi	r18, 0x01	; 1
    2346:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(u8)(UBRR>>8);
    2348:	30 bd       	out	0x20, r19	; 32
	UBRRL=(u8)UBRR;
    234a:	29 b9       	out	0x09, r18	; 9
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
    234c:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
    234e:	54 9a       	sbi	0x0a, 4	; 10
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    2350:	86 e8       	ldi	r24, 0x86	; 134
    2352:	80 bd       	out	0x20, r24	; 32
}
    2354:	08 95       	ret

00002356 <UART_vSendData>:
void UART_vSendData(u8 data){
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
    2356:	5d 9b       	sbis	0x0b, 5	; 11
    2358:	fe cf       	rjmp	.-4      	; 0x2356 <UART_vSendData>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
    235a:	8c b9       	out	0x0c, r24	; 12
}
    235c:	08 95       	ret

0000235e <UART_u8ReceiveData>:
u8 UART_u8ReceiveData(void){
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
    235e:	5f 9b       	sbis	0x0b, 7	; 11
    2360:	fe cf       	rjmp	.-4      	; 0x235e <UART_u8ReceiveData>
	/*Receive data from UDR receive buffer*/
	return UDR ;
    2362:	8c b1       	in	r24, 0x0c	; 12
} 
    2364:	08 95       	ret

00002366 <UART_vSendstring>:
void UART_vSendstring( u8 *ptr){ 
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
	while(*ptr!=0){
    236c:	88 81       	ld	r24, Y
    236e:	88 23       	and	r24, r24
    2370:	79 f0       	breq	.+30     	; 0x2390 <UART_vSendstring+0x2a>
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
	/*Receive data from UDR receive buffer*/
	return UDR ;
} 
void UART_vSendstring( u8 *ptr){ 
    2372:	21 96       	adiw	r28, 0x01	; 1
	while(*ptr!=0){
		UART_vSendData(*ptr);
    2374:	0e 94 ab 11 	call	0x2356	; 0x2356 <UART_vSendData>
    2378:	8f ef       	ldi	r24, 0xFF	; 255
    237a:	90 e7       	ldi	r25, 0x70	; 112
    237c:	a2 e0       	ldi	r26, 0x02	; 2
    237e:	81 50       	subi	r24, 0x01	; 1
    2380:	90 40       	sbci	r25, 0x00	; 0
    2382:	a0 40       	sbci	r26, 0x00	; 0
    2384:	e1 f7       	brne	.-8      	; 0x237e <UART_vSendstring+0x18>
    2386:	00 c0       	rjmp	.+0      	; 0x2388 <UART_vSendstring+0x22>
    2388:	00 00       	nop
	while(READ_BIT(UCSRA,RXC)==0);
	/*Receive data from UDR receive buffer*/
	return UDR ;
} 
void UART_vSendstring( u8 *ptr){ 
	while(*ptr!=0){
    238a:	89 91       	ld	r24, Y+
    238c:	88 23       	and	r24, r24
    238e:	91 f7       	brne	.-28     	; 0x2374 <UART_vSendstring+0xe>
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <__subsf3>:
    2396:	50 58       	subi	r21, 0x80	; 128

00002398 <__addsf3>:
    2398:	bb 27       	eor	r27, r27
    239a:	aa 27       	eor	r26, r26
    239c:	0e d0       	rcall	.+28     	; 0x23ba <__addsf3x>
    239e:	75 c1       	rjmp	.+746    	; 0x268a <__fp_round>
    23a0:	66 d1       	rcall	.+716    	; 0x266e <__fp_pscA>
    23a2:	30 f0       	brcs	.+12     	; 0x23b0 <__addsf3+0x18>
    23a4:	6b d1       	rcall	.+726    	; 0x267c <__fp_pscB>
    23a6:	20 f0       	brcs	.+8      	; 0x23b0 <__addsf3+0x18>
    23a8:	31 f4       	brne	.+12     	; 0x23b6 <__addsf3+0x1e>
    23aa:	9f 3f       	cpi	r25, 0xFF	; 255
    23ac:	11 f4       	brne	.+4      	; 0x23b2 <__addsf3+0x1a>
    23ae:	1e f4       	brtc	.+6      	; 0x23b6 <__addsf3+0x1e>
    23b0:	5b c1       	rjmp	.+694    	; 0x2668 <__fp_nan>
    23b2:	0e f4       	brtc	.+2      	; 0x23b6 <__addsf3+0x1e>
    23b4:	e0 95       	com	r30
    23b6:	e7 fb       	bst	r30, 7
    23b8:	51 c1       	rjmp	.+674    	; 0x265c <__fp_inf>

000023ba <__addsf3x>:
    23ba:	e9 2f       	mov	r30, r25
    23bc:	77 d1       	rcall	.+750    	; 0x26ac <__fp_split3>
    23be:	80 f3       	brcs	.-32     	; 0x23a0 <__addsf3+0x8>
    23c0:	ba 17       	cp	r27, r26
    23c2:	62 07       	cpc	r22, r18
    23c4:	73 07       	cpc	r23, r19
    23c6:	84 07       	cpc	r24, r20
    23c8:	95 07       	cpc	r25, r21
    23ca:	18 f0       	brcs	.+6      	; 0x23d2 <__addsf3x+0x18>
    23cc:	71 f4       	brne	.+28     	; 0x23ea <__addsf3x+0x30>
    23ce:	9e f5       	brtc	.+102    	; 0x2436 <__addsf3x+0x7c>
    23d0:	8f c1       	rjmp	.+798    	; 0x26f0 <__fp_zero>
    23d2:	0e f4       	brtc	.+2      	; 0x23d6 <__addsf3x+0x1c>
    23d4:	e0 95       	com	r30
    23d6:	0b 2e       	mov	r0, r27
    23d8:	ba 2f       	mov	r27, r26
    23da:	a0 2d       	mov	r26, r0
    23dc:	0b 01       	movw	r0, r22
    23de:	b9 01       	movw	r22, r18
    23e0:	90 01       	movw	r18, r0
    23e2:	0c 01       	movw	r0, r24
    23e4:	ca 01       	movw	r24, r20
    23e6:	a0 01       	movw	r20, r0
    23e8:	11 24       	eor	r1, r1
    23ea:	ff 27       	eor	r31, r31
    23ec:	59 1b       	sub	r21, r25
    23ee:	99 f0       	breq	.+38     	; 0x2416 <__addsf3x+0x5c>
    23f0:	59 3f       	cpi	r21, 0xF9	; 249
    23f2:	50 f4       	brcc	.+20     	; 0x2408 <__addsf3x+0x4e>
    23f4:	50 3e       	cpi	r21, 0xE0	; 224
    23f6:	68 f1       	brcs	.+90     	; 0x2452 <__addsf3x+0x98>
    23f8:	1a 16       	cp	r1, r26
    23fa:	f0 40       	sbci	r31, 0x00	; 0
    23fc:	a2 2f       	mov	r26, r18
    23fe:	23 2f       	mov	r18, r19
    2400:	34 2f       	mov	r19, r20
    2402:	44 27       	eor	r20, r20
    2404:	58 5f       	subi	r21, 0xF8	; 248
    2406:	f3 cf       	rjmp	.-26     	; 0x23ee <__addsf3x+0x34>
    2408:	46 95       	lsr	r20
    240a:	37 95       	ror	r19
    240c:	27 95       	ror	r18
    240e:	a7 95       	ror	r26
    2410:	f0 40       	sbci	r31, 0x00	; 0
    2412:	53 95       	inc	r21
    2414:	c9 f7       	brne	.-14     	; 0x2408 <__addsf3x+0x4e>
    2416:	7e f4       	brtc	.+30     	; 0x2436 <__addsf3x+0x7c>
    2418:	1f 16       	cp	r1, r31
    241a:	ba 0b       	sbc	r27, r26
    241c:	62 0b       	sbc	r22, r18
    241e:	73 0b       	sbc	r23, r19
    2420:	84 0b       	sbc	r24, r20
    2422:	ba f0       	brmi	.+46     	; 0x2452 <__addsf3x+0x98>
    2424:	91 50       	subi	r25, 0x01	; 1
    2426:	a1 f0       	breq	.+40     	; 0x2450 <__addsf3x+0x96>
    2428:	ff 0f       	add	r31, r31
    242a:	bb 1f       	adc	r27, r27
    242c:	66 1f       	adc	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	88 1f       	adc	r24, r24
    2432:	c2 f7       	brpl	.-16     	; 0x2424 <__addsf3x+0x6a>
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <__addsf3x+0x98>
    2436:	ba 0f       	add	r27, r26
    2438:	62 1f       	adc	r22, r18
    243a:	73 1f       	adc	r23, r19
    243c:	84 1f       	adc	r24, r20
    243e:	48 f4       	brcc	.+18     	; 0x2452 <__addsf3x+0x98>
    2440:	87 95       	ror	r24
    2442:	77 95       	ror	r23
    2444:	67 95       	ror	r22
    2446:	b7 95       	ror	r27
    2448:	f7 95       	ror	r31
    244a:	9e 3f       	cpi	r25, 0xFE	; 254
    244c:	08 f0       	brcs	.+2      	; 0x2450 <__addsf3x+0x96>
    244e:	b3 cf       	rjmp	.-154    	; 0x23b6 <__addsf3+0x1e>
    2450:	93 95       	inc	r25
    2452:	88 0f       	add	r24, r24
    2454:	08 f0       	brcs	.+2      	; 0x2458 <__addsf3x+0x9e>
    2456:	99 27       	eor	r25, r25
    2458:	ee 0f       	add	r30, r30
    245a:	97 95       	ror	r25
    245c:	87 95       	ror	r24
    245e:	08 95       	ret

00002460 <__cmpsf2>:
    2460:	d9 d0       	rcall	.+434    	; 0x2614 <__fp_cmp>
    2462:	08 f4       	brcc	.+2      	; 0x2466 <__cmpsf2+0x6>
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	08 95       	ret

00002468 <__divsf3>:
    2468:	0c d0       	rcall	.+24     	; 0x2482 <__divsf3x>
    246a:	0f c1       	rjmp	.+542    	; 0x268a <__fp_round>
    246c:	07 d1       	rcall	.+526    	; 0x267c <__fp_pscB>
    246e:	40 f0       	brcs	.+16     	; 0x2480 <__divsf3+0x18>
    2470:	fe d0       	rcall	.+508    	; 0x266e <__fp_pscA>
    2472:	30 f0       	brcs	.+12     	; 0x2480 <__divsf3+0x18>
    2474:	21 f4       	brne	.+8      	; 0x247e <__divsf3+0x16>
    2476:	5f 3f       	cpi	r21, 0xFF	; 255
    2478:	19 f0       	breq	.+6      	; 0x2480 <__divsf3+0x18>
    247a:	f0 c0       	rjmp	.+480    	; 0x265c <__fp_inf>
    247c:	51 11       	cpse	r21, r1
    247e:	39 c1       	rjmp	.+626    	; 0x26f2 <__fp_szero>
    2480:	f3 c0       	rjmp	.+486    	; 0x2668 <__fp_nan>

00002482 <__divsf3x>:
    2482:	14 d1       	rcall	.+552    	; 0x26ac <__fp_split3>
    2484:	98 f3       	brcs	.-26     	; 0x246c <__divsf3+0x4>

00002486 <__divsf3_pse>:
    2486:	99 23       	and	r25, r25
    2488:	c9 f3       	breq	.-14     	; 0x247c <__divsf3+0x14>
    248a:	55 23       	and	r21, r21
    248c:	b1 f3       	breq	.-20     	; 0x247a <__divsf3+0x12>
    248e:	95 1b       	sub	r25, r21
    2490:	55 0b       	sbc	r21, r21
    2492:	bb 27       	eor	r27, r27
    2494:	aa 27       	eor	r26, r26
    2496:	62 17       	cp	r22, r18
    2498:	73 07       	cpc	r23, r19
    249a:	84 07       	cpc	r24, r20
    249c:	38 f0       	brcs	.+14     	; 0x24ac <__divsf3_pse+0x26>
    249e:	9f 5f       	subi	r25, 0xFF	; 255
    24a0:	5f 4f       	sbci	r21, 0xFF	; 255
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	44 1f       	adc	r20, r20
    24a8:	aa 1f       	adc	r26, r26
    24aa:	a9 f3       	breq	.-22     	; 0x2496 <__divsf3_pse+0x10>
    24ac:	33 d0       	rcall	.+102    	; 0x2514 <__divsf3_pse+0x8e>
    24ae:	0e 2e       	mov	r0, r30
    24b0:	3a f0       	brmi	.+14     	; 0x24c0 <__divsf3_pse+0x3a>
    24b2:	e0 e8       	ldi	r30, 0x80	; 128
    24b4:	30 d0       	rcall	.+96     	; 0x2516 <__divsf3_pse+0x90>
    24b6:	91 50       	subi	r25, 0x01	; 1
    24b8:	50 40       	sbci	r21, 0x00	; 0
    24ba:	e6 95       	lsr	r30
    24bc:	00 1c       	adc	r0, r0
    24be:	ca f7       	brpl	.-14     	; 0x24b2 <__divsf3_pse+0x2c>
    24c0:	29 d0       	rcall	.+82     	; 0x2514 <__divsf3_pse+0x8e>
    24c2:	fe 2f       	mov	r31, r30
    24c4:	27 d0       	rcall	.+78     	; 0x2514 <__divsf3_pse+0x8e>
    24c6:	66 0f       	add	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	88 1f       	adc	r24, r24
    24cc:	bb 1f       	adc	r27, r27
    24ce:	26 17       	cp	r18, r22
    24d0:	37 07       	cpc	r19, r23
    24d2:	48 07       	cpc	r20, r24
    24d4:	ab 07       	cpc	r26, r27
    24d6:	b0 e8       	ldi	r27, 0x80	; 128
    24d8:	09 f0       	breq	.+2      	; 0x24dc <__divsf3_pse+0x56>
    24da:	bb 0b       	sbc	r27, r27
    24dc:	80 2d       	mov	r24, r0
    24de:	bf 01       	movw	r22, r30
    24e0:	ff 27       	eor	r31, r31
    24e2:	93 58       	subi	r25, 0x83	; 131
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	2a f0       	brmi	.+10     	; 0x24f2 <__divsf3_pse+0x6c>
    24e8:	9e 3f       	cpi	r25, 0xFE	; 254
    24ea:	51 05       	cpc	r21, r1
    24ec:	68 f0       	brcs	.+26     	; 0x2508 <__divsf3_pse+0x82>
    24ee:	b6 c0       	rjmp	.+364    	; 0x265c <__fp_inf>
    24f0:	00 c1       	rjmp	.+512    	; 0x26f2 <__fp_szero>
    24f2:	5f 3f       	cpi	r21, 0xFF	; 255
    24f4:	ec f3       	brlt	.-6      	; 0x24f0 <__divsf3_pse+0x6a>
    24f6:	98 3e       	cpi	r25, 0xE8	; 232
    24f8:	dc f3       	brlt	.-10     	; 0x24f0 <__divsf3_pse+0x6a>
    24fa:	86 95       	lsr	r24
    24fc:	77 95       	ror	r23
    24fe:	67 95       	ror	r22
    2500:	b7 95       	ror	r27
    2502:	f7 95       	ror	r31
    2504:	9f 5f       	subi	r25, 0xFF	; 255
    2506:	c9 f7       	brne	.-14     	; 0x24fa <__divsf3_pse+0x74>
    2508:	88 0f       	add	r24, r24
    250a:	91 1d       	adc	r25, r1
    250c:	96 95       	lsr	r25
    250e:	87 95       	ror	r24
    2510:	97 f9       	bld	r25, 7
    2512:	08 95       	ret
    2514:	e1 e0       	ldi	r30, 0x01	; 1
    2516:	66 0f       	add	r22, r22
    2518:	77 1f       	adc	r23, r23
    251a:	88 1f       	adc	r24, r24
    251c:	bb 1f       	adc	r27, r27
    251e:	62 17       	cp	r22, r18
    2520:	73 07       	cpc	r23, r19
    2522:	84 07       	cpc	r24, r20
    2524:	ba 07       	cpc	r27, r26
    2526:	20 f0       	brcs	.+8      	; 0x2530 <__divsf3_pse+0xaa>
    2528:	62 1b       	sub	r22, r18
    252a:	73 0b       	sbc	r23, r19
    252c:	84 0b       	sbc	r24, r20
    252e:	ba 0b       	sbc	r27, r26
    2530:	ee 1f       	adc	r30, r30
    2532:	88 f7       	brcc	.-30     	; 0x2516 <__divsf3_pse+0x90>
    2534:	e0 95       	com	r30
    2536:	08 95       	ret

00002538 <__fixsfsi>:
    2538:	04 d0       	rcall	.+8      	; 0x2542 <__fixunssfsi>
    253a:	68 94       	set
    253c:	b1 11       	cpse	r27, r1
    253e:	d9 c0       	rjmp	.+434    	; 0x26f2 <__fp_szero>
    2540:	08 95       	ret

00002542 <__fixunssfsi>:
    2542:	bc d0       	rcall	.+376    	; 0x26bc <__fp_splitA>
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__fixunssfsi+0x26>
    2546:	9f 57       	subi	r25, 0x7F	; 127
    2548:	90 f0       	brcs	.+36     	; 0x256e <__fixunssfsi+0x2c>
    254a:	b9 2f       	mov	r27, r25
    254c:	99 27       	eor	r25, r25
    254e:	b7 51       	subi	r27, 0x17	; 23
    2550:	a0 f0       	brcs	.+40     	; 0x257a <__fixunssfsi+0x38>
    2552:	d1 f0       	breq	.+52     	; 0x2588 <__fixunssfsi+0x46>
    2554:	66 0f       	add	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	1a f0       	brmi	.+6      	; 0x2564 <__fixunssfsi+0x22>
    255e:	ba 95       	dec	r27
    2560:	c9 f7       	brne	.-14     	; 0x2554 <__fixunssfsi+0x12>
    2562:	12 c0       	rjmp	.+36     	; 0x2588 <__fixunssfsi+0x46>
    2564:	b1 30       	cpi	r27, 0x01	; 1
    2566:	81 f0       	breq	.+32     	; 0x2588 <__fixunssfsi+0x46>
    2568:	c3 d0       	rcall	.+390    	; 0x26f0 <__fp_zero>
    256a:	b1 e0       	ldi	r27, 0x01	; 1
    256c:	08 95       	ret
    256e:	c0 c0       	rjmp	.+384    	; 0x26f0 <__fp_zero>
    2570:	67 2f       	mov	r22, r23
    2572:	78 2f       	mov	r23, r24
    2574:	88 27       	eor	r24, r24
    2576:	b8 5f       	subi	r27, 0xF8	; 248
    2578:	39 f0       	breq	.+14     	; 0x2588 <__fixunssfsi+0x46>
    257a:	b9 3f       	cpi	r27, 0xF9	; 249
    257c:	cc f3       	brlt	.-14     	; 0x2570 <__fixunssfsi+0x2e>
    257e:	86 95       	lsr	r24
    2580:	77 95       	ror	r23
    2582:	67 95       	ror	r22
    2584:	b3 95       	inc	r27
    2586:	d9 f7       	brne	.-10     	; 0x257e <__fixunssfsi+0x3c>
    2588:	3e f4       	brtc	.+14     	; 0x2598 <__fixunssfsi+0x56>
    258a:	90 95       	com	r25
    258c:	80 95       	com	r24
    258e:	70 95       	com	r23
    2590:	61 95       	neg	r22
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	8f 4f       	sbci	r24, 0xFF	; 255
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	08 95       	ret

0000259a <__floatunsisf>:
    259a:	e8 94       	clt
    259c:	09 c0       	rjmp	.+18     	; 0x25b0 <__floatsisf+0x12>

0000259e <__floatsisf>:
    259e:	97 fb       	bst	r25, 7
    25a0:	3e f4       	brtc	.+14     	; 0x25b0 <__floatsisf+0x12>
    25a2:	90 95       	com	r25
    25a4:	80 95       	com	r24
    25a6:	70 95       	com	r23
    25a8:	61 95       	neg	r22
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	8f 4f       	sbci	r24, 0xFF	; 255
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	99 23       	and	r25, r25
    25b2:	a9 f0       	breq	.+42     	; 0x25de <__floatsisf+0x40>
    25b4:	f9 2f       	mov	r31, r25
    25b6:	96 e9       	ldi	r25, 0x96	; 150
    25b8:	bb 27       	eor	r27, r27
    25ba:	93 95       	inc	r25
    25bc:	f6 95       	lsr	r31
    25be:	87 95       	ror	r24
    25c0:	77 95       	ror	r23
    25c2:	67 95       	ror	r22
    25c4:	b7 95       	ror	r27
    25c6:	f1 11       	cpse	r31, r1
    25c8:	f8 cf       	rjmp	.-16     	; 0x25ba <__floatsisf+0x1c>
    25ca:	fa f4       	brpl	.+62     	; 0x260a <__floatsisf+0x6c>
    25cc:	bb 0f       	add	r27, r27
    25ce:	11 f4       	brne	.+4      	; 0x25d4 <__floatsisf+0x36>
    25d0:	60 ff       	sbrs	r22, 0
    25d2:	1b c0       	rjmp	.+54     	; 0x260a <__floatsisf+0x6c>
    25d4:	6f 5f       	subi	r22, 0xFF	; 255
    25d6:	7f 4f       	sbci	r23, 0xFF	; 255
    25d8:	8f 4f       	sbci	r24, 0xFF	; 255
    25da:	9f 4f       	sbci	r25, 0xFF	; 255
    25dc:	16 c0       	rjmp	.+44     	; 0x260a <__floatsisf+0x6c>
    25de:	88 23       	and	r24, r24
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <__floatsisf+0x48>
    25e2:	96 e9       	ldi	r25, 0x96	; 150
    25e4:	11 c0       	rjmp	.+34     	; 0x2608 <__floatsisf+0x6a>
    25e6:	77 23       	and	r23, r23
    25e8:	21 f0       	breq	.+8      	; 0x25f2 <__floatsisf+0x54>
    25ea:	9e e8       	ldi	r25, 0x8E	; 142
    25ec:	87 2f       	mov	r24, r23
    25ee:	76 2f       	mov	r23, r22
    25f0:	05 c0       	rjmp	.+10     	; 0x25fc <__floatsisf+0x5e>
    25f2:	66 23       	and	r22, r22
    25f4:	71 f0       	breq	.+28     	; 0x2612 <__floatsisf+0x74>
    25f6:	96 e8       	ldi	r25, 0x86	; 134
    25f8:	86 2f       	mov	r24, r22
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	2a f0       	brmi	.+10     	; 0x260a <__floatsisf+0x6c>
    2600:	9a 95       	dec	r25
    2602:	66 0f       	add	r22, r22
    2604:	77 1f       	adc	r23, r23
    2606:	88 1f       	adc	r24, r24
    2608:	da f7       	brpl	.-10     	; 0x2600 <__floatsisf+0x62>
    260a:	88 0f       	add	r24, r24
    260c:	96 95       	lsr	r25
    260e:	87 95       	ror	r24
    2610:	97 f9       	bld	r25, 7
    2612:	08 95       	ret

00002614 <__fp_cmp>:
    2614:	99 0f       	add	r25, r25
    2616:	00 08       	sbc	r0, r0
    2618:	55 0f       	add	r21, r21
    261a:	aa 0b       	sbc	r26, r26
    261c:	e0 e8       	ldi	r30, 0x80	; 128
    261e:	fe ef       	ldi	r31, 0xFE	; 254
    2620:	16 16       	cp	r1, r22
    2622:	17 06       	cpc	r1, r23
    2624:	e8 07       	cpc	r30, r24
    2626:	f9 07       	cpc	r31, r25
    2628:	c0 f0       	brcs	.+48     	; 0x265a <__fp_cmp+0x46>
    262a:	12 16       	cp	r1, r18
    262c:	13 06       	cpc	r1, r19
    262e:	e4 07       	cpc	r30, r20
    2630:	f5 07       	cpc	r31, r21
    2632:	98 f0       	brcs	.+38     	; 0x265a <__fp_cmp+0x46>
    2634:	62 1b       	sub	r22, r18
    2636:	73 0b       	sbc	r23, r19
    2638:	84 0b       	sbc	r24, r20
    263a:	95 0b       	sbc	r25, r21
    263c:	39 f4       	brne	.+14     	; 0x264c <__fp_cmp+0x38>
    263e:	0a 26       	eor	r0, r26
    2640:	61 f0       	breq	.+24     	; 0x265a <__fp_cmp+0x46>
    2642:	23 2b       	or	r18, r19
    2644:	24 2b       	or	r18, r20
    2646:	25 2b       	or	r18, r21
    2648:	21 f4       	brne	.+8      	; 0x2652 <__fp_cmp+0x3e>
    264a:	08 95       	ret
    264c:	0a 26       	eor	r0, r26
    264e:	09 f4       	brne	.+2      	; 0x2652 <__fp_cmp+0x3e>
    2650:	a1 40       	sbci	r26, 0x01	; 1
    2652:	a6 95       	lsr	r26
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	81 1d       	adc	r24, r1
    2658:	81 1d       	adc	r24, r1
    265a:	08 95       	ret

0000265c <__fp_inf>:
    265c:	97 f9       	bld	r25, 7
    265e:	9f 67       	ori	r25, 0x7F	; 127
    2660:	80 e8       	ldi	r24, 0x80	; 128
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	08 95       	ret

00002668 <__fp_nan>:
    2668:	9f ef       	ldi	r25, 0xFF	; 255
    266a:	80 ec       	ldi	r24, 0xC0	; 192
    266c:	08 95       	ret

0000266e <__fp_pscA>:
    266e:	00 24       	eor	r0, r0
    2670:	0a 94       	dec	r0
    2672:	16 16       	cp	r1, r22
    2674:	17 06       	cpc	r1, r23
    2676:	18 06       	cpc	r1, r24
    2678:	09 06       	cpc	r0, r25
    267a:	08 95       	ret

0000267c <__fp_pscB>:
    267c:	00 24       	eor	r0, r0
    267e:	0a 94       	dec	r0
    2680:	12 16       	cp	r1, r18
    2682:	13 06       	cpc	r1, r19
    2684:	14 06       	cpc	r1, r20
    2686:	05 06       	cpc	r0, r21
    2688:	08 95       	ret

0000268a <__fp_round>:
    268a:	09 2e       	mov	r0, r25
    268c:	03 94       	inc	r0
    268e:	00 0c       	add	r0, r0
    2690:	11 f4       	brne	.+4      	; 0x2696 <__fp_round+0xc>
    2692:	88 23       	and	r24, r24
    2694:	52 f0       	brmi	.+20     	; 0x26aa <__fp_round+0x20>
    2696:	bb 0f       	add	r27, r27
    2698:	40 f4       	brcc	.+16     	; 0x26aa <__fp_round+0x20>
    269a:	bf 2b       	or	r27, r31
    269c:	11 f4       	brne	.+4      	; 0x26a2 <__fp_round+0x18>
    269e:	60 ff       	sbrs	r22, 0
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <__fp_round+0x20>
    26a2:	6f 5f       	subi	r22, 0xFF	; 255
    26a4:	7f 4f       	sbci	r23, 0xFF	; 255
    26a6:	8f 4f       	sbci	r24, 0xFF	; 255
    26a8:	9f 4f       	sbci	r25, 0xFF	; 255
    26aa:	08 95       	ret

000026ac <__fp_split3>:
    26ac:	57 fd       	sbrc	r21, 7
    26ae:	90 58       	subi	r25, 0x80	; 128
    26b0:	44 0f       	add	r20, r20
    26b2:	55 1f       	adc	r21, r21
    26b4:	59 f0       	breq	.+22     	; 0x26cc <__fp_splitA+0x10>
    26b6:	5f 3f       	cpi	r21, 0xFF	; 255
    26b8:	71 f0       	breq	.+28     	; 0x26d6 <__fp_splitA+0x1a>
    26ba:	47 95       	ror	r20

000026bc <__fp_splitA>:
    26bc:	88 0f       	add	r24, r24
    26be:	97 fb       	bst	r25, 7
    26c0:	99 1f       	adc	r25, r25
    26c2:	61 f0       	breq	.+24     	; 0x26dc <__fp_splitA+0x20>
    26c4:	9f 3f       	cpi	r25, 0xFF	; 255
    26c6:	79 f0       	breq	.+30     	; 0x26e6 <__fp_splitA+0x2a>
    26c8:	87 95       	ror	r24
    26ca:	08 95       	ret
    26cc:	12 16       	cp	r1, r18
    26ce:	13 06       	cpc	r1, r19
    26d0:	14 06       	cpc	r1, r20
    26d2:	55 1f       	adc	r21, r21
    26d4:	f2 cf       	rjmp	.-28     	; 0x26ba <__fp_split3+0xe>
    26d6:	46 95       	lsr	r20
    26d8:	f1 df       	rcall	.-30     	; 0x26bc <__fp_splitA>
    26da:	08 c0       	rjmp	.+16     	; 0x26ec <__fp_splitA+0x30>
    26dc:	16 16       	cp	r1, r22
    26de:	17 06       	cpc	r1, r23
    26e0:	18 06       	cpc	r1, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	f1 cf       	rjmp	.-30     	; 0x26c8 <__fp_splitA+0xc>
    26e6:	86 95       	lsr	r24
    26e8:	71 05       	cpc	r23, r1
    26ea:	61 05       	cpc	r22, r1
    26ec:	08 94       	sec
    26ee:	08 95       	ret

000026f0 <__fp_zero>:
    26f0:	e8 94       	clt

000026f2 <__fp_szero>:
    26f2:	bb 27       	eor	r27, r27
    26f4:	66 27       	eor	r22, r22
    26f6:	77 27       	eor	r23, r23
    26f8:	cb 01       	movw	r24, r22
    26fa:	97 f9       	bld	r25, 7
    26fc:	08 95       	ret

000026fe <__mulsf3>:
    26fe:	0b d0       	rcall	.+22     	; 0x2716 <__mulsf3x>
    2700:	c4 cf       	rjmp	.-120    	; 0x268a <__fp_round>
    2702:	b5 df       	rcall	.-150    	; 0x266e <__fp_pscA>
    2704:	28 f0       	brcs	.+10     	; 0x2710 <__mulsf3+0x12>
    2706:	ba df       	rcall	.-140    	; 0x267c <__fp_pscB>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <__mulsf3+0x12>
    270a:	95 23       	and	r25, r21
    270c:	09 f0       	breq	.+2      	; 0x2710 <__mulsf3+0x12>
    270e:	a6 cf       	rjmp	.-180    	; 0x265c <__fp_inf>
    2710:	ab cf       	rjmp	.-170    	; 0x2668 <__fp_nan>
    2712:	11 24       	eor	r1, r1
    2714:	ee cf       	rjmp	.-36     	; 0x26f2 <__fp_szero>

00002716 <__mulsf3x>:
    2716:	ca df       	rcall	.-108    	; 0x26ac <__fp_split3>
    2718:	a0 f3       	brcs	.-24     	; 0x2702 <__mulsf3+0x4>

0000271a <__mulsf3_pse>:
    271a:	95 9f       	mul	r25, r21
    271c:	d1 f3       	breq	.-12     	; 0x2712 <__mulsf3+0x14>
    271e:	95 0f       	add	r25, r21
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	55 1f       	adc	r21, r21
    2724:	62 9f       	mul	r22, r18
    2726:	f0 01       	movw	r30, r0
    2728:	72 9f       	mul	r23, r18
    272a:	bb 27       	eor	r27, r27
    272c:	f0 0d       	add	r31, r0
    272e:	b1 1d       	adc	r27, r1
    2730:	63 9f       	mul	r22, r19
    2732:	aa 27       	eor	r26, r26
    2734:	f0 0d       	add	r31, r0
    2736:	b1 1d       	adc	r27, r1
    2738:	aa 1f       	adc	r26, r26
    273a:	64 9f       	mul	r22, r20
    273c:	66 27       	eor	r22, r22
    273e:	b0 0d       	add	r27, r0
    2740:	a1 1d       	adc	r26, r1
    2742:	66 1f       	adc	r22, r22
    2744:	82 9f       	mul	r24, r18
    2746:	22 27       	eor	r18, r18
    2748:	b0 0d       	add	r27, r0
    274a:	a1 1d       	adc	r26, r1
    274c:	62 1f       	adc	r22, r18
    274e:	73 9f       	mul	r23, r19
    2750:	b0 0d       	add	r27, r0
    2752:	a1 1d       	adc	r26, r1
    2754:	62 1f       	adc	r22, r18
    2756:	83 9f       	mul	r24, r19
    2758:	a0 0d       	add	r26, r0
    275a:	61 1d       	adc	r22, r1
    275c:	22 1f       	adc	r18, r18
    275e:	74 9f       	mul	r23, r20
    2760:	33 27       	eor	r19, r19
    2762:	a0 0d       	add	r26, r0
    2764:	61 1d       	adc	r22, r1
    2766:	23 1f       	adc	r18, r19
    2768:	84 9f       	mul	r24, r20
    276a:	60 0d       	add	r22, r0
    276c:	21 1d       	adc	r18, r1
    276e:	82 2f       	mov	r24, r18
    2770:	76 2f       	mov	r23, r22
    2772:	6a 2f       	mov	r22, r26
    2774:	11 24       	eor	r1, r1
    2776:	9f 57       	subi	r25, 0x7F	; 127
    2778:	50 40       	sbci	r21, 0x00	; 0
    277a:	8a f0       	brmi	.+34     	; 0x279e <__mulsf3_pse+0x84>
    277c:	e1 f0       	breq	.+56     	; 0x27b6 <__mulsf3_pse+0x9c>
    277e:	88 23       	and	r24, r24
    2780:	4a f0       	brmi	.+18     	; 0x2794 <__mulsf3_pse+0x7a>
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	bb 1f       	adc	r27, r27
    2788:	66 1f       	adc	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	88 1f       	adc	r24, r24
    278e:	91 50       	subi	r25, 0x01	; 1
    2790:	50 40       	sbci	r21, 0x00	; 0
    2792:	a9 f7       	brne	.-22     	; 0x277e <__mulsf3_pse+0x64>
    2794:	9e 3f       	cpi	r25, 0xFE	; 254
    2796:	51 05       	cpc	r21, r1
    2798:	70 f0       	brcs	.+28     	; 0x27b6 <__mulsf3_pse+0x9c>
    279a:	60 cf       	rjmp	.-320    	; 0x265c <__fp_inf>
    279c:	aa cf       	rjmp	.-172    	; 0x26f2 <__fp_szero>
    279e:	5f 3f       	cpi	r21, 0xFF	; 255
    27a0:	ec f3       	brlt	.-6      	; 0x279c <__mulsf3_pse+0x82>
    27a2:	98 3e       	cpi	r25, 0xE8	; 232
    27a4:	dc f3       	brlt	.-10     	; 0x279c <__mulsf3_pse+0x82>
    27a6:	86 95       	lsr	r24
    27a8:	77 95       	ror	r23
    27aa:	67 95       	ror	r22
    27ac:	b7 95       	ror	r27
    27ae:	f7 95       	ror	r31
    27b0:	e7 95       	ror	r30
    27b2:	9f 5f       	subi	r25, 0xFF	; 255
    27b4:	c1 f7       	brne	.-16     	; 0x27a6 <__mulsf3_pse+0x8c>
    27b6:	fe 2b       	or	r31, r30
    27b8:	88 0f       	add	r24, r24
    27ba:	91 1d       	adc	r25, r1
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
    27c0:	97 f9       	bld	r25, 7
    27c2:	08 95       	ret

000027c4 <__divmodhi4>:
    27c4:	97 fb       	bst	r25, 7
    27c6:	09 2e       	mov	r0, r25
    27c8:	07 26       	eor	r0, r23
    27ca:	0a d0       	rcall	.+20     	; 0x27e0 <__divmodhi4_neg1>
    27cc:	77 fd       	sbrc	r23, 7
    27ce:	04 d0       	rcall	.+8      	; 0x27d8 <__divmodhi4_neg2>
    27d0:	2e d0       	rcall	.+92     	; 0x282e <__udivmodhi4>
    27d2:	06 d0       	rcall	.+12     	; 0x27e0 <__divmodhi4_neg1>
    27d4:	00 20       	and	r0, r0
    27d6:	1a f4       	brpl	.+6      	; 0x27de <__divmodhi4_exit>

000027d8 <__divmodhi4_neg2>:
    27d8:	70 95       	com	r23
    27da:	61 95       	neg	r22
    27dc:	7f 4f       	sbci	r23, 0xFF	; 255

000027de <__divmodhi4_exit>:
    27de:	08 95       	ret

000027e0 <__divmodhi4_neg1>:
    27e0:	f6 f7       	brtc	.-4      	; 0x27de <__divmodhi4_exit>
    27e2:	90 95       	com	r25
    27e4:	81 95       	neg	r24
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	08 95       	ret

000027ea <__udivmodsi4>:
    27ea:	a1 e2       	ldi	r26, 0x21	; 33
    27ec:	1a 2e       	mov	r1, r26
    27ee:	aa 1b       	sub	r26, r26
    27f0:	bb 1b       	sub	r27, r27
    27f2:	fd 01       	movw	r30, r26
    27f4:	0d c0       	rjmp	.+26     	; 0x2810 <__udivmodsi4_ep>

000027f6 <__udivmodsi4_loop>:
    27f6:	aa 1f       	adc	r26, r26
    27f8:	bb 1f       	adc	r27, r27
    27fa:	ee 1f       	adc	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	a2 17       	cp	r26, r18
    2800:	b3 07       	cpc	r27, r19
    2802:	e4 07       	cpc	r30, r20
    2804:	f5 07       	cpc	r31, r21
    2806:	20 f0       	brcs	.+8      	; 0x2810 <__udivmodsi4_ep>
    2808:	a2 1b       	sub	r26, r18
    280a:	b3 0b       	sbc	r27, r19
    280c:	e4 0b       	sbc	r30, r20
    280e:	f5 0b       	sbc	r31, r21

00002810 <__udivmodsi4_ep>:
    2810:	66 1f       	adc	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	1a 94       	dec	r1
    281a:	69 f7       	brne	.-38     	; 0x27f6 <__udivmodsi4_loop>
    281c:	60 95       	com	r22
    281e:	70 95       	com	r23
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	9b 01       	movw	r18, r22
    2826:	ac 01       	movw	r20, r24
    2828:	bd 01       	movw	r22, r26
    282a:	cf 01       	movw	r24, r30
    282c:	08 95       	ret

0000282e <__udivmodhi4>:
    282e:	aa 1b       	sub	r26, r26
    2830:	bb 1b       	sub	r27, r27
    2832:	51 e1       	ldi	r21, 0x11	; 17
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <__udivmodhi4_ep>

00002836 <__udivmodhi4_loop>:
    2836:	aa 1f       	adc	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	a6 17       	cp	r26, r22
    283c:	b7 07       	cpc	r27, r23
    283e:	10 f0       	brcs	.+4      	; 0x2844 <__udivmodhi4_ep>
    2840:	a6 1b       	sub	r26, r22
    2842:	b7 0b       	sbc	r27, r23

00002844 <__udivmodhi4_ep>:
    2844:	88 1f       	adc	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	5a 95       	dec	r21
    284a:	a9 f7       	brne	.-22     	; 0x2836 <__udivmodhi4_loop>
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	08 95       	ret

00002856 <sprintf>:
    2856:	ae e0       	ldi	r26, 0x0E	; 14
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e1 e3       	ldi	r30, 0x31	; 49
    285c:	f4 e1       	ldi	r31, 0x14	; 20
    285e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__+0x1c>
    2862:	0d 89       	ldd	r16, Y+21	; 0x15
    2864:	1e 89       	ldd	r17, Y+22	; 0x16
    2866:	86 e0       	ldi	r24, 0x06	; 6
    2868:	8c 83       	std	Y+4, r24	; 0x04
    286a:	1a 83       	std	Y+2, r17	; 0x02
    286c:	09 83       	std	Y+1, r16	; 0x01
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	9f e7       	ldi	r25, 0x7F	; 127
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	ae 01       	movw	r20, r28
    2878:	47 5e       	subi	r20, 0xE7	; 231
    287a:	5f 4f       	sbci	r21, 0xFF	; 255
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	6f 89       	ldd	r22, Y+23	; 0x17
    2882:	78 8d       	ldd	r23, Y+24	; 0x18
    2884:	0e 94 4d 14 	call	0x289a	; 0x289a <vfprintf>
    2888:	ef 81       	ldd	r30, Y+7	; 0x07
    288a:	f8 85       	ldd	r31, Y+8	; 0x08
    288c:	e0 0f       	add	r30, r16
    288e:	f1 1f       	adc	r31, r17
    2890:	10 82       	st	Z, r1
    2892:	2e 96       	adiw	r28, 0x0e	; 14
    2894:	e4 e0       	ldi	r30, 0x04	; 4
    2896:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__+0x1c>

0000289a <vfprintf>:
    289a:	ad e0       	ldi	r26, 0x0D	; 13
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e3 e5       	ldi	r30, 0x53	; 83
    28a0:	f4 e1       	ldi	r31, 0x14	; 20
    28a2:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__prologue_saves__>
    28a6:	3c 01       	movw	r6, r24
    28a8:	7d 87       	std	Y+13, r23	; 0x0d
    28aa:	6c 87       	std	Y+12, r22	; 0x0c
    28ac:	5a 01       	movw	r10, r20
    28ae:	fc 01       	movw	r30, r24
    28b0:	17 82       	std	Z+7, r1	; 0x07
    28b2:	16 82       	std	Z+6, r1	; 0x06
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	81 ff       	sbrs	r24, 1
    28b8:	c8 c1       	rjmp	.+912    	; 0x2c4a <vfprintf+0x3b0>
    28ba:	2e 01       	movw	r4, r28
    28bc:	08 94       	sec
    28be:	41 1c       	adc	r4, r1
    28c0:	51 1c       	adc	r5, r1
    28c2:	f3 01       	movw	r30, r6
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    28c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    28ca:	93 fd       	sbrc	r25, 3
    28cc:	85 91       	lpm	r24, Z+
    28ce:	93 ff       	sbrs	r25, 3
    28d0:	81 91       	ld	r24, Z+
    28d2:	fd 87       	std	Y+13, r31	; 0x0d
    28d4:	ec 87       	std	Y+12, r30	; 0x0c
    28d6:	88 23       	and	r24, r24
    28d8:	09 f4       	brne	.+2      	; 0x28dc <vfprintf+0x42>
    28da:	b3 c1       	rjmp	.+870    	; 0x2c42 <vfprintf+0x3a8>
    28dc:	85 32       	cpi	r24, 0x25	; 37
    28de:	41 f4       	brne	.+16     	; 0x28f0 <vfprintf+0x56>
    28e0:	93 fd       	sbrc	r25, 3
    28e2:	85 91       	lpm	r24, Z+
    28e4:	93 ff       	sbrs	r25, 3
    28e6:	81 91       	ld	r24, Z+
    28e8:	fd 87       	std	Y+13, r31	; 0x0d
    28ea:	ec 87       	std	Y+12, r30	; 0x0c
    28ec:	85 32       	cpi	r24, 0x25	; 37
    28ee:	29 f4       	brne	.+10     	; 0x28fa <vfprintf+0x60>
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	b3 01       	movw	r22, r6
    28f4:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    28f8:	e4 cf       	rjmp	.-56     	; 0x28c2 <vfprintf+0x28>
    28fa:	ff 24       	eor	r15, r15
    28fc:	ee 24       	eor	r14, r14
    28fe:	10 e0       	ldi	r17, 0x00	; 0
    2900:	10 32       	cpi	r17, 0x20	; 32
    2902:	b0 f4       	brcc	.+44     	; 0x2930 <vfprintf+0x96>
    2904:	8b 32       	cpi	r24, 0x2B	; 43
    2906:	69 f0       	breq	.+26     	; 0x2922 <vfprintf+0x88>
    2908:	8c 32       	cpi	r24, 0x2C	; 44
    290a:	28 f4       	brcc	.+10     	; 0x2916 <vfprintf+0x7c>
    290c:	80 32       	cpi	r24, 0x20	; 32
    290e:	51 f0       	breq	.+20     	; 0x2924 <vfprintf+0x8a>
    2910:	83 32       	cpi	r24, 0x23	; 35
    2912:	71 f4       	brne	.+28     	; 0x2930 <vfprintf+0x96>
    2914:	0b c0       	rjmp	.+22     	; 0x292c <vfprintf+0x92>
    2916:	8d 32       	cpi	r24, 0x2D	; 45
    2918:	39 f0       	breq	.+14     	; 0x2928 <vfprintf+0x8e>
    291a:	80 33       	cpi	r24, 0x30	; 48
    291c:	49 f4       	brne	.+18     	; 0x2930 <vfprintf+0x96>
    291e:	11 60       	ori	r17, 0x01	; 1
    2920:	2c c0       	rjmp	.+88     	; 0x297a <vfprintf+0xe0>
    2922:	12 60       	ori	r17, 0x02	; 2
    2924:	14 60       	ori	r17, 0x04	; 4
    2926:	29 c0       	rjmp	.+82     	; 0x297a <vfprintf+0xe0>
    2928:	18 60       	ori	r17, 0x08	; 8
    292a:	27 c0       	rjmp	.+78     	; 0x297a <vfprintf+0xe0>
    292c:	10 61       	ori	r17, 0x10	; 16
    292e:	25 c0       	rjmp	.+74     	; 0x297a <vfprintf+0xe0>
    2930:	17 fd       	sbrc	r17, 7
    2932:	2e c0       	rjmp	.+92     	; 0x2990 <vfprintf+0xf6>
    2934:	28 2f       	mov	r18, r24
    2936:	20 53       	subi	r18, 0x30	; 48
    2938:	2a 30       	cpi	r18, 0x0A	; 10
    293a:	98 f4       	brcc	.+38     	; 0x2962 <vfprintf+0xc8>
    293c:	16 ff       	sbrs	r17, 6
    293e:	08 c0       	rjmp	.+16     	; 0x2950 <vfprintf+0xb6>
    2940:	8f 2d       	mov	r24, r15
    2942:	88 0f       	add	r24, r24
    2944:	f8 2e       	mov	r15, r24
    2946:	ff 0c       	add	r15, r15
    2948:	ff 0c       	add	r15, r15
    294a:	f8 0e       	add	r15, r24
    294c:	f2 0e       	add	r15, r18
    294e:	15 c0       	rjmp	.+42     	; 0x297a <vfprintf+0xe0>
    2950:	8e 2d       	mov	r24, r14
    2952:	88 0f       	add	r24, r24
    2954:	e8 2e       	mov	r14, r24
    2956:	ee 0c       	add	r14, r14
    2958:	ee 0c       	add	r14, r14
    295a:	e8 0e       	add	r14, r24
    295c:	e2 0e       	add	r14, r18
    295e:	10 62       	ori	r17, 0x20	; 32
    2960:	0c c0       	rjmp	.+24     	; 0x297a <vfprintf+0xe0>
    2962:	8e 32       	cpi	r24, 0x2E	; 46
    2964:	21 f4       	brne	.+8      	; 0x296e <vfprintf+0xd4>
    2966:	16 fd       	sbrc	r17, 6
    2968:	6c c1       	rjmp	.+728    	; 0x2c42 <vfprintf+0x3a8>
    296a:	10 64       	ori	r17, 0x40	; 64
    296c:	06 c0       	rjmp	.+12     	; 0x297a <vfprintf+0xe0>
    296e:	8c 36       	cpi	r24, 0x6C	; 108
    2970:	11 f4       	brne	.+4      	; 0x2976 <vfprintf+0xdc>
    2972:	10 68       	ori	r17, 0x80	; 128
    2974:	02 c0       	rjmp	.+4      	; 0x297a <vfprintf+0xe0>
    2976:	88 36       	cpi	r24, 0x68	; 104
    2978:	59 f4       	brne	.+22     	; 0x2990 <vfprintf+0xf6>
    297a:	ec 85       	ldd	r30, Y+12	; 0x0c
    297c:	fd 85       	ldd	r31, Y+13	; 0x0d
    297e:	93 fd       	sbrc	r25, 3
    2980:	85 91       	lpm	r24, Z+
    2982:	93 ff       	sbrs	r25, 3
    2984:	81 91       	ld	r24, Z+
    2986:	fd 87       	std	Y+13, r31	; 0x0d
    2988:	ec 87       	std	Y+12, r30	; 0x0c
    298a:	88 23       	and	r24, r24
    298c:	09 f0       	breq	.+2      	; 0x2990 <vfprintf+0xf6>
    298e:	b8 cf       	rjmp	.-144    	; 0x2900 <vfprintf+0x66>
    2990:	98 2f       	mov	r25, r24
    2992:	95 54       	subi	r25, 0x45	; 69
    2994:	93 30       	cpi	r25, 0x03	; 3
    2996:	18 f0       	brcs	.+6      	; 0x299e <vfprintf+0x104>
    2998:	90 52       	subi	r25, 0x20	; 32
    299a:	93 30       	cpi	r25, 0x03	; 3
    299c:	38 f4       	brcc	.+14     	; 0x29ac <vfprintf+0x112>
    299e:	24 e0       	ldi	r18, 0x04	; 4
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	a2 0e       	add	r10, r18
    29a4:	b3 1e       	adc	r11, r19
    29a6:	3f e3       	ldi	r19, 0x3F	; 63
    29a8:	39 83       	std	Y+1, r19	; 0x01
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <vfprintf+0x130>
    29ac:	83 36       	cpi	r24, 0x63	; 99
    29ae:	31 f0       	breq	.+12     	; 0x29bc <vfprintf+0x122>
    29b0:	83 37       	cpi	r24, 0x73	; 115
    29b2:	81 f0       	breq	.+32     	; 0x29d4 <vfprintf+0x13a>
    29b4:	83 35       	cpi	r24, 0x53	; 83
    29b6:	09 f0       	breq	.+2      	; 0x29ba <vfprintf+0x120>
    29b8:	5a c0       	rjmp	.+180    	; 0x2a6e <vfprintf+0x1d4>
    29ba:	22 c0       	rjmp	.+68     	; 0x2a00 <vfprintf+0x166>
    29bc:	f5 01       	movw	r30, r10
    29be:	80 81       	ld	r24, Z
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	22 e0       	ldi	r18, 0x02	; 2
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	a2 0e       	add	r10, r18
    29c8:	b3 1e       	adc	r11, r19
    29ca:	21 e0       	ldi	r18, 0x01	; 1
    29cc:	c2 2e       	mov	r12, r18
    29ce:	d1 2c       	mov	r13, r1
    29d0:	42 01       	movw	r8, r4
    29d2:	14 c0       	rjmp	.+40     	; 0x29fc <vfprintf+0x162>
    29d4:	92 e0       	ldi	r25, 0x02	; 2
    29d6:	29 2e       	mov	r2, r25
    29d8:	31 2c       	mov	r3, r1
    29da:	2a 0c       	add	r2, r10
    29dc:	3b 1c       	adc	r3, r11
    29de:	f5 01       	movw	r30, r10
    29e0:	80 80       	ld	r8, Z
    29e2:	91 80       	ldd	r9, Z+1	; 0x01
    29e4:	16 ff       	sbrs	r17, 6
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <vfprintf+0x154>
    29e8:	6f 2d       	mov	r22, r15
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <vfprintf+0x158>
    29ee:	6f ef       	ldi	r22, 0xFF	; 255
    29f0:	7f ef       	ldi	r23, 0xFF	; 255
    29f2:	c4 01       	movw	r24, r8
    29f4:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <strnlen>
    29f8:	6c 01       	movw	r12, r24
    29fa:	51 01       	movw	r10, r2
    29fc:	1f 77       	andi	r17, 0x7F	; 127
    29fe:	15 c0       	rjmp	.+42     	; 0x2a2a <vfprintf+0x190>
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	28 2e       	mov	r2, r24
    2a04:	31 2c       	mov	r3, r1
    2a06:	2a 0c       	add	r2, r10
    2a08:	3b 1c       	adc	r3, r11
    2a0a:	f5 01       	movw	r30, r10
    2a0c:	80 80       	ld	r8, Z
    2a0e:	91 80       	ldd	r9, Z+1	; 0x01
    2a10:	16 ff       	sbrs	r17, 6
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <vfprintf+0x180>
    2a14:	6f 2d       	mov	r22, r15
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <vfprintf+0x184>
    2a1a:	6f ef       	ldi	r22, 0xFF	; 255
    2a1c:	7f ef       	ldi	r23, 0xFF	; 255
    2a1e:	c4 01       	movw	r24, r8
    2a20:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <strnlen_P>
    2a24:	6c 01       	movw	r12, r24
    2a26:	10 68       	ori	r17, 0x80	; 128
    2a28:	51 01       	movw	r10, r2
    2a2a:	13 fd       	sbrc	r17, 3
    2a2c:	1c c0       	rjmp	.+56     	; 0x2a66 <vfprintf+0x1cc>
    2a2e:	06 c0       	rjmp	.+12     	; 0x2a3c <vfprintf+0x1a2>
    2a30:	80 e2       	ldi	r24, 0x20	; 32
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	b3 01       	movw	r22, r6
    2a36:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2a3a:	ea 94       	dec	r14
    2a3c:	8e 2d       	mov	r24, r14
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	c8 16       	cp	r12, r24
    2a42:	d9 06       	cpc	r13, r25
    2a44:	a8 f3       	brcs	.-22     	; 0x2a30 <vfprintf+0x196>
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <vfprintf+0x1cc>
    2a48:	f4 01       	movw	r30, r8
    2a4a:	17 fd       	sbrc	r17, 7
    2a4c:	85 91       	lpm	r24, Z+
    2a4e:	17 ff       	sbrs	r17, 7
    2a50:	81 91       	ld	r24, Z+
    2a52:	4f 01       	movw	r8, r30
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	b3 01       	movw	r22, r6
    2a58:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2a5c:	e1 10       	cpse	r14, r1
    2a5e:	ea 94       	dec	r14
    2a60:	08 94       	sec
    2a62:	c1 08       	sbc	r12, r1
    2a64:	d1 08       	sbc	r13, r1
    2a66:	c1 14       	cp	r12, r1
    2a68:	d1 04       	cpc	r13, r1
    2a6a:	71 f7       	brne	.-36     	; 0x2a48 <vfprintf+0x1ae>
    2a6c:	e7 c0       	rjmp	.+462    	; 0x2c3c <vfprintf+0x3a2>
    2a6e:	84 36       	cpi	r24, 0x64	; 100
    2a70:	11 f0       	breq	.+4      	; 0x2a76 <vfprintf+0x1dc>
    2a72:	89 36       	cpi	r24, 0x69	; 105
    2a74:	51 f5       	brne	.+84     	; 0x2aca <vfprintf+0x230>
    2a76:	f5 01       	movw	r30, r10
    2a78:	17 ff       	sbrs	r17, 7
    2a7a:	07 c0       	rjmp	.+14     	; 0x2a8a <vfprintf+0x1f0>
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	a2 81       	ldd	r26, Z+2	; 0x02
    2a82:	b3 81       	ldd	r27, Z+3	; 0x03
    2a84:	24 e0       	ldi	r18, 0x04	; 4
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	08 c0       	rjmp	.+16     	; 0x2a9a <vfprintf+0x200>
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	aa 27       	eor	r26, r26
    2a90:	97 fd       	sbrc	r25, 7
    2a92:	a0 95       	com	r26
    2a94:	ba 2f       	mov	r27, r26
    2a96:	22 e0       	ldi	r18, 0x02	; 2
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	a2 0e       	add	r10, r18
    2a9c:	b3 1e       	adc	r11, r19
    2a9e:	01 2f       	mov	r16, r17
    2aa0:	0f 76       	andi	r16, 0x6F	; 111
    2aa2:	b7 ff       	sbrs	r27, 7
    2aa4:	08 c0       	rjmp	.+16     	; 0x2ab6 <vfprintf+0x21c>
    2aa6:	b0 95       	com	r27
    2aa8:	a0 95       	com	r26
    2aaa:	90 95       	com	r25
    2aac:	81 95       	neg	r24
    2aae:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab0:	af 4f       	sbci	r26, 0xFF	; 255
    2ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab4:	00 68       	ori	r16, 0x80	; 128
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	a2 01       	movw	r20, r4
    2abc:	2a e0       	ldi	r18, 0x0A	; 10
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__ultoa_invert>
    2ac4:	d8 2e       	mov	r13, r24
    2ac6:	d4 18       	sub	r13, r4
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <vfprintf+0x2ae>
    2aca:	85 37       	cpi	r24, 0x75	; 117
    2acc:	21 f4       	brne	.+8      	; 0x2ad6 <vfprintf+0x23c>
    2ace:	1f 7e       	andi	r17, 0xEF	; 239
    2ad0:	2a e0       	ldi	r18, 0x0A	; 10
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	20 c0       	rjmp	.+64     	; 0x2b16 <vfprintf+0x27c>
    2ad6:	19 7f       	andi	r17, 0xF9	; 249
    2ad8:	8f 36       	cpi	r24, 0x6F	; 111
    2ada:	a9 f0       	breq	.+42     	; 0x2b06 <vfprintf+0x26c>
    2adc:	80 37       	cpi	r24, 0x70	; 112
    2ade:	20 f4       	brcc	.+8      	; 0x2ae8 <vfprintf+0x24e>
    2ae0:	88 35       	cpi	r24, 0x58	; 88
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <vfprintf+0x24c>
    2ae4:	ae c0       	rjmp	.+348    	; 0x2c42 <vfprintf+0x3a8>
    2ae6:	0b c0       	rjmp	.+22     	; 0x2afe <vfprintf+0x264>
    2ae8:	80 37       	cpi	r24, 0x70	; 112
    2aea:	21 f0       	breq	.+8      	; 0x2af4 <vfprintf+0x25a>
    2aec:	88 37       	cpi	r24, 0x78	; 120
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <vfprintf+0x258>
    2af0:	a8 c0       	rjmp	.+336    	; 0x2c42 <vfprintf+0x3a8>
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <vfprintf+0x25c>
    2af4:	10 61       	ori	r17, 0x10	; 16
    2af6:	14 ff       	sbrs	r17, 4
    2af8:	09 c0       	rjmp	.+18     	; 0x2b0c <vfprintf+0x272>
    2afa:	14 60       	ori	r17, 0x04	; 4
    2afc:	07 c0       	rjmp	.+14     	; 0x2b0c <vfprintf+0x272>
    2afe:	14 ff       	sbrs	r17, 4
    2b00:	08 c0       	rjmp	.+16     	; 0x2b12 <vfprintf+0x278>
    2b02:	16 60       	ori	r17, 0x06	; 6
    2b04:	06 c0       	rjmp	.+12     	; 0x2b12 <vfprintf+0x278>
    2b06:	28 e0       	ldi	r18, 0x08	; 8
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	05 c0       	rjmp	.+10     	; 0x2b16 <vfprintf+0x27c>
    2b0c:	20 e1       	ldi	r18, 0x10	; 16
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <vfprintf+0x27c>
    2b12:	20 e1       	ldi	r18, 0x10	; 16
    2b14:	32 e0       	ldi	r19, 0x02	; 2
    2b16:	f5 01       	movw	r30, r10
    2b18:	17 ff       	sbrs	r17, 7
    2b1a:	07 c0       	rjmp	.+14     	; 0x2b2a <vfprintf+0x290>
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	44 e0       	ldi	r20, 0x04	; 4
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	06 c0       	rjmp	.+12     	; 0x2b36 <vfprintf+0x29c>
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	42 e0       	ldi	r20, 0x02	; 2
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	a4 0e       	add	r10, r20
    2b38:	b5 1e       	adc	r11, r21
    2b3a:	a2 01       	movw	r20, r4
    2b3c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__ultoa_invert>
    2b40:	d8 2e       	mov	r13, r24
    2b42:	d4 18       	sub	r13, r4
    2b44:	01 2f       	mov	r16, r17
    2b46:	0f 77       	andi	r16, 0x7F	; 127
    2b48:	06 ff       	sbrs	r16, 6
    2b4a:	09 c0       	rjmp	.+18     	; 0x2b5e <vfprintf+0x2c4>
    2b4c:	0e 7f       	andi	r16, 0xFE	; 254
    2b4e:	df 14       	cp	r13, r15
    2b50:	30 f4       	brcc	.+12     	; 0x2b5e <vfprintf+0x2c4>
    2b52:	04 ff       	sbrs	r16, 4
    2b54:	06 c0       	rjmp	.+12     	; 0x2b62 <vfprintf+0x2c8>
    2b56:	02 fd       	sbrc	r16, 2
    2b58:	04 c0       	rjmp	.+8      	; 0x2b62 <vfprintf+0x2c8>
    2b5a:	0f 7e       	andi	r16, 0xEF	; 239
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <vfprintf+0x2c8>
    2b5e:	1d 2d       	mov	r17, r13
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <vfprintf+0x2ca>
    2b62:	1f 2d       	mov	r17, r15
    2b64:	80 2f       	mov	r24, r16
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	04 ff       	sbrs	r16, 4
    2b6a:	0c c0       	rjmp	.+24     	; 0x2b84 <vfprintf+0x2ea>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	ed 0d       	add	r30, r13
    2b70:	f1 1d       	adc	r31, r1
    2b72:	20 81       	ld	r18, Z
    2b74:	20 33       	cpi	r18, 0x30	; 48
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <vfprintf+0x2e2>
    2b78:	09 7e       	andi	r16, 0xE9	; 233
    2b7a:	09 c0       	rjmp	.+18     	; 0x2b8e <vfprintf+0x2f4>
    2b7c:	02 ff       	sbrs	r16, 2
    2b7e:	06 c0       	rjmp	.+12     	; 0x2b8c <vfprintf+0x2f2>
    2b80:	1e 5f       	subi	r17, 0xFE	; 254
    2b82:	05 c0       	rjmp	.+10     	; 0x2b8e <vfprintf+0x2f4>
    2b84:	86 78       	andi	r24, 0x86	; 134
    2b86:	90 70       	andi	r25, 0x00	; 0
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <vfprintf+0x2f4>
    2b8c:	1f 5f       	subi	r17, 0xFF	; 255
    2b8e:	80 2e       	mov	r8, r16
    2b90:	99 24       	eor	r9, r9
    2b92:	03 fd       	sbrc	r16, 3
    2b94:	12 c0       	rjmp	.+36     	; 0x2bba <vfprintf+0x320>
    2b96:	00 ff       	sbrs	r16, 0
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <vfprintf+0x31a>
    2b9a:	fd 2c       	mov	r15, r13
    2b9c:	1e 15       	cp	r17, r14
    2b9e:	50 f4       	brcc	.+20     	; 0x2bb4 <vfprintf+0x31a>
    2ba0:	fe 0c       	add	r15, r14
    2ba2:	f1 1a       	sub	r15, r17
    2ba4:	1e 2d       	mov	r17, r14
    2ba6:	06 c0       	rjmp	.+12     	; 0x2bb4 <vfprintf+0x31a>
    2ba8:	80 e2       	ldi	r24, 0x20	; 32
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	b3 01       	movw	r22, r6
    2bae:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2bb2:	1f 5f       	subi	r17, 0xFF	; 255
    2bb4:	1e 15       	cp	r17, r14
    2bb6:	c0 f3       	brcs	.-16     	; 0x2ba8 <vfprintf+0x30e>
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <vfprintf+0x328>
    2bba:	1e 15       	cp	r17, r14
    2bbc:	10 f4       	brcc	.+4      	; 0x2bc2 <vfprintf+0x328>
    2bbe:	e1 1a       	sub	r14, r17
    2bc0:	01 c0       	rjmp	.+2      	; 0x2bc4 <vfprintf+0x32a>
    2bc2:	ee 24       	eor	r14, r14
    2bc4:	84 fe       	sbrs	r8, 4
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <vfprintf+0x34c>
    2bc8:	80 e3       	ldi	r24, 0x30	; 48
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	b3 01       	movw	r22, r6
    2bce:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2bd2:	82 fe       	sbrs	r8, 2
    2bd4:	1f c0       	rjmp	.+62     	; 0x2c14 <vfprintf+0x37a>
    2bd6:	81 fe       	sbrs	r8, 1
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <vfprintf+0x346>
    2bda:	88 e5       	ldi	r24, 0x58	; 88
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	10 c0       	rjmp	.+32     	; 0x2c00 <vfprintf+0x366>
    2be0:	88 e7       	ldi	r24, 0x78	; 120
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0d c0       	rjmp	.+26     	; 0x2c00 <vfprintf+0x366>
    2be6:	c4 01       	movw	r24, r8
    2be8:	86 78       	andi	r24, 0x86	; 134
    2bea:	90 70       	andi	r25, 0x00	; 0
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	91 f0       	breq	.+36     	; 0x2c14 <vfprintf+0x37a>
    2bf0:	81 fc       	sbrc	r8, 1
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <vfprintf+0x35e>
    2bf4:	80 e2       	ldi	r24, 0x20	; 32
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <vfprintf+0x360>
    2bf8:	8b e2       	ldi	r24, 0x2B	; 43
    2bfa:	07 fd       	sbrc	r16, 7
    2bfc:	8d e2       	ldi	r24, 0x2D	; 45
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	b3 01       	movw	r22, r6
    2c02:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2c06:	06 c0       	rjmp	.+12     	; 0x2c14 <vfprintf+0x37a>
    2c08:	80 e3       	ldi	r24, 0x30	; 48
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	b3 01       	movw	r22, r6
    2c0e:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2c12:	fa 94       	dec	r15
    2c14:	df 14       	cp	r13, r15
    2c16:	c0 f3       	brcs	.-16     	; 0x2c08 <vfprintf+0x36e>
    2c18:	da 94       	dec	r13
    2c1a:	f2 01       	movw	r30, r4
    2c1c:	ed 0d       	add	r30, r13
    2c1e:	f1 1d       	adc	r31, r1
    2c20:	80 81       	ld	r24, Z
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	b3 01       	movw	r22, r6
    2c26:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2c2a:	dd 20       	and	r13, r13
    2c2c:	a9 f7       	brne	.-22     	; 0x2c18 <vfprintf+0x37e>
    2c2e:	06 c0       	rjmp	.+12     	; 0x2c3c <vfprintf+0x3a2>
    2c30:	80 e2       	ldi	r24, 0x20	; 32
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	b3 01       	movw	r22, r6
    2c36:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2c3a:	ea 94       	dec	r14
    2c3c:	ee 20       	and	r14, r14
    2c3e:	c1 f7       	brne	.-16     	; 0x2c30 <vfprintf+0x396>
    2c40:	40 ce       	rjmp	.-896    	; 0x28c2 <vfprintf+0x28>
    2c42:	f3 01       	movw	r30, r6
    2c44:	86 81       	ldd	r24, Z+6	; 0x06
    2c46:	97 81       	ldd	r25, Z+7	; 0x07
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <vfprintf+0x3b4>
    2c4a:	8f ef       	ldi	r24, 0xFF	; 255
    2c4c:	9f ef       	ldi	r25, 0xFF	; 255
    2c4e:	2d 96       	adiw	r28, 0x0d	; 13
    2c50:	e2 e1       	ldi	r30, 0x12	; 18
    2c52:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__epilogue_restores__>

00002c56 <strnlen_P>:
    2c56:	fc 01       	movw	r30, r24
    2c58:	05 90       	lpm	r0, Z+
    2c5a:	61 50       	subi	r22, 0x01	; 1
    2c5c:	70 40       	sbci	r23, 0x00	; 0
    2c5e:	01 10       	cpse	r0, r1
    2c60:	d8 f7       	brcc	.-10     	; 0x2c58 <strnlen_P+0x2>
    2c62:	80 95       	com	r24
    2c64:	90 95       	com	r25
    2c66:	8e 0f       	add	r24, r30
    2c68:	9f 1f       	adc	r25, r31
    2c6a:	08 95       	ret

00002c6c <strnlen>:
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	61 50       	subi	r22, 0x01	; 1
    2c70:	70 40       	sbci	r23, 0x00	; 0
    2c72:	01 90       	ld	r0, Z+
    2c74:	01 10       	cpse	r0, r1
    2c76:	d8 f7       	brcc	.-10     	; 0x2c6e <strnlen+0x2>
    2c78:	80 95       	com	r24
    2c7a:	90 95       	com	r25
    2c7c:	8e 0f       	add	r24, r30
    2c7e:	9f 1f       	adc	r25, r31
    2c80:	08 95       	ret

00002c82 <fputc>:
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	8c 01       	movw	r16, r24
    2c8c:	eb 01       	movw	r28, r22
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	81 ff       	sbrs	r24, 1
    2c92:	1b c0       	rjmp	.+54     	; 0x2cca <fputc+0x48>
    2c94:	82 ff       	sbrs	r24, 2
    2c96:	0d c0       	rjmp	.+26     	; 0x2cb2 <fputc+0x30>
    2c98:	2e 81       	ldd	r18, Y+6	; 0x06
    2c9a:	3f 81       	ldd	r19, Y+7	; 0x07
    2c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca0:	28 17       	cp	r18, r24
    2ca2:	39 07       	cpc	r19, r25
    2ca4:	64 f4       	brge	.+24     	; 0x2cbe <fputc+0x3c>
    2ca6:	e8 81       	ld	r30, Y
    2ca8:	f9 81       	ldd	r31, Y+1	; 0x01
    2caa:	01 93       	st	Z+, r16
    2cac:	f9 83       	std	Y+1, r31	; 0x01
    2cae:	e8 83       	st	Y, r30
    2cb0:	06 c0       	rjmp	.+12     	; 0x2cbe <fputc+0x3c>
    2cb2:	e8 85       	ldd	r30, Y+8	; 0x08
    2cb4:	f9 85       	ldd	r31, Y+9	; 0x09
    2cb6:	80 2f       	mov	r24, r16
    2cb8:	09 95       	icall
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	31 f4       	brne	.+12     	; 0x2cca <fputc+0x48>
    2cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	9f 83       	std	Y+7, r25	; 0x07
    2cc6:	8e 83       	std	Y+6, r24	; 0x06
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <fputc+0x4c>
    2cca:	0f ef       	ldi	r16, 0xFF	; 255
    2ccc:	1f ef       	ldi	r17, 0xFF	; 255
    2cce:	c8 01       	movw	r24, r16
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	08 95       	ret

00002cda <__ultoa_invert>:
    2cda:	fa 01       	movw	r30, r20
    2cdc:	aa 27       	eor	r26, r26
    2cde:	28 30       	cpi	r18, 0x08	; 8
    2ce0:	51 f1       	breq	.+84     	; 0x2d36 <__ultoa_invert+0x5c>
    2ce2:	20 31       	cpi	r18, 0x10	; 16
    2ce4:	81 f1       	breq	.+96     	; 0x2d46 <__ultoa_invert+0x6c>
    2ce6:	e8 94       	clt
    2ce8:	6f 93       	push	r22
    2cea:	6e 7f       	andi	r22, 0xFE	; 254
    2cec:	6e 5f       	subi	r22, 0xFE	; 254
    2cee:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf4:	af 4f       	sbci	r26, 0xFF	; 255
    2cf6:	b1 e0       	ldi	r27, 0x01	; 1
    2cf8:	3e d0       	rcall	.+124    	; 0x2d76 <__ultoa_invert+0x9c>
    2cfa:	b4 e0       	ldi	r27, 0x04	; 4
    2cfc:	3c d0       	rcall	.+120    	; 0x2d76 <__ultoa_invert+0x9c>
    2cfe:	67 0f       	add	r22, r23
    2d00:	78 1f       	adc	r23, r24
    2d02:	89 1f       	adc	r24, r25
    2d04:	9a 1f       	adc	r25, r26
    2d06:	a1 1d       	adc	r26, r1
    2d08:	68 0f       	add	r22, r24
    2d0a:	79 1f       	adc	r23, r25
    2d0c:	8a 1f       	adc	r24, r26
    2d0e:	91 1d       	adc	r25, r1
    2d10:	a1 1d       	adc	r26, r1
    2d12:	6a 0f       	add	r22, r26
    2d14:	71 1d       	adc	r23, r1
    2d16:	81 1d       	adc	r24, r1
    2d18:	91 1d       	adc	r25, r1
    2d1a:	a1 1d       	adc	r26, r1
    2d1c:	20 d0       	rcall	.+64     	; 0x2d5e <__ultoa_invert+0x84>
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <__ultoa_invert+0x48>
    2d20:	68 94       	set
    2d22:	3f 91       	pop	r19
    2d24:	2a e0       	ldi	r18, 0x0A	; 10
    2d26:	26 9f       	mul	r18, r22
    2d28:	11 24       	eor	r1, r1
    2d2a:	30 19       	sub	r19, r0
    2d2c:	30 5d       	subi	r19, 0xD0	; 208
    2d2e:	31 93       	st	Z+, r19
    2d30:	de f6       	brtc	.-74     	; 0x2ce8 <__ultoa_invert+0xe>
    2d32:	cf 01       	movw	r24, r30
    2d34:	08 95       	ret
    2d36:	46 2f       	mov	r20, r22
    2d38:	47 70       	andi	r20, 0x07	; 7
    2d3a:	40 5d       	subi	r20, 0xD0	; 208
    2d3c:	41 93       	st	Z+, r20
    2d3e:	b3 e0       	ldi	r27, 0x03	; 3
    2d40:	0f d0       	rcall	.+30     	; 0x2d60 <__ultoa_invert+0x86>
    2d42:	c9 f7       	brne	.-14     	; 0x2d36 <__ultoa_invert+0x5c>
    2d44:	f6 cf       	rjmp	.-20     	; 0x2d32 <__ultoa_invert+0x58>
    2d46:	46 2f       	mov	r20, r22
    2d48:	4f 70       	andi	r20, 0x0F	; 15
    2d4a:	40 5d       	subi	r20, 0xD0	; 208
    2d4c:	4a 33       	cpi	r20, 0x3A	; 58
    2d4e:	18 f0       	brcs	.+6      	; 0x2d56 <__ultoa_invert+0x7c>
    2d50:	49 5d       	subi	r20, 0xD9	; 217
    2d52:	31 fd       	sbrc	r19, 1
    2d54:	40 52       	subi	r20, 0x20	; 32
    2d56:	41 93       	st	Z+, r20
    2d58:	02 d0       	rcall	.+4      	; 0x2d5e <__ultoa_invert+0x84>
    2d5a:	a9 f7       	brne	.-22     	; 0x2d46 <__ultoa_invert+0x6c>
    2d5c:	ea cf       	rjmp	.-44     	; 0x2d32 <__ultoa_invert+0x58>
    2d5e:	b4 e0       	ldi	r27, 0x04	; 4
    2d60:	a6 95       	lsr	r26
    2d62:	97 95       	ror	r25
    2d64:	87 95       	ror	r24
    2d66:	77 95       	ror	r23
    2d68:	67 95       	ror	r22
    2d6a:	ba 95       	dec	r27
    2d6c:	c9 f7       	brne	.-14     	; 0x2d60 <__ultoa_invert+0x86>
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	61 05       	cpc	r22, r1
    2d72:	71 05       	cpc	r23, r1
    2d74:	08 95       	ret
    2d76:	9b 01       	movw	r18, r22
    2d78:	ac 01       	movw	r20, r24
    2d7a:	0a 2e       	mov	r0, r26
    2d7c:	06 94       	lsr	r0
    2d7e:	57 95       	ror	r21
    2d80:	47 95       	ror	r20
    2d82:	37 95       	ror	r19
    2d84:	27 95       	ror	r18
    2d86:	ba 95       	dec	r27
    2d88:	c9 f7       	brne	.-14     	; 0x2d7c <__ultoa_invert+0xa2>
    2d8a:	62 0f       	add	r22, r18
    2d8c:	73 1f       	adc	r23, r19
    2d8e:	84 1f       	adc	r24, r20
    2d90:	95 1f       	adc	r25, r21
    2d92:	a0 1d       	adc	r26, r0
    2d94:	08 95       	ret

00002d96 <__prologue_saves__>:
    2d96:	2f 92       	push	r2
    2d98:	3f 92       	push	r3
    2d9a:	4f 92       	push	r4
    2d9c:	5f 92       	push	r5
    2d9e:	6f 92       	push	r6
    2da0:	7f 92       	push	r7
    2da2:	8f 92       	push	r8
    2da4:	9f 92       	push	r9
    2da6:	af 92       	push	r10
    2da8:	bf 92       	push	r11
    2daa:	cf 92       	push	r12
    2dac:	df 92       	push	r13
    2dae:	ef 92       	push	r14
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	ca 1b       	sub	r28, r26
    2dc0:	db 0b       	sbc	r29, r27
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	09 94       	ijmp

00002dce <__epilogue_restores__>:
    2dce:	2a 88       	ldd	r2, Y+18	; 0x12
    2dd0:	39 88       	ldd	r3, Y+17	; 0x11
    2dd2:	48 88       	ldd	r4, Y+16	; 0x10
    2dd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dda:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ddc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dde:	aa 84       	ldd	r10, Y+10	; 0x0a
    2de0:	b9 84       	ldd	r11, Y+9	; 0x09
    2de2:	c8 84       	ldd	r12, Y+8	; 0x08
    2de4:	df 80       	ldd	r13, Y+7	; 0x07
    2de6:	ee 80       	ldd	r14, Y+6	; 0x06
    2de8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dea:	0c 81       	ldd	r16, Y+4	; 0x04
    2dec:	1b 81       	ldd	r17, Y+3	; 0x03
    2dee:	aa 81       	ldd	r26, Y+2	; 0x02
    2df0:	b9 81       	ldd	r27, Y+1	; 0x01
    2df2:	ce 0f       	add	r28, r30
    2df4:	d1 1d       	adc	r29, r1
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	ed 01       	movw	r28, r26
    2e02:	08 95       	ret

00002e04 <_exit>:
    2e04:	f8 94       	cli

00002e06 <__stop_program>:
    2e06:	ff cf       	rjmp	.-2      	; 0x2e06 <__stop_program>
