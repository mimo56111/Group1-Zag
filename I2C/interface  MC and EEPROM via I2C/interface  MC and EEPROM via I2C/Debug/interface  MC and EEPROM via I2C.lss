
interface  MC and EEPROM via I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000096e  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001138  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e1d  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000422  00000000  00000000  00002055  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c0  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00002d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000775  00000000  00000000  000032e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 03 	call	0x6c4	; 0x6c4 <main>
  8a:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 29e:	82 34       	cpi	r24, 0x42	; 66
 2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_u8read+0x40>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
 2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_u8read+0xac>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
 2ae:	83 34       	cpi	r24, 0x43	; 67
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_u8read+0x64>
 2b2:	84 34       	cpi	r24, 0x44	; 68
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
 2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_u8read+0xac>
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2ba:	29 b3       	in	r18, 0x19	; 25
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
		break;
 2dc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2de:	26 b3       	in	r18, 0x16	; 22
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x4e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x4a>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x5e>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x5a>
		break;
 300:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 302:	23 b3       	in	r18, 0x13	; 19
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x6e>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x82>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x7e>
		break;
 324:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 326:	20 b3       	in	r18, 0x10	; 16
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x96>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x92>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0xa6>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0xa2>
		break;
 348:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 34c:	08 95       	ret

0000034e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 34e:	82 34       	cpi	r24, 0x42	; 66
 350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
 352:	83 34       	cpi	r24, 0x43	; 67
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
 356:	81 34       	cpi	r24, 0x41	; 65
 358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
 360:	84 34       	cpi	r24, 0x44	; 68
 362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	6b bb       	out	0x1b, r22	; 27
		break;
 37e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	68 bb       	out	0x18, r22	; 24
		break;
 398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 27       	eor	r22, r18
 3b0:	65 bb       	out	0x15, r22	; 21
		break;
 3b2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ac 01       	movw	r20, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
 3c6:	ba 01       	movw	r22, r20
 3c8:	62 27       	eor	r22, r18
 3ca:	62 bb       	out	0x12, r22	; 18
 3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 3e6:	6a bb       	out	0x1a, r22	; 26
		break ;
 3e8:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 3ea:	67 bb       	out	0x17, r22	; 23
		break ;
 3ec:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 3ee:	64 bb       	out	0x14, r22	; 20
		break ;
 3f0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 3f2:	61 bb       	out	0x11, r22	; 17
 3f4:	08 95       	ret

000003f6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 3f6:	82 34       	cpi	r24, 0x42	; 66
 3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
 3fe:	81 34       	cpi	r24, 0x41	; 65
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
 408:	84 34       	cpi	r24, 0x44	; 68
 40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 40e:	6b bb       	out	0x1b, r22	; 27
		break ;
 410:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 412:	68 bb       	out	0x18, r22	; 24
		break ;
 414:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 416:	65 bb       	out	0x15, r22	; 21
		break ;
 418:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
 434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 436:	89 b3       	in	r24, 0x19	; 25
		break ;
 438:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 43a:	86 b3       	in	r24, 0x16	; 22
		break ;
 43c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 43e:	83 b3       	in	r24, 0x13	; 19
		break ;
 440:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 442:	80 b3       	in	r24, 0x10	; 16
		break ;
 444:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 446:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	81 f0       	breq	.+32     	; 0x576 <write_low_nibble+0x26>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	f1 f4       	brne	.+60     	; 0x59a <write_low_nibble+0x4a>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	79 f0       	breq	.+30     	; 0x582 <write_low_nibble+0x32>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	c9 f4       	brne	.+50     	; 0x59a <write_low_nibble+0x4a>
 568:	12 c0       	rjmp	.+36     	; 0x58e <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	86 2b       	or	r24, r22
 574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 576:	88 b3       	in	r24, 0x18	; 24
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 57c:	88 b3       	in	r24, 0x18	; 24
 57e:	86 2b       	or	r24, r22
 580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 582:	85 b3       	in	r24, 0x15	; 21
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	86 2b       	or	r24, r22
 58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 58e:	82 b3       	in	r24, 0x12	; 18
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	68 2b       	or	r22, r24
 598:	62 bb       	out	0x12, r22	; 18
 59a:	08 95       	ret

0000059c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 59c:	62 95       	swap	r22
 59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a0:	82 34       	cpi	r24, 0x42	; 66
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <write_high_nibble+0x28>
 5a4:	83 34       	cpi	r24, 0x43	; 67
 5a6:	18 f4       	brcc	.+6      	; 0x5ae <write_high_nibble+0x12>
 5a8:	81 34       	cpi	r24, 0x41	; 65
 5aa:	f1 f4       	brne	.+60     	; 0x5e8 <write_high_nibble+0x4c>
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <write_high_nibble+0x1c>
 5ae:	83 34       	cpi	r24, 0x43	; 67
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <write_high_nibble+0x34>
 5b2:	84 34       	cpi	r24, 0x44	; 68
 5b4:	c9 f4       	brne	.+50     	; 0x5e8 <write_high_nibble+0x4c>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	8f 70       	andi	r24, 0x0F	; 15
 5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	86 2b       	or	r24, r22
 5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5c4:	88 b3       	in	r24, 0x18	; 24
 5c6:	8f 70       	andi	r24, 0x0F	; 15
 5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	86 2b       	or	r24, r22
 5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5d0:	85 b3       	in	r24, 0x15	; 21
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	86 2b       	or	r24, r22
 5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	68 2b       	or	r22, r24
 5e6:	62 bb       	out	0x12, r22	; 18
 5e8:	08 95       	ret

000005ea <I2C_Master_init>:
	#include <avr/io.h>
	#include "std_macros.h"
	#define F_CPU 8000000UL
	#define prescalar 1
	void I2C_Master_init(unsigned long SCL_Clock)
	{
 5ea:	9b 01       	movw	r18, r22
 5ec:	ac 01       	movw	r20, r24
		TWBR= (unsigned char) (((F_CPU/SCL_Clock)-16) / (2*prescalar));
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	72 e1       	ldi	r23, 0x12	; 18
 5f2:	8a e7       	ldi	r24, 0x7A	; 122
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodsi4>
 5fa:	da 01       	movw	r26, r20
 5fc:	c9 01       	movw	r24, r18
 5fe:	40 97       	sbiw	r24, 0x10	; 16
 600:	a1 09       	sbc	r26, r1
 602:	b1 09       	sbc	r27, r1
 604:	b6 95       	lsr	r27
 606:	a7 95       	ror	r26
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	80 b9       	out	0x00, r24	; 0
		if (prescalar==1)
		{
			TWSR=0;
 60e:	11 b8       	out	0x01, r1	; 1
		else if (prescalar==64)
		{
			TWSR=3;
		}
		
	}
 610:	08 95       	ret

00000612 <I2C_start>:
	
	void I2C_start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
 612:	84 ea       	ldi	r24, 0xA4	; 164
 614:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
 616:	06 b6       	in	r0, 0x36	; 54
 618:	07 fe       	sbrs	r0, 7
 61a:	fd cf       	rjmp	.-6      	; 0x616 <I2C_start+0x4>
		while ((TWSR & 0XF8) != 0x08); // start condition has been transmitted
 61c:	81 b1       	in	r24, 0x01	; 1
 61e:	88 7f       	andi	r24, 0xF8	; 248
 620:	88 30       	cpi	r24, 0x08	; 8
 622:	e1 f7       	brne	.-8      	; 0x61c <I2C_start+0xa>
	}
 624:	08 95       	ret

00000626 <I2C_repeated_start>:
	
	void I2C_repeated_start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
 626:	84 ea       	ldi	r24, 0xA4	; 164
 628:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 62a:	06 b6       	in	r0, 0x36	; 54
 62c:	07 fe       	sbrs	r0, 7
 62e:	fd cf       	rjmp	.-6      	; 0x62a <I2C_repeated_start+0x4>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
 630:	81 b1       	in	r24, 0x01	; 1
 632:	88 7f       	andi	r24, 0xF8	; 248
 634:	80 31       	cpi	r24, 0x10	; 16
 636:	e1 f7       	brne	.-8      	; 0x630 <I2C_repeated_start+0xa>
	}
 638:	08 95       	ret

0000063a <I2C_write_address>:
	
	void I2C_write_address(unsigned char address)
	{
		TWDR=address;
 63a:	83 b9       	out	0x03, r24	; 3
		TWCR=(1<<TWINT)|(1<<TWEN);
 63c:	84 e8       	ldi	r24, 0x84	; 132
 63e:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
 640:	06 b6       	in	r0, 0x36	; 54
 642:	07 fe       	sbrs	r0, 7
 644:	fd cf       	rjmp	.-6      	; 0x640 <I2C_write_address+0x6>
		while ((TWSR & 0XF8) != 0x18); // SLA+write has been transmitted and ACK has been received 
 646:	81 b1       	in	r24, 0x01	; 1
 648:	88 7f       	andi	r24, 0xF8	; 248
 64a:	88 31       	cpi	r24, 0x18	; 24
 64c:	e1 f7       	brne	.-8      	; 0x646 <I2C_write_address+0xc>
	}
 64e:	08 95       	ret

00000650 <I2C_write_address_and_read>:
	
	void I2C_write_address_and_read(unsigned char address)
	{
		TWDR=address;
 650:	83 b9       	out	0x03, r24	; 3
		TWCR=(1<<TWINT)|(1<<TWEN);
 652:	84 e8       	ldi	r24, 0x84	; 132
 654:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 656:	06 b6       	in	r0, 0x36	; 54
 658:	07 fe       	sbrs	r0, 7
 65a:	fd cf       	rjmp	.-6      	; 0x656 <I2C_write_address_and_read+0x6>
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received
 65c:	81 b1       	in	r24, 0x01	; 1
 65e:	88 7f       	andi	r24, 0xF8	; 248
 660:	80 34       	cpi	r24, 0x40	; 64
 662:	e1 f7       	brne	.-8      	; 0x65c <I2C_write_address_and_read+0xc>
	}
 664:	08 95       	ret

00000666 <I2C_write_data>:
	void I2C_write_data(unsigned char data)
	{
		TWDR=data;
 666:	83 b9       	out	0x03, r24	; 3
		TWCR=(1<<TWINT)|(1<<TWEN);
 668:	84 e8       	ldi	r24, 0x84	; 132
 66a:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 66c:	06 b6       	in	r0, 0x36	; 54
 66e:	07 fe       	sbrs	r0, 7
 670:	fd cf       	rjmp	.-6      	; 0x66c <I2C_write_data+0x6>
		while ((TWSR & 0XF8) != 0x28); // data has been transmitted and ACK has been received
 672:	81 b1       	in	r24, 0x01	; 1
 674:	88 7f       	andi	r24, 0xF8	; 248
 676:	88 32       	cpi	r24, 0x28	; 40
 678:	e1 f7       	brne	.-8      	; 0x672 <I2C_write_data+0xc>
	}
 67a:	08 95       	ret

0000067c <I2C_stop>:
	
	void I2C_stop(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 67c:	84 e9       	ldi	r24, 0x94	; 148
 67e:	86 bf       	out	0x36, r24	; 54
	}
 680:	08 95       	ret

00000682 <I2C_read_with_NACK>:
	
	unsigned char I2C_read_with_NACK(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN);
 682:	84 e8       	ldi	r24, 0x84	; 132
 684:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0);
 686:	06 b6       	in	r0, 0x36	; 54
 688:	07 fe       	sbrs	r0, 7
 68a:	fd cf       	rjmp	.-6      	; 0x686 <I2C_read_with_NACK+0x4>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
 68c:	81 b1       	in	r24, 0x01	; 1
 68e:	88 7f       	andi	r24, 0xF8	; 248
 690:	88 35       	cpi	r24, 0x58	; 88
 692:	e1 f7       	brne	.-8      	; 0x68c <I2C_read_with_NACK+0xa>
		return TWDR ;
 694:	83 b1       	in	r24, 0x03	; 3
	}
 696:	08 95       	ret

00000698 <I2C_set_address>:
	
	
	void I2C_set_address(unsigned char address)
	{
		TWAR=address;
 698:	82 b9       	out	0x02, r24	; 2
	}
 69a:	08 95       	ret

0000069c <I2C_slave_read>:
	
	unsigned char I2C_slave_read(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 69c:	84 ec       	ldi	r24, 0xC4	; 196
 69e:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0);
 6a0:	06 b6       	in	r0, 0x36	; 54
 6a2:	07 fe       	sbrs	r0, 7
 6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <I2C_slave_read+0x4>
		while ((TWSR & 0XF8) != 0x60); // own SLA+W has been received and ACK has been returned
 6a6:	81 b1       	in	r24, 0x01	; 1
 6a8:	88 7f       	andi	r24, 0xF8	; 248
 6aa:	80 36       	cpi	r24, 0x60	; 96
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <I2C_slave_read+0xa>
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 6ae:	84 ec       	ldi	r24, 0xC4	; 196
 6b0:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0);
 6b2:	06 b6       	in	r0, 0x36	; 54
 6b4:	07 fe       	sbrs	r0, 7
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <I2C_slave_read+0x16>
		while ((TWSR & 0XF8) != 0x80); // previously addressed with own SLA+W : data has been received : ACK has been returned
 6b8:	81 b1       	in	r24, 0x01	; 1
 6ba:	88 7f       	andi	r24, 0xF8	; 248
 6bc:	80 38       	cpi	r24, 0x80	; 128
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <I2C_slave_read+0x1c>
		return TWDR ;
 6c0:	83 b1       	in	r24, 0x03	; 3
 6c2:	08 95       	ret

000006c4 <main>:
#include <util/delay.h>
#include "I2C.h"
#include "LCD.h"
int main(void)
{
	LCD_vInit();
 6c4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <LCD_vInit>
	unsigned char x;
	/*write to the location 0b00000000000*/
	unsigned char counter=0;
	I2C_Master_init(50000);
 6c8:	60 e5       	ldi	r22, 0x50	; 80
 6ca:	73 ec       	ldi	r23, 0xC3	; 195
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <I2C_Master_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	94 e3       	ldi	r25, 0x34	; 52
 6d8:	ac e0       	ldi	r26, 0x0C	; 12
 6da:	81 50       	subi	r24, 0x01	; 1
 6dc:	90 40       	sbci	r25, 0x00	; 0
 6de:	a0 40       	sbci	r26, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x16>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x20>
 6e4:	00 00       	nop
	_delay_ms(500);
	I2C_start(); // transmit start condition
 6e6:	0e 94 09 03 	call	0x612	; 0x612 <I2C_start>
	I2C_write_address(0b10100000); // transmit device address and Write
 6ea:	80 ea       	ldi	r24, 0xA0	; 160
 6ec:	0e 94 1d 03 	call	0x63a	; 0x63a <I2C_write_address>
	I2C_write_data(0b00000000); // transmit word address
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	0e 94 33 03 	call	0x666	; 0x666 <I2C_write_data>
	I2C_write_data(0x32); // transmit data
 6f6:	82 e3       	ldi	r24, 0x32	; 50
 6f8:	0e 94 33 03 	call	0x666	; 0x666 <I2C_write_data>
	I2C_stop(); // transmit stop condition
 6fc:	0e 94 3e 03 	call	0x67c	; 0x67c <I2C_stop>
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	91 ee       	ldi	r25, 0xE1	; 225
 704:	a4 e0       	ldi	r26, 0x04	; 4
 706:	81 50       	subi	r24, 0x01	; 1
 708:	90 40       	sbci	r25, 0x00	; 0
 70a:	a0 40       	sbci	r26, 0x00	; 0
 70c:	e1 f7       	brne	.-8      	; 0x706 <main+0x42>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <main+0x4c>
 710:	00 00       	nop
	
	/*read from the location 0b00000000000*/
	_delay_ms(200);
	I2C_start(); // transmit start condition
 712:	0e 94 09 03 	call	0x612	; 0x612 <I2C_start>
	I2C_write_address(0b10100000); // transmit device address and Write
 716:	80 ea       	ldi	r24, 0xA0	; 160
 718:	0e 94 1d 03 	call	0x63a	; 0x63a <I2C_write_address>
	I2C_write_data(0b00000000); // transmit word address
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	0e 94 33 03 	call	0x666	; 0x666 <I2C_write_data>
	I2C_repeated_start(); // transmit repeated start condition
 722:	0e 94 13 03 	call	0x626	; 0x626 <I2C_repeated_start>
	I2C_write_address_and_read(0b10100001); // transmit device address and read
 726:	81 ea       	ldi	r24, 0xA1	; 161
 728:	0e 94 28 03 	call	0x650	; 0x650 <I2C_write_address_and_read>
	x=I2C_read_with_NACK();
 72c:	0e 94 41 03 	call	0x682	; 0x682 <I2C_read_with_NACK>
 730:	c8 2f       	mov	r28, r24
	I2C_stop();
 732:	0e 94 3e 03 	call	0x67c	; 0x67c <I2C_stop>
	LCD_vSend_char(x);
 736:	8c 2f       	mov	r24, r28
 738:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_vSend_char>
 73c:	ff cf       	rjmp	.-2      	; 0x73c <main+0x78>

0000073e <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 73e:	82 e4       	ldi	r24, 0x42	; 66
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 748:	8f e9       	ldi	r24, 0x9F	; 159
 74a:	9f e0       	ldi	r25, 0x0F	; 15
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <send_falling_edge+0xe>
 750:	00 c0       	rjmp	.+0      	; 0x752 <send_falling_edge+0x14>
 752:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 754:	82 e4       	ldi	r24, 0x42	; 66
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 75e:	8f e9       	ldi	r24, 0x9F	; 159
 760:	9f e0       	ldi	r25, 0x0F	; 15
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <send_falling_edge+0x24>
 766:	00 c0       	rjmp	.+0      	; 0x768 <send_falling_edge+0x2a>
 768:	00 00       	nop
	_delay_ms(2);
}
 76a:	08 95       	ret

0000076c <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
 76c:	cf 93       	push	r28
 76e:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
 770:	68 2f       	mov	r22, r24
 772:	62 95       	swap	r22
 774:	6f 70       	andi	r22, 0x0F	; 15
 776:	81 e4       	ldi	r24, 0x41	; 65
 778:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',RS,0);
 77c:	82 e4       	ldi	r24, 0x42	; 66
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
 786:	0e 94 9f 03 	call	0x73e	; 0x73e <send_falling_edge>
	write_high_nibble('A',cmd);
 78a:	81 e4       	ldi	r24, 0x41	; 65
 78c:	6c 2f       	mov	r22, r28
 78e:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',RS,0);
 792:	82 e4       	ldi	r24, 0x42	; 66
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
 79c:	0e 94 9f 03 	call	0x73e	; 0x73e <send_falling_edge>
 7a0:	8f ec       	ldi	r24, 0xCF	; 207
 7a2:	97 e0       	ldi	r25, 0x07	; 7
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <LCD_vSend_cmd+0x38>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <LCD_vSend_cmd+0x3e>
 7aa:	00 00       	nop
	#endif
	_delay_ms(1);
}
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <LCD_vInit>:
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	91 ee       	ldi	r25, 0xE1	; 225
 7b4:	a4 e0       	ldi	r26, 0x04	; 4
 7b6:	81 50       	subi	r24, 0x01	; 1
 7b8:	90 40       	sbci	r25, 0x00	; 0
 7ba:	a0 40       	sbci	r26, 0x00	; 0
 7bc:	e1 f7       	brne	.-8      	; 0x7b6 <LCD_vInit+0x6>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <LCD_vInit+0x10>
 7c0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
 7c2:	81 e4       	ldi	r24, 0x41	; 65
 7c4:	64 e0       	ldi	r22, 0x04	; 4
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 7cc:	81 e4       	ldi	r24, 0x41	; 65
 7ce:	65 e0       	ldi	r22, 0x05	; 5
 7d0:	41 e0       	ldi	r20, 0x01	; 1
 7d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 7d6:	81 e4       	ldi	r24, 0x41	; 65
 7d8:	66 e0       	ldi	r22, 0x06	; 6
 7da:	41 e0       	ldi	r20, 0x01	; 1
 7dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 7e0:	81 e4       	ldi	r24, 0x41	; 65
 7e2:	67 e0       	ldi	r22, 0x07	; 7
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 7ea:	82 e4       	ldi	r24, 0x42	; 66
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 7f4:	82 e4       	ldi	r24, 0x42	; 66
 7f6:	62 e0       	ldi	r22, 0x02	; 2
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 7fe:	82 e4       	ldi	r24, 0x42	; 66
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	41 e0       	ldi	r20, 0x01	; 1
 804:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
 808:	82 e4       	ldi	r24, 0x42	; 66
 80a:	62 e0       	ldi	r22, 0x02	; 2
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 818:	af e1       	ldi	r26, 0x1F	; 31
 81a:	be e4       	ldi	r27, 0x4E	; 78
 81c:	11 97       	sbiw	r26, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <LCD_vInit+0x6c>
 820:	00 c0       	rjmp	.+0      	; 0x822 <LCD_vInit+0x72>
 822:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 824:	88 e2       	ldi	r24, 0x28	; 40
 826:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 82a:	8f ec       	ldi	r24, 0xCF	; 207
 82c:	97 e0       	ldi	r25, 0x07	; 7
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	f1 f7       	brne	.-4      	; 0x82e <LCD_vInit+0x7e>
 832:	00 c0       	rjmp	.+0      	; 0x834 <LCD_vInit+0x84>
 834:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 836:	8e e0       	ldi	r24, 0x0E	; 14
 838:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 83c:	af ec       	ldi	r26, 0xCF	; 207
 83e:	b7 e0       	ldi	r27, 0x07	; 7
 840:	11 97       	sbiw	r26, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <LCD_vInit+0x90>
 844:	00 c0       	rjmp	.+0      	; 0x846 <LCD_vInit+0x96>
 846:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 84e:	8f e1       	ldi	r24, 0x1F	; 31
 850:	9e e4       	ldi	r25, 0x4E	; 78
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <LCD_vInit+0xa2>
 856:	00 c0       	rjmp	.+0      	; 0x858 <LCD_vInit+0xa8>
 858:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 85a:	86 e0       	ldi	r24, 0x06	; 6
 85c:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 860:	af ec       	ldi	r26, 0xCF	; 207
 862:	b7 e0       	ldi	r27, 0x07	; 7
 864:	11 97       	sbiw	r26, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
 86a:	00 00       	nop
	_delay_ms(1);
	#endif
}
 86c:	08 95       	ret

0000086e <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 86e:	cf 93       	push	r28
 870:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
 872:	68 2f       	mov	r22, r24
 874:	62 95       	swap	r22
 876:	6f 70       	andi	r22, 0x0F	; 15
 878:	81 e4       	ldi	r24, 0x41	; 65
 87a:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',RS,1);
 87e:	82 e4       	ldi	r24, 0x42	; 66
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	41 e0       	ldi	r20, 0x01	; 1
 884:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
 888:	0e 94 9f 03 	call	0x73e	; 0x73e <send_falling_edge>
	write_high_nibble('A',data);
 88c:	81 e4       	ldi	r24, 0x41	; 65
 88e:	6c 2f       	mov	r22, r28
 890:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',RS,1);
 894:	82 e4       	ldi	r24, 0x42	; 66
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	41 e0       	ldi	r20, 0x01	; 1
 89a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
 89e:	0e 94 9f 03 	call	0x73e	; 0x73e <send_falling_edge>
 8a2:	8f ec       	ldi	r24, 0xCF	; 207
 8a4:	97 e0       	ldi	r25, 0x07	; 7
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <LCD_vSend_char+0x38>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <LCD_vSend_char+0x3e>
 8ac:	00 00       	nop
	#endif
	_delay_ms(1);
}
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 8b8:	88 81       	ld	r24, Y
 8ba:	88 23       	and	r24, r24
 8bc:	31 f0       	breq	.+12     	; 0x8ca <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
 8be:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 8c0:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 8c4:	89 91       	ld	r24, Y+
 8c6:	88 23       	and	r24, r24
 8c8:	d9 f7       	brne	.-10     	; 0x8c0 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 8d6:	8f e1       	ldi	r24, 0x1F	; 31
 8d8:	9e e4       	ldi	r25, 0x4E	; 78
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	f1 f7       	brne	.-4      	; 0x8da <LCD_clearscreen+0xa>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <LCD_clearscreen+0x10>
 8e0:	00 00       	nop
	_delay_ms(10);
}
 8e2:	08 95       	ret

000008e4 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 8e4:	28 2f       	mov	r18, r24
 8e6:	21 50       	subi	r18, 0x01	; 1
 8e8:	22 30       	cpi	r18, 0x02	; 2
 8ea:	70 f4       	brcc	.+28     	; 0x908 <LCD_movecursor+0x24>
 8ec:	61 31       	cpi	r22, 0x11	; 17
 8ee:	70 f4       	brcc	.+28     	; 0x90c <LCD_movecursor+0x28>
 8f0:	66 23       	and	r22, r22
 8f2:	71 f0       	breq	.+28     	; 0x910 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	19 f4       	brne	.+6      	; 0x8fe <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 8f8:	96 2f       	mov	r25, r22
 8fa:	91 58       	subi	r25, 0x81	; 129
 8fc:	0a c0       	rjmp	.+20     	; 0x912 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 8fe:	82 30       	cpi	r24, 0x02	; 2
 900:	41 f4       	brne	.+16     	; 0x912 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 902:	96 2f       	mov	r25, r22
 904:	91 54       	subi	r25, 0x41	; 65
 906:	05 c0       	rjmp	.+10     	; 0x912 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 908:	90 e8       	ldi	r25, 0x80	; 128
 90a:	03 c0       	rjmp	.+6      	; 0x912 <LCD_movecursor+0x2e>
 90c:	90 e8       	ldi	r25, 0x80	; 128
 90e:	01 c0       	rjmp	.+2      	; 0x912 <LCD_movecursor+0x2e>
 910:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 912:	89 2f       	mov	r24, r25
 914:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_vSend_cmd>
 918:	8f ec       	ldi	r24, 0xCF	; 207
 91a:	97 e0       	ldi	r25, 0x07	; 7
 91c:	01 97       	sbiw	r24, 0x01	; 1
 91e:	f1 f7       	brne	.-4      	; 0x91c <LCD_movecursor+0x38>
 920:	00 c0       	rjmp	.+0      	; 0x922 <LCD_movecursor+0x3e>
 922:	00 00       	nop
	_delay_ms(1);
}
 924:	08 95       	ret

00000926 <__udivmodsi4>:
 926:	a1 e2       	ldi	r26, 0x21	; 33
 928:	1a 2e       	mov	r1, r26
 92a:	aa 1b       	sub	r26, r26
 92c:	bb 1b       	sub	r27, r27
 92e:	fd 01       	movw	r30, r26
 930:	0d c0       	rjmp	.+26     	; 0x94c <__udivmodsi4_ep>

00000932 <__udivmodsi4_loop>:
 932:	aa 1f       	adc	r26, r26
 934:	bb 1f       	adc	r27, r27
 936:	ee 1f       	adc	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	a2 17       	cp	r26, r18
 93c:	b3 07       	cpc	r27, r19
 93e:	e4 07       	cpc	r30, r20
 940:	f5 07       	cpc	r31, r21
 942:	20 f0       	brcs	.+8      	; 0x94c <__udivmodsi4_ep>
 944:	a2 1b       	sub	r26, r18
 946:	b3 0b       	sbc	r27, r19
 948:	e4 0b       	sbc	r30, r20
 94a:	f5 0b       	sbc	r31, r21

0000094c <__udivmodsi4_ep>:
 94c:	66 1f       	adc	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	1a 94       	dec	r1
 956:	69 f7       	brne	.-38     	; 0x932 <__udivmodsi4_loop>
 958:	60 95       	com	r22
 95a:	70 95       	com	r23
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	9b 01       	movw	r18, r22
 962:	ac 01       	movw	r20, r24
 964:	bd 01       	movw	r22, r26
 966:	cf 01       	movw	r24, r30
 968:	08 95       	ret

0000096a <_exit>:
 96a:	f8 94       	cli

0000096c <__stop_program>:
 96c:	ff cf       	rjmp	.-2      	; 0x96c <__stop_program>
