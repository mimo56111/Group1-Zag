
send string using USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000960  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000651  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000250  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000575  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "USART.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	UART_vInit(9600);
  92:	60 e8       	ldi	r22, 0x80	; 128
  94:	75 e2       	ldi	r23, 0x25	; 37
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 5d 00 	call	0xba	; 0xba <UART_vInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	92 e5       	ldi	r25, 0x52	; 82
  a2:	a7 e0       	ldi	r26, 0x07	; 7
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	a0 40       	sbci	r26, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1c>
  ae:	00 00       	nop
	_delay_ms(300);
	UART_vSendstring("Zag Group1");
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 88 00 	call	0x110	; 0x110 <UART_vSendstring>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x26>

000000ba <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "std_macros.h"

void UART_vInit(unsigned long baud)
{
  ba:	dc 01       	movw	r26, r24
  bc:	cb 01       	movw	r24, r22
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	aa 1f       	adc	r26, r26
  c4:	bb 1f       	adc	r27, r27
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	aa 1f       	adc	r26, r26
  cc:	bb 1f       	adc	r27, r27
  ce:	9c 01       	movw	r18, r24
  d0:	ad 01       	movw	r20, r26
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	44 1f       	adc	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	44 1f       	adc	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	72 e1       	ldi	r23, 0x12	; 18
  e6:	8a e7       	ldi	r24, 0x7A	; 122
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 a0 00 	call	0x140	; 0x140 <__udivmodsi4>
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
  f2:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)UBRR;
  f4:	29 b9       	out	0x09, r18	; 9
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
  f6:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
  f8:	54 9a       	sbi	0x0a, 4	; 10
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	80 bd       	out	0x20, r24	; 32
}
  fe:	08 95       	ret

00000100 <UART_vSendData>:

void UART_vSendData(char data)
{
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <UART_vSendData>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
 104:	8c b9       	out	0x0c, r24	; 12
}
 106:	08 95       	ret

00000108 <UART_u8ReceiveData>:

char UART_u8ReceiveData(void)
{
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
 108:	5f 9b       	sbis	0x0b, 7	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <UART_u8ReceiveData>
	/*Receive data from UDR receive buffer*/
	return UDR ;
 10c:	8c b1       	in	r24, 0x0c	; 12
}
 10e:	08 95       	ret

00000110 <UART_vSendstring>:
void UART_vSendstring( char *ptr)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	while(*ptr!=0)
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	79 f0       	breq	.+30     	; 0x13a <UART_vSendstring+0x2a>
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
	/*Receive data from UDR receive buffer*/
	return UDR ;
}
void UART_vSendstring( char *ptr)
 11c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)
	{
		UART_vSendData(*ptr);
 11e:	0e 94 80 00 	call	0x100	; 0x100 <UART_vSendData>
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	90 e7       	ldi	r25, 0x70	; 112
 126:	a2 e0       	ldi	r26, 0x02	; 2
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	a0 40       	sbci	r26, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <UART_vSendstring+0x18>
 130:	00 c0       	rjmp	.+0      	; 0x132 <UART_vSendstring+0x22>
 132:	00 00       	nop
	/*Receive data from UDR receive buffer*/
	return UDR ;
}
void UART_vSendstring( char *ptr)
{
	while(*ptr!=0)
 134:	89 91       	ld	r24, Y+
 136:	88 23       	and	r24, r24
 138:	91 f7       	brne	.-28     	; 0x11e <UART_vSendstring+0xe>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <__udivmodsi4>:
 140:	a1 e2       	ldi	r26, 0x21	; 33
 142:	1a 2e       	mov	r1, r26
 144:	aa 1b       	sub	r26, r26
 146:	bb 1b       	sub	r27, r27
 148:	fd 01       	movw	r30, r26
 14a:	0d c0       	rjmp	.+26     	; 0x166 <__udivmodsi4_ep>

0000014c <__udivmodsi4_loop>:
 14c:	aa 1f       	adc	r26, r26
 14e:	bb 1f       	adc	r27, r27
 150:	ee 1f       	adc	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	a2 17       	cp	r26, r18
 156:	b3 07       	cpc	r27, r19
 158:	e4 07       	cpc	r30, r20
 15a:	f5 07       	cpc	r31, r21
 15c:	20 f0       	brcs	.+8      	; 0x166 <__udivmodsi4_ep>
 15e:	a2 1b       	sub	r26, r18
 160:	b3 0b       	sbc	r27, r19
 162:	e4 0b       	sbc	r30, r20
 164:	f5 0b       	sbc	r31, r21

00000166 <__udivmodsi4_ep>:
 166:	66 1f       	adc	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	1a 94       	dec	r1
 170:	69 f7       	brne	.-38     	; 0x14c <__udivmodsi4_loop>
 172:	60 95       	com	r22
 174:	70 95       	com	r23
 176:	80 95       	com	r24
 178:	90 95       	com	r25
 17a:	9b 01       	movw	r18, r22
 17c:	ac 01       	movw	r20, r24
 17e:	bd 01       	movw	r22, r26
 180:	cf 01       	movw	r24, r30
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
